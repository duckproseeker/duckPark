// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo_service.proto

#include "echo_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace echo_service {
constexpr Embedded::Embedded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EmbeddedDefaultTypeInternal {
  constexpr EmbeddedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmbeddedDefaultTypeInternal() {}
  union {
    Embedded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmbeddedDefaultTypeInternal _Embedded_default_instance_;
constexpr SimpleMessage::SimpleMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , num_(int64_t{0})
  , _oneof_case_{}{}
struct SimpleMessageDefaultTypeInternal {
  constexpr SimpleMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleMessageDefaultTypeInternal() {}
  union {
    SimpleMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleMessageDefaultTypeInternal _SimpleMessage_default_instance_;
}  // namespace echo_service
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_echo_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_echo_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_echo_5fservice_2eproto = nullptr;

const uint32_t TableStruct_echo_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::echo_service::Embedded, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::echo_service::Embedded, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::echo_service::Embedded, mark_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, id_),
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, num_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, code_),
  PROTOBUF_FIELD_OFFSET(::echo_service::SimpleMessage, ext_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::echo_service::Embedded)},
  { 9, -1, -1, sizeof(::echo_service::SimpleMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::echo_service::_Embedded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::echo_service::_SimpleMessage_default_instance_),
};

const char descriptor_table_protodef_echo_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022echo_service.proto\022\014echo_service\"6\n\010Em"
  "bedded\022\022\n\010progress\030\001 \001(\003H\000\022\016\n\004note\030\002 \001(\t"
  "H\000B\006\n\004mark\"\267\001\n\rSimpleMessage\022\n\n\002id\030\001 \001(\t"
  "\022\013\n\003num\030\002 \001(\003\022\022\n\010line_num\030\003 \001(\003H\000\022\016\n\004lan"
  "g\030\004 \001(\tH\000\022&\n\006status\030\005 \001(\0132\026.echo_service"
  ".Embedded\022\014\n\002en\030\006 \001(\003H\001\022$\n\002no\030\007 \001(\0132\026.ec"
  "ho_service.EmbeddedH\001B\006\n\004codeB\005\n\003ext2\263\002\n"
  "\013EchoService\022B\n\004Echo\022\033.echo_service.Simp"
  "leMessage\032\033.echo_service.SimpleMessage\"\000"
  "\022F\n\010EchoBody\022\033.echo_service.SimpleMessag"
  "e\032\033.echo_service.SimpleMessage\"\000\022H\n\nEcho"
  "Delete\022\033.echo_service.SimpleMessage\032\033.ec"
  "ho_service.SimpleMessage\"\000\022N\n\020EchoUnauth"
  "orized\022\033.echo_service.SimpleMessage\032\033.ec"
  "ho_service.SimpleMessage\"\000B\023Z\021proto/echo"
  "Serviceb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_echo_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_echo_5fservice_2eproto = {
  false, false, 615, descriptor_table_protodef_echo_5fservice_2eproto, "echo_service.proto", 
  &descriptor_table_echo_5fservice_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_echo_5fservice_2eproto::offsets,
  file_level_metadata_echo_5fservice_2eproto, file_level_enum_descriptors_echo_5fservice_2eproto, file_level_service_descriptors_echo_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_echo_5fservice_2eproto_getter() {
  return &descriptor_table_echo_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_echo_5fservice_2eproto(&descriptor_table_echo_5fservice_2eproto);
namespace echo_service {

// ===================================================================

class Embedded::_Internal {
 public:
};

Embedded::Embedded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo_service.Embedded)
}
Embedded::Embedded(const Embedded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mark();
  switch (from.mark_case()) {
    case kProgress: {
      _internal_set_progress(from._internal_progress());
      break;
    }
    case kNote: {
      _internal_set_note(from._internal_note());
      break;
    }
    case MARK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:echo_service.Embedded)
}

inline void Embedded::SharedCtor() {
clear_has_mark();
}

Embedded::~Embedded() {
  // @@protoc_insertion_point(destructor:echo_service.Embedded)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Embedded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_mark()) {
    clear_mark();
  }
}

void Embedded::ArenaDtor(void* object) {
  Embedded* _this = reinterpret_cast< Embedded* >(object);
  (void)_this;
}
void Embedded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Embedded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Embedded::clear_mark() {
// @@protoc_insertion_point(one_of_clear_start:echo_service.Embedded)
  switch (mark_case()) {
    case kProgress: {
      // No need to clear
      break;
    }
    case kNote: {
      mark_.note_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case MARK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MARK_NOT_SET;
}


void Embedded::Clear() {
// @@protoc_insertion_point(message_clear_start:echo_service.Embedded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mark();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Embedded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_progress(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string note = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "echo_service.Embedded.note"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Embedded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo_service.Embedded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 progress = 1;
  if (_internal_has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_progress(), target);
  }

  // string note = 2;
  if (_internal_has_note()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "echo_service.Embedded.note");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo_service.Embedded)
  return target;
}

size_t Embedded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo_service.Embedded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mark_case()) {
    // int64 progress = 1;
    case kProgress: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_progress());
      break;
    }
    // string note = 2;
    case kNote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
      break;
    }
    case MARK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Embedded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Embedded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Embedded::GetClassData() const { return &_class_data_; }

void Embedded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Embedded *>(to)->MergeFrom(
      static_cast<const Embedded &>(from));
}


void Embedded::MergeFrom(const Embedded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo_service.Embedded)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mark_case()) {
    case kProgress: {
      _internal_set_progress(from._internal_progress());
      break;
    }
    case kNote: {
      _internal_set_note(from._internal_note());
      break;
    }
    case MARK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Embedded::CopyFrom(const Embedded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo_service.Embedded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Embedded::IsInitialized() const {
  return true;
}

void Embedded::InternalSwap(Embedded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mark_, other->mark_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Embedded::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_5fservice_2eproto_getter, &descriptor_table_echo_5fservice_2eproto_once,
      file_level_metadata_echo_5fservice_2eproto[0]);
}

// ===================================================================

class SimpleMessage::_Internal {
 public:
  static const ::echo_service::Embedded& status(const SimpleMessage* msg);
  static const ::echo_service::Embedded& no(const SimpleMessage* msg);
};

const ::echo_service::Embedded&
SimpleMessage::_Internal::status(const SimpleMessage* msg) {
  return *msg->status_;
}
const ::echo_service::Embedded&
SimpleMessage::_Internal::no(const SimpleMessage* msg) {
  return *msg->ext_.no_;
}
void SimpleMessage::set_allocated_no(::echo_service::Embedded* no) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (no) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::echo_service::Embedded>::GetOwningArena(no);
    if (message_arena != submessage_arena) {
      no = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no, submessage_arena);
    }
    set_has_no();
    ext_.no_ = no;
  }
  // @@protoc_insertion_point(field_set_allocated:echo_service.SimpleMessage.no)
}
SimpleMessage::SimpleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:echo_service.SimpleMessage)
}
SimpleMessage::SimpleMessage(const SimpleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::echo_service::Embedded(*from.status_);
  } else {
    status_ = nullptr;
  }
  num_ = from.num_;
  clear_has_code();
  switch (from.code_case()) {
    case kLineNum: {
      _internal_set_line_num(from._internal_line_num());
      break;
    }
    case kLang: {
      _internal_set_lang(from._internal_lang());
      break;
    }
    case CODE_NOT_SET: {
      break;
    }
  }
  clear_has_ext();
  switch (from.ext_case()) {
    case kEn: {
      _internal_set_en(from._internal_en());
      break;
    }
    case kNo: {
      _internal_mutable_no()->::echo_service::Embedded::MergeFrom(from._internal_no());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:echo_service.SimpleMessage)
}

inline void SimpleMessage::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&status_)) + sizeof(num_));
clear_has_code();
clear_has_ext();
}

SimpleMessage::~SimpleMessage() {
  // @@protoc_insertion_point(destructor:echo_service.SimpleMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (has_code()) {
    clear_code();
  }
  if (has_ext()) {
    clear_ext();
  }
}

void SimpleMessage::ArenaDtor(void* object) {
  SimpleMessage* _this = reinterpret_cast< SimpleMessage* >(object);
  (void)_this;
}
void SimpleMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleMessage::clear_code() {
// @@protoc_insertion_point(one_of_clear_start:echo_service.SimpleMessage)
  switch (code_case()) {
    case kLineNum: {
      // No need to clear
      break;
    }
    case kLang: {
      code_.lang_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case CODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CODE_NOT_SET;
}

void SimpleMessage::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:echo_service.SimpleMessage)
  switch (ext_case()) {
    case kEn: {
      // No need to clear
      break;
    }
    case kNo: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.no_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = EXT_NOT_SET;
}


void SimpleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:echo_service.SimpleMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  num_ = int64_t{0};
  clear_code();
  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "echo_service.SimpleMessage.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 line_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_line_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_lang();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "echo_service.SimpleMessage.lang"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .echo_service.Embedded status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 en = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_en(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .echo_service.Embedded no = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_no(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:echo_service.SimpleMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "echo_service.SimpleMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num(), target);
  }

  // int64 line_num = 3;
  if (_internal_has_line_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_line_num(), target);
  }

  // string lang = 4;
  if (_internal_has_lang()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "echo_service.SimpleMessage.lang");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lang(), target);
  }

  // .echo_service.Embedded status = 5;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::status(this), target, stream);
  }

  // int64 en = 6;
  if (_internal_has_en()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_en(), target);
  }

  // .echo_service.Embedded no = 7;
  if (_internal_has_no()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::no(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:echo_service.SimpleMessage)
  return target;
}

size_t SimpleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:echo_service.SimpleMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .echo_service.Embedded status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num());
  }

  switch (code_case()) {
    // int64 line_num = 3;
    case kLineNum: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_line_num());
      break;
    }
    // string lang = 4;
    case kLang: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lang());
      break;
    }
    case CODE_NOT_SET: {
      break;
    }
  }
  switch (ext_case()) {
    // int64 en = 6;
    case kEn: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_en());
      break;
    }
    // .echo_service.Embedded no = 7;
    case kNo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.no_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleMessage::GetClassData() const { return &_class_data_; }

void SimpleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleMessage *>(to)->MergeFrom(
      static_cast<const SimpleMessage &>(from));
}


void SimpleMessage::MergeFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echo_service.SimpleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::echo_service::Embedded::MergeFrom(from._internal_status());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  switch (from.code_case()) {
    case kLineNum: {
      _internal_set_line_num(from._internal_line_num());
      break;
    }
    case kLang: {
      _internal_set_lang(from._internal_lang());
      break;
    }
    case CODE_NOT_SET: {
      break;
    }
  }
  switch (from.ext_case()) {
    case kEn: {
      _internal_set_en(from._internal_en());
      break;
    }
    case kNo: {
      _internal_mutable_no()->::echo_service::Embedded::MergeFrom(from._internal_no());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMessage::CopyFrom(const SimpleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echo_service.SimpleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage::IsInitialized() const {
  return true;
}

void SimpleMessage::InternalSwap(SimpleMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMessage, num_)
      + sizeof(SimpleMessage::num_)
      - PROTOBUF_FIELD_OFFSET(SimpleMessage, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
  swap(code_, other->code_);
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_echo_5fservice_2eproto_getter, &descriptor_table_echo_5fservice_2eproto_once,
      file_level_metadata_echo_5fservice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace echo_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::echo_service::Embedded* Arena::CreateMaybeMessage< ::echo_service::Embedded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::echo_service::Embedded >(arena);
}
template<> PROTOBUF_NOINLINE ::echo_service::SimpleMessage* Arena::CreateMaybeMessage< ::echo_service::SimpleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::echo_service::SimpleMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
