// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: echo_service.proto
#ifndef GRPC_echo_5fservice_2eproto__INCLUDED
#define GRPC_echo_5fservice_2eproto__INCLUDED

#include "echo_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace echo_service {

// DynamicMessage represents a message which can have its structure
// built dynamically using Struct and Values.
//
// message DynamicMessage {
// google.protobuf.Struct struct_field = 1;
// google.protobuf.Value value_field = 2;
// }
//
// message DynamicMessageUpdate {
// DynamicMessage body = 1;
// google.protobuf.FieldMask update_mask = 2;
// }
//
// Echo service responds to incoming echo requests.
class EchoService final {
 public:
  static constexpr char const* service_full_name() {
    return "echo_service.EchoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Echo method receives a simple message and returns it.
    //
    // The message posted as the id parameter will also be
    // returned.
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> AsyncEcho(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    // option (google.api.http) = {
    // post: "/v1/example/echo/{id}"
    // additional_bindings {
    // get: "/v1/example/echo/{id}/{num}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo/{id}/{num}/{lang}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo1/{id}/{line_num}/{status.note}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo2/{no.note}"
    // }
    // };
    // EchoBody method receives a simple message and returns it.
    virtual ::grpc::Status EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> AsyncEchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(AsyncEchoBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> PrepareAsyncEchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(PrepareAsyncEchoBodyRaw(context, request, cq));
    }
    // option (google.api.http) = {
    // post: "/v1/example/echo_body"
    // body: "*"
    // additional_bindings {
    // put: "/v1/example/echo_body/{id}"
    // body: "no"
    // }
    // };
    // EchoDelete method receives a simple message and returns it.
    virtual ::grpc::Status EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> AsyncEchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(AsyncEchoDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> PrepareAsyncEchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(PrepareAsyncEchoDeleteRaw(context, request, cq));
    }
    // option (google.api.http) = {
    // delete: "/v1/example/echo_delete"
    // };
    // option (google.api.http) = {
    // patch: "/v1/example/echo_patch"
    // body: "body"
    // };
    //
    // }
    // EchoUnauthorized method receives a simple message and returns it. It must
    // always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
    // of 401.
    virtual ::grpc::Status EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> AsyncEchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(AsyncEchoUnauthorizedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>> PrepareAsyncEchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>>(PrepareAsyncEchoUnauthorizedRaw(context, request, cq));
    }
    // option (google.api.http) = {
    // get: "/v1/example/echo_unauthorized"
    // };
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Echo method receives a simple message and returns it.
      //
      // The message posted as the id parameter will also be
      // returned.
      virtual void Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      // post: "/v1/example/echo/{id}"
      // additional_bindings {
      // get: "/v1/example/echo/{id}/{num}"
      // }
      // additional_bindings {
      // get: "/v1/example/echo/{id}/{num}/{lang}"
      // }
      // additional_bindings {
      // get: "/v1/example/echo1/{id}/{line_num}/{status.note}"
      // }
      // additional_bindings {
      // get: "/v1/example/echo2/{no.note}"
      // }
      // };
      // EchoBody method receives a simple message and returns it.
      virtual void EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      // post: "/v1/example/echo_body"
      // body: "*"
      // additional_bindings {
      // put: "/v1/example/echo_body/{id}"
      // body: "no"
      // }
      // };
      // EchoDelete method receives a simple message and returns it.
      virtual void EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      // delete: "/v1/example/echo_delete"
      // };
      // option (google.api.http) = {
      // patch: "/v1/example/echo_patch"
      // body: "body"
      // };
      //
      // }
      // EchoUnauthorized method receives a simple message and returns it. It must
      // always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
      // of 401.
      virtual void EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      // get: "/v1/example/echo_unauthorized"
      // };
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* AsyncEchoRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* AsyncEchoBodyRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* PrepareAsyncEchoBodyRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* AsyncEchoDeleteRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* PrepareAsyncEchoDeleteRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* AsyncEchoUnauthorizedRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo_service::SimpleMessage>* PrepareAsyncEchoUnauthorizedRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> AsyncEcho(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    ::grpc::Status EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> AsyncEchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(AsyncEchoBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> PrepareAsyncEchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(PrepareAsyncEchoBodyRaw(context, request, cq));
    }
    ::grpc::Status EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> AsyncEchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(AsyncEchoDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> PrepareAsyncEchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(PrepareAsyncEchoDeleteRaw(context, request, cq));
    }
    ::grpc::Status EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::echo_service::SimpleMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> AsyncEchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(AsyncEchoUnauthorizedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>> PrepareAsyncEchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>>(PrepareAsyncEchoUnauthorizedRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) override;
      void Echo(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) override;
      void EchoBody(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) override;
      void EchoDelete(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, std::function<void(::grpc::Status)>) override;
      void EchoUnauthorized(::grpc::ClientContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* AsyncEchoRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* AsyncEchoBodyRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* PrepareAsyncEchoBodyRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* AsyncEchoDeleteRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* PrepareAsyncEchoDeleteRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* AsyncEchoUnauthorizedRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo_service::SimpleMessage>* PrepareAsyncEchoUnauthorizedRaw(::grpc::ClientContext* context, const ::echo_service::SimpleMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoBody_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoUnauthorized_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Echo method receives a simple message and returns it.
    //
    // The message posted as the id parameter will also be
    // returned.
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response);
    // option (google.api.http) = {
    // post: "/v1/example/echo/{id}"
    // additional_bindings {
    // get: "/v1/example/echo/{id}/{num}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo/{id}/{num}/{lang}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo1/{id}/{line_num}/{status.note}"
    // }
    // additional_bindings {
    // get: "/v1/example/echo2/{no.note}"
    // }
    // };
    // EchoBody method receives a simple message and returns it.
    virtual ::grpc::Status EchoBody(::grpc::ServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response);
    // option (google.api.http) = {
    // post: "/v1/example/echo_body"
    // body: "*"
    // additional_bindings {
    // put: "/v1/example/echo_body/{id}"
    // body: "no"
    // }
    // };
    // EchoDelete method receives a simple message and returns it.
    virtual ::grpc::Status EchoDelete(::grpc::ServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response);
    // option (google.api.http) = {
    // delete: "/v1/example/echo_delete"
    // };
    // option (google.api.http) = {
    // patch: "/v1/example/echo_patch"
    // body: "body"
    // };
    //
    // }
    // EchoUnauthorized method receives a simple message and returns it. It must
    // always return a google.rpc.Code of `UNAUTHENTICATED` and a HTTP Status code
    // of 401.
    virtual ::grpc::Status EchoUnauthorized(::grpc::ServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response);
    // option (google.api.http) = {
    // get: "/v1/example/echo_unauthorized"
    // };
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::echo_service::SimpleMessage* request, ::grpc::ServerAsyncResponseWriter< ::echo_service::SimpleMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoBody() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoBody(::grpc::ServerContext* context, ::echo_service::SimpleMessage* request, ::grpc::ServerAsyncResponseWriter< ::echo_service::SimpleMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoDelete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoDelete(::grpc::ServerContext* context, ::echo_service::SimpleMessage* request, ::grpc::ServerAsyncResponseWriter< ::echo_service::SimpleMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoUnauthorized(::grpc::ServerContext* context, ::echo_service::SimpleMessage* request, ::grpc::ServerAsyncResponseWriter< ::echo_service::SimpleMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_EchoBody<WithAsyncMethod_EchoDelete<WithAsyncMethod_EchoUnauthorized<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response) { return this->Echo(context, request, response); }));}
    void SetMessageAllocatorFor_Echo(
        ::grpc::MessageAllocator< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EchoBody() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response) { return this->EchoBody(context, request, response); }));}
    void SetMessageAllocatorFor_EchoBody(
        ::grpc::MessageAllocator< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoBody(
      ::grpc::CallbackServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EchoDelete() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response) { return this->EchoDelete(context, request, response); }));}
    void SetMessageAllocatorFor_EchoDelete(
        ::grpc::MessageAllocator< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo_service::SimpleMessage* request, ::echo_service::SimpleMessage* response) { return this->EchoUnauthorized(context, request, response); }));}
    void SetMessageAllocatorFor_EchoUnauthorized(
        ::grpc::MessageAllocator< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoUnauthorized(
      ::grpc::CallbackServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Echo<WithCallbackMethod_EchoBody<WithCallbackMethod_EchoDelete<WithCallbackMethod_EchoUnauthorized<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoBody() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoDelete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoBody() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoDelete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoUnauthorized(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EchoBody() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EchoBody(context, request, response); }));
    }
    ~WithRawCallbackMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EchoDelete() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EchoDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EchoUnauthorized(context, request, response); }));
    }
    ~WithRawCallbackMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EchoUnauthorized(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* streamer) {
                       return this->StreamedEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo_service::SimpleMessage,::echo_service::SimpleMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EchoBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EchoBody() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* streamer) {
                       return this->StreamedEchoBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EchoBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoBody(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEchoBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo_service::SimpleMessage,::echo_service::SimpleMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EchoDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EchoDelete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* streamer) {
                       return this->StreamedEchoDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EchoDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoDelete(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEchoDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo_service::SimpleMessage,::echo_service::SimpleMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EchoUnauthorized : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EchoUnauthorized() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::echo_service::SimpleMessage, ::echo_service::SimpleMessage>* streamer) {
                       return this->StreamedEchoUnauthorized(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EchoUnauthorized() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoUnauthorized(::grpc::ServerContext* /*context*/, const ::echo_service::SimpleMessage* /*request*/, ::echo_service::SimpleMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEchoUnauthorized(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo_service::SimpleMessage,::echo_service::SimpleMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_EchoBody<WithStreamedUnaryMethod_EchoDelete<WithStreamedUnaryMethod_EchoUnauthorized<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_EchoBody<WithStreamedUnaryMethod_EchoDelete<WithStreamedUnaryMethod_EchoUnauthorized<Service > > > > StreamedService;
};

}  // namespace echo_service


#endif  // GRPC_echo_5fservice_2eproto__INCLUDED
