// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: responseBody.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_responseBody_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_responseBody_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_responseBody_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_responseBody_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_responseBody_2eproto;
namespace response_body {
class RepeatedResponseBodyOut;
struct RepeatedResponseBodyOutDefaultTypeInternal;
extern RepeatedResponseBodyOutDefaultTypeInternal _RepeatedResponseBodyOut_default_instance_;
class RepeatedResponseBodyOut_Response;
struct RepeatedResponseBodyOut_ResponseDefaultTypeInternal;
extern RepeatedResponseBodyOut_ResponseDefaultTypeInternal _RepeatedResponseBodyOut_Response_default_instance_;
class RepeatedResponseStrings;
struct RepeatedResponseStringsDefaultTypeInternal;
extern RepeatedResponseStringsDefaultTypeInternal _RepeatedResponseStrings_default_instance_;
class ResponseBodyIn;
struct ResponseBodyInDefaultTypeInternal;
extern ResponseBodyInDefaultTypeInternal _ResponseBodyIn_default_instance_;
class ResponseBodyOut;
struct ResponseBodyOutDefaultTypeInternal;
extern ResponseBodyOutDefaultTypeInternal _ResponseBodyOut_default_instance_;
class ResponseBodyOut_Response;
struct ResponseBodyOut_ResponseDefaultTypeInternal;
extern ResponseBodyOut_ResponseDefaultTypeInternal _ResponseBodyOut_Response_default_instance_;
}  // namespace response_body
PROTOBUF_NAMESPACE_OPEN
template<> ::response_body::RepeatedResponseBodyOut* Arena::CreateMaybeMessage<::response_body::RepeatedResponseBodyOut>(Arena*);
template<> ::response_body::RepeatedResponseBodyOut_Response* Arena::CreateMaybeMessage<::response_body::RepeatedResponseBodyOut_Response>(Arena*);
template<> ::response_body::RepeatedResponseStrings* Arena::CreateMaybeMessage<::response_body::RepeatedResponseStrings>(Arena*);
template<> ::response_body::ResponseBodyIn* Arena::CreateMaybeMessage<::response_body::ResponseBodyIn>(Arena*);
template<> ::response_body::ResponseBodyOut* Arena::CreateMaybeMessage<::response_body::ResponseBodyOut>(Arena*);
template<> ::response_body::ResponseBodyOut_Response* Arena::CreateMaybeMessage<::response_body::ResponseBodyOut_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace response_body {

enum RepeatedResponseBodyOut_Response_ResponseType : int {
  RepeatedResponseBodyOut_Response_ResponseType_UNKNOWN = 0,
  RepeatedResponseBodyOut_Response_ResponseType_A = 1,
  RepeatedResponseBodyOut_Response_ResponseType_B = 2,
  RepeatedResponseBodyOut_Response_ResponseType_RepeatedResponseBodyOut_Response_ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RepeatedResponseBodyOut_Response_ResponseType_RepeatedResponseBodyOut_Response_ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RepeatedResponseBodyOut_Response_ResponseType_IsValid(int value);
constexpr RepeatedResponseBodyOut_Response_ResponseType RepeatedResponseBodyOut_Response_ResponseType_ResponseType_MIN = RepeatedResponseBodyOut_Response_ResponseType_UNKNOWN;
constexpr RepeatedResponseBodyOut_Response_ResponseType RepeatedResponseBodyOut_Response_ResponseType_ResponseType_MAX = RepeatedResponseBodyOut_Response_ResponseType_B;
constexpr int RepeatedResponseBodyOut_Response_ResponseType_ResponseType_ARRAYSIZE = RepeatedResponseBodyOut_Response_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepeatedResponseBodyOut_Response_ResponseType_descriptor();
template<typename T>
inline const std::string& RepeatedResponseBodyOut_Response_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RepeatedResponseBodyOut_Response_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RepeatedResponseBodyOut_Response_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RepeatedResponseBodyOut_Response_ResponseType_descriptor(), enum_t_value);
}
inline bool RepeatedResponseBodyOut_Response_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RepeatedResponseBodyOut_Response_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RepeatedResponseBodyOut_Response_ResponseType>(
    RepeatedResponseBodyOut_Response_ResponseType_descriptor(), name, value);
}
// ===================================================================

class ResponseBodyIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.ResponseBodyIn) */ {
 public:
  inline ResponseBodyIn() : ResponseBodyIn(nullptr) {}
  ~ResponseBodyIn() override;
  explicit constexpr ResponseBodyIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseBodyIn(const ResponseBodyIn& from);
  ResponseBodyIn(ResponseBodyIn&& from) noexcept
    : ResponseBodyIn() {
    *this = ::std::move(from);
  }

  inline ResponseBodyIn& operator=(const ResponseBodyIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBodyIn& operator=(ResponseBodyIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseBodyIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseBodyIn* internal_default_instance() {
    return reinterpret_cast<const ResponseBodyIn*>(
               &_ResponseBodyIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResponseBodyIn& a, ResponseBodyIn& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBodyIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBodyIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseBodyIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseBodyIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseBodyIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseBodyIn& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBodyIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.ResponseBodyIn";
  }
  protected:
  explicit ResponseBodyIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:response_body.ResponseBodyIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// -------------------------------------------------------------------

class ResponseBodyOut_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.ResponseBodyOut.Response) */ {
 public:
  inline ResponseBodyOut_Response() : ResponseBodyOut_Response(nullptr) {}
  ~ResponseBodyOut_Response() override;
  explicit constexpr ResponseBodyOut_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseBodyOut_Response(const ResponseBodyOut_Response& from);
  ResponseBodyOut_Response(ResponseBodyOut_Response&& from) noexcept
    : ResponseBodyOut_Response() {
    *this = ::std::move(from);
  }

  inline ResponseBodyOut_Response& operator=(const ResponseBodyOut_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBodyOut_Response& operator=(ResponseBodyOut_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseBodyOut_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseBodyOut_Response* internal_default_instance() {
    return reinterpret_cast<const ResponseBodyOut_Response*>(
               &_ResponseBodyOut_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseBodyOut_Response& a, ResponseBodyOut_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBodyOut_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBodyOut_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseBodyOut_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseBodyOut_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseBodyOut_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseBodyOut_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBodyOut_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.ResponseBodyOut.Response";
  }
  protected:
  explicit ResponseBodyOut_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:response_body.ResponseBodyOut.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// -------------------------------------------------------------------

class ResponseBodyOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.ResponseBodyOut) */ {
 public:
  inline ResponseBodyOut() : ResponseBodyOut(nullptr) {}
  ~ResponseBodyOut() override;
  explicit constexpr ResponseBodyOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseBodyOut(const ResponseBodyOut& from);
  ResponseBodyOut(ResponseBodyOut&& from) noexcept
    : ResponseBodyOut() {
    *this = ::std::move(from);
  }

  inline ResponseBodyOut& operator=(const ResponseBodyOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBodyOut& operator=(ResponseBodyOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseBodyOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseBodyOut* internal_default_instance() {
    return reinterpret_cast<const ResponseBodyOut*>(
               &_ResponseBodyOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponseBodyOut& a, ResponseBodyOut& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBodyOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBodyOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseBodyOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseBodyOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseBodyOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseBodyOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBodyOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.ResponseBodyOut";
  }
  protected:
  explicit ResponseBodyOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResponseBodyOut_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
  };
  // .response_body.ResponseBodyOut.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::response_body::ResponseBodyOut_Response& response() const;
  PROTOBUF_NODISCARD ::response_body::ResponseBodyOut_Response* release_response();
  ::response_body::ResponseBodyOut_Response* mutable_response();
  void set_allocated_response(::response_body::ResponseBodyOut_Response* response);
  private:
  const ::response_body::ResponseBodyOut_Response& _internal_response() const;
  ::response_body::ResponseBodyOut_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::response_body::ResponseBodyOut_Response* response);
  ::response_body::ResponseBodyOut_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:response_body.ResponseBodyOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::response_body::ResponseBodyOut_Response* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// -------------------------------------------------------------------

class RepeatedResponseBodyOut_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.RepeatedResponseBodyOut.Response) */ {
 public:
  inline RepeatedResponseBodyOut_Response() : RepeatedResponseBodyOut_Response(nullptr) {}
  ~RepeatedResponseBodyOut_Response() override;
  explicit constexpr RepeatedResponseBodyOut_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedResponseBodyOut_Response(const RepeatedResponseBodyOut_Response& from);
  RepeatedResponseBodyOut_Response(RepeatedResponseBodyOut_Response&& from) noexcept
    : RepeatedResponseBodyOut_Response() {
    *this = ::std::move(from);
  }

  inline RepeatedResponseBodyOut_Response& operator=(const RepeatedResponseBodyOut_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedResponseBodyOut_Response& operator=(RepeatedResponseBodyOut_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedResponseBodyOut_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedResponseBodyOut_Response* internal_default_instance() {
    return reinterpret_cast<const RepeatedResponseBodyOut_Response*>(
               &_RepeatedResponseBodyOut_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RepeatedResponseBodyOut_Response& a, RepeatedResponseBodyOut_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedResponseBodyOut_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedResponseBodyOut_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedResponseBodyOut_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedResponseBodyOut_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedResponseBodyOut_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedResponseBodyOut_Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedResponseBodyOut_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.RepeatedResponseBodyOut.Response";
  }
  protected:
  explicit RepeatedResponseBodyOut_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RepeatedResponseBodyOut_Response_ResponseType ResponseType;
  static constexpr ResponseType UNKNOWN =
    RepeatedResponseBodyOut_Response_ResponseType_UNKNOWN;
  static constexpr ResponseType A =
    RepeatedResponseBodyOut_Response_ResponseType_A;
  static constexpr ResponseType B =
    RepeatedResponseBodyOut_Response_ResponseType_B;
  static inline bool ResponseType_IsValid(int value) {
    return RepeatedResponseBodyOut_Response_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    RepeatedResponseBodyOut_Response_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    RepeatedResponseBodyOut_Response_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    RepeatedResponseBodyOut_Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return RepeatedResponseBodyOut_Response_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return RepeatedResponseBodyOut_Response_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return RepeatedResponseBodyOut_Response_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .response_body.RepeatedResponseBodyOut.Response.ResponseType type = 3;
  void clear_type();
  ::response_body::RepeatedResponseBodyOut_Response_ResponseType type() const;
  void set_type(::response_body::RepeatedResponseBodyOut_Response_ResponseType value);
  private:
  ::response_body::RepeatedResponseBodyOut_Response_ResponseType _internal_type() const;
  void _internal_set_type(::response_body::RepeatedResponseBodyOut_Response_ResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:response_body.RepeatedResponseBodyOut.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// -------------------------------------------------------------------

class RepeatedResponseBodyOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.RepeatedResponseBodyOut) */ {
 public:
  inline RepeatedResponseBodyOut() : RepeatedResponseBodyOut(nullptr) {}
  ~RepeatedResponseBodyOut() override;
  explicit constexpr RepeatedResponseBodyOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedResponseBodyOut(const RepeatedResponseBodyOut& from);
  RepeatedResponseBodyOut(RepeatedResponseBodyOut&& from) noexcept
    : RepeatedResponseBodyOut() {
    *this = ::std::move(from);
  }

  inline RepeatedResponseBodyOut& operator=(const RepeatedResponseBodyOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedResponseBodyOut& operator=(RepeatedResponseBodyOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedResponseBodyOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedResponseBodyOut* internal_default_instance() {
    return reinterpret_cast<const RepeatedResponseBodyOut*>(
               &_RepeatedResponseBodyOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RepeatedResponseBodyOut& a, RepeatedResponseBodyOut& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedResponseBodyOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedResponseBodyOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedResponseBodyOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedResponseBodyOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedResponseBodyOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedResponseBodyOut& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedResponseBodyOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.RepeatedResponseBodyOut";
  }
  protected:
  explicit RepeatedResponseBodyOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RepeatedResponseBodyOut_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
  };
  // repeated .response_body.RepeatedResponseBodyOut.Response response = 2;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::response_body::RepeatedResponseBodyOut_Response* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::response_body::RepeatedResponseBodyOut_Response >*
      mutable_response();
  private:
  const ::response_body::RepeatedResponseBodyOut_Response& _internal_response(int index) const;
  ::response_body::RepeatedResponseBodyOut_Response* _internal_add_response();
  public:
  const ::response_body::RepeatedResponseBodyOut_Response& response(int index) const;
  ::response_body::RepeatedResponseBodyOut_Response* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::response_body::RepeatedResponseBodyOut_Response >&
      response() const;

  // @@protoc_insertion_point(class_scope:response_body.RepeatedResponseBodyOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::response_body::RepeatedResponseBodyOut_Response > response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// -------------------------------------------------------------------

class RepeatedResponseStrings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:response_body.RepeatedResponseStrings) */ {
 public:
  inline RepeatedResponseStrings() : RepeatedResponseStrings(nullptr) {}
  ~RepeatedResponseStrings() override;
  explicit constexpr RepeatedResponseStrings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedResponseStrings(const RepeatedResponseStrings& from);
  RepeatedResponseStrings(RepeatedResponseStrings&& from) noexcept
    : RepeatedResponseStrings() {
    *this = ::std::move(from);
  }

  inline RepeatedResponseStrings& operator=(const RepeatedResponseStrings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedResponseStrings& operator=(RepeatedResponseStrings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedResponseStrings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedResponseStrings* internal_default_instance() {
    return reinterpret_cast<const RepeatedResponseStrings*>(
               &_RepeatedResponseStrings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RepeatedResponseStrings& a, RepeatedResponseStrings& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedResponseStrings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedResponseStrings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedResponseStrings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedResponseStrings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedResponseStrings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepeatedResponseStrings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedResponseStrings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "response_body.RepeatedResponseStrings";
  }
  protected:
  explicit RepeatedResponseStrings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:response_body.RepeatedResponseStrings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_responseBody_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResponseBodyIn

// string data = 1;
inline void ResponseBodyIn::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResponseBodyIn::data() const {
  // @@protoc_insertion_point(field_get:response_body.ResponseBodyIn.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseBodyIn::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:response_body.ResponseBodyIn.data)
}
inline std::string* ResponseBodyIn::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:response_body.ResponseBodyIn.data)
  return _s;
}
inline const std::string& ResponseBodyIn::_internal_data() const {
  return data_.Get();
}
inline void ResponseBodyIn::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseBodyIn::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseBodyIn::release_data() {
  // @@protoc_insertion_point(field_release:response_body.ResponseBodyIn.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseBodyIn::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:response_body.ResponseBodyIn.data)
}

// -------------------------------------------------------------------

// ResponseBodyOut_Response

// string data = 1;
inline void ResponseBodyOut_Response::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ResponseBodyOut_Response::data() const {
  // @@protoc_insertion_point(field_get:response_body.ResponseBodyOut.Response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseBodyOut_Response::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:response_body.ResponseBodyOut.Response.data)
}
inline std::string* ResponseBodyOut_Response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:response_body.ResponseBodyOut.Response.data)
  return _s;
}
inline const std::string& ResponseBodyOut_Response::_internal_data() const {
  return data_.Get();
}
inline void ResponseBodyOut_Response::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseBodyOut_Response::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseBodyOut_Response::release_data() {
  // @@protoc_insertion_point(field_release:response_body.ResponseBodyOut.Response.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseBodyOut_Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:response_body.ResponseBodyOut.Response.data)
}

// -------------------------------------------------------------------

// ResponseBodyOut

// .response_body.ResponseBodyOut.Response response = 2;
inline bool ResponseBodyOut::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool ResponseBodyOut::has_response() const {
  return _internal_has_response();
}
inline void ResponseBodyOut::clear_response() {
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::response_body::ResponseBodyOut_Response& ResponseBodyOut::_internal_response() const {
  const ::response_body::ResponseBodyOut_Response* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::response_body::ResponseBodyOut_Response&>(
      ::response_body::_ResponseBodyOut_Response_default_instance_);
}
inline const ::response_body::ResponseBodyOut_Response& ResponseBodyOut::response() const {
  // @@protoc_insertion_point(field_get:response_body.ResponseBodyOut.response)
  return _internal_response();
}
inline void ResponseBodyOut::unsafe_arena_set_allocated_response(
    ::response_body::ResponseBodyOut_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:response_body.ResponseBodyOut.response)
}
inline ::response_body::ResponseBodyOut_Response* ResponseBodyOut::release_response() {
  
  ::response_body::ResponseBodyOut_Response* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::response_body::ResponseBodyOut_Response* ResponseBodyOut::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:response_body.ResponseBodyOut.response)
  
  ::response_body::ResponseBodyOut_Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::response_body::ResponseBodyOut_Response* ResponseBodyOut::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::response_body::ResponseBodyOut_Response>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::response_body::ResponseBodyOut_Response* ResponseBodyOut::mutable_response() {
  ::response_body::ResponseBodyOut_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:response_body.ResponseBodyOut.response)
  return _msg;
}
inline void ResponseBodyOut::set_allocated_response(::response_body::ResponseBodyOut_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::response_body::ResponseBodyOut_Response>::GetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:response_body.ResponseBodyOut.response)
}

// -------------------------------------------------------------------

// RepeatedResponseBodyOut_Response

// string data = 1;
inline void RepeatedResponseBodyOut_Response::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RepeatedResponseBodyOut_Response::data() const {
  // @@protoc_insertion_point(field_get:response_body.RepeatedResponseBodyOut.Response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepeatedResponseBodyOut_Response::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:response_body.RepeatedResponseBodyOut.Response.data)
}
inline std::string* RepeatedResponseBodyOut_Response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:response_body.RepeatedResponseBodyOut.Response.data)
  return _s;
}
inline const std::string& RepeatedResponseBodyOut_Response::_internal_data() const {
  return data_.Get();
}
inline void RepeatedResponseBodyOut_Response::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RepeatedResponseBodyOut_Response::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RepeatedResponseBodyOut_Response::release_data() {
  // @@protoc_insertion_point(field_release:response_body.RepeatedResponseBodyOut.Response.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RepeatedResponseBodyOut_Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:response_body.RepeatedResponseBodyOut.Response.data)
}

// .response_body.RepeatedResponseBodyOut.Response.ResponseType type = 3;
inline void RepeatedResponseBodyOut_Response::clear_type() {
  type_ = 0;
}
inline ::response_body::RepeatedResponseBodyOut_Response_ResponseType RepeatedResponseBodyOut_Response::_internal_type() const {
  return static_cast< ::response_body::RepeatedResponseBodyOut_Response_ResponseType >(type_);
}
inline ::response_body::RepeatedResponseBodyOut_Response_ResponseType RepeatedResponseBodyOut_Response::type() const {
  // @@protoc_insertion_point(field_get:response_body.RepeatedResponseBodyOut.Response.type)
  return _internal_type();
}
inline void RepeatedResponseBodyOut_Response::_internal_set_type(::response_body::RepeatedResponseBodyOut_Response_ResponseType value) {
  
  type_ = value;
}
inline void RepeatedResponseBodyOut_Response::set_type(::response_body::RepeatedResponseBodyOut_Response_ResponseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:response_body.RepeatedResponseBodyOut.Response.type)
}

// -------------------------------------------------------------------

// RepeatedResponseBodyOut

// repeated .response_body.RepeatedResponseBodyOut.Response response = 2;
inline int RepeatedResponseBodyOut::_internal_response_size() const {
  return response_.size();
}
inline int RepeatedResponseBodyOut::response_size() const {
  return _internal_response_size();
}
inline void RepeatedResponseBodyOut::clear_response() {
  response_.Clear();
}
inline ::response_body::RepeatedResponseBodyOut_Response* RepeatedResponseBodyOut::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:response_body.RepeatedResponseBodyOut.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::response_body::RepeatedResponseBodyOut_Response >*
RepeatedResponseBodyOut::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:response_body.RepeatedResponseBodyOut.response)
  return &response_;
}
inline const ::response_body::RepeatedResponseBodyOut_Response& RepeatedResponseBodyOut::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::response_body::RepeatedResponseBodyOut_Response& RepeatedResponseBodyOut::response(int index) const {
  // @@protoc_insertion_point(field_get:response_body.RepeatedResponseBodyOut.response)
  return _internal_response(index);
}
inline ::response_body::RepeatedResponseBodyOut_Response* RepeatedResponseBodyOut::_internal_add_response() {
  return response_.Add();
}
inline ::response_body::RepeatedResponseBodyOut_Response* RepeatedResponseBodyOut::add_response() {
  ::response_body::RepeatedResponseBodyOut_Response* _add = _internal_add_response();
  // @@protoc_insertion_point(field_add:response_body.RepeatedResponseBodyOut.response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::response_body::RepeatedResponseBodyOut_Response >&
RepeatedResponseBodyOut::response() const {
  // @@protoc_insertion_point(field_list:response_body.RepeatedResponseBodyOut.response)
  return response_;
}

// -------------------------------------------------------------------

// RepeatedResponseStrings

// repeated string values = 1;
inline int RepeatedResponseStrings::_internal_values_size() const {
  return values_.size();
}
inline int RepeatedResponseStrings::values_size() const {
  return _internal_values_size();
}
inline void RepeatedResponseStrings::clear_values() {
  values_.Clear();
}
inline std::string* RepeatedResponseStrings::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:response_body.RepeatedResponseStrings.values)
  return _s;
}
inline const std::string& RepeatedResponseStrings::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& RepeatedResponseStrings::values(int index) const {
  // @@protoc_insertion_point(field_get:response_body.RepeatedResponseStrings.values)
  return _internal_values(index);
}
inline std::string* RepeatedResponseStrings::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:response_body.RepeatedResponseStrings.values)
  return values_.Mutable(index);
}
inline void RepeatedResponseStrings::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:response_body.RepeatedResponseStrings.values)
}
inline std::string* RepeatedResponseStrings::_internal_add_values() {
  return values_.Add();
}
inline void RepeatedResponseStrings::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:response_body.RepeatedResponseStrings.values)
}
inline void RepeatedResponseStrings::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:response_body.RepeatedResponseStrings.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RepeatedResponseStrings::values() const {
  // @@protoc_insertion_point(field_list:response_body.RepeatedResponseStrings.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RepeatedResponseStrings::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:response_body.RepeatedResponseStrings.values)
  return &values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace response_body

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::response_body::RepeatedResponseBodyOut_Response_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::response_body::RepeatedResponseBodyOut_Response_ResponseType>() {
  return ::response_body::RepeatedResponseBodyOut_Response_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_responseBody_2eproto
