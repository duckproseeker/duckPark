// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: responseBody.proto
#ifndef GRPC_responseBody_2eproto__INCLUDED
#define GRPC_responseBody_2eproto__INCLUDED

#include "responseBody.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace response_body {

class ResponseBodyService final {
 public:
  static constexpr char const* service_full_name() {
    return "response_body.ResponseBodyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::ResponseBodyOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>> AsyncGetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>>(AsyncGetResponseBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>> PrepareAsyncGetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>>(PrepareAsyncGetResponseBodyRaw(context, request, cq));
    }
    // option (google.api.http) = {
    //   get: "/responsebody/{data}"
    //   response_body: "response"
    // };
    virtual ::grpc::Status ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::RepeatedResponseBodyOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>> AsyncListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>>(AsyncListResponseBodiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>> PrepareAsyncListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>>(PrepareAsyncListResponseBodiesRaw(context, request, cq));
    }
    // option (google.api.http) = {
    //   get: "/responsebodies/{data}"
    //   response_body: "response"
    // };
    virtual ::grpc::Status ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::RepeatedResponseStrings* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>> AsyncListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>>(AsyncListResponseStringsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>> PrepareAsyncListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>>(PrepareAsyncListResponseStringsRaw(context, request, cq));
    }
    // option (google.api.http) = {
    //   get: "/responsestrings/{data}"
    //   response_body: "values"
    // };
    std::unique_ptr< ::grpc::ClientReaderInterface< ::response_body::ResponseBodyOut>> GetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::response_body::ResponseBodyOut>>(GetResponseBodyStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>> AsyncGetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>>(AsyncGetResponseBodyStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>> PrepareAsyncGetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>>(PrepareAsyncGetResponseBodyStreamRaw(context, request, cq));
    }
    // option (google.api.http) = {
    //   get: "/responsebody/stream/{data}"
    //   response_body: "response"
    // };
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      //   get: "/responsebody/{data}"
      //   response_body: "response"
      // };
      virtual void ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      //   get: "/responsebodies/{data}"
      //   response_body: "response"
      // };
      virtual void ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // option (google.api.http) = {
      //   get: "/responsestrings/{data}"
      //   response_body: "values"
      // };
      virtual void GetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::grpc::ClientReadReactor< ::response_body::ResponseBodyOut>* reactor) = 0;
      // option (google.api.http) = {
      //   get: "/responsebody/stream/{data}"
      //   response_body: "response"
      // };
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>* AsyncGetResponseBodyRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::ResponseBodyOut>* PrepareAsyncGetResponseBodyRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>* AsyncListResponseBodiesRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseBodyOut>* PrepareAsyncListResponseBodiesRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>* AsyncListResponseStringsRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::response_body::RepeatedResponseStrings>* PrepareAsyncListResponseStringsRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::response_body::ResponseBodyOut>* GetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>* AsyncGetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::response_body::ResponseBodyOut>* PrepareAsyncGetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::ResponseBodyOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>> AsyncGetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>>(AsyncGetResponseBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>> PrepareAsyncGetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>>(PrepareAsyncGetResponseBodyRaw(context, request, cq));
    }
    ::grpc::Status ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::RepeatedResponseBodyOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>> AsyncListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>>(AsyncListResponseBodiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>> PrepareAsyncListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>>(PrepareAsyncListResponseBodiesRaw(context, request, cq));
    }
    ::grpc::Status ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::response_body::RepeatedResponseStrings* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>> AsyncListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>>(AsyncListResponseStringsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>> PrepareAsyncListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>>(PrepareAsyncListResponseStringsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::response_body::ResponseBodyOut>> GetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::response_body::ResponseBodyOut>>(GetResponseBodyStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>> AsyncGetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>>(AsyncGetResponseBodyStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>> PrepareAsyncGetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>>(PrepareAsyncGetResponseBodyStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response, std::function<void(::grpc::Status)>) override;
      void GetResponseBody(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response, std::function<void(::grpc::Status)>) override;
      void ListResponseBodies(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response, std::function<void(::grpc::Status)>) override;
      void ListResponseStrings(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResponseBodyStream(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn* request, ::grpc::ClientReadReactor< ::response_body::ResponseBodyOut>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>* AsyncGetResponseBodyRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::response_body::ResponseBodyOut>* PrepareAsyncGetResponseBodyRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>* AsyncListResponseBodiesRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseBodyOut>* PrepareAsyncListResponseBodiesRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>* AsyncListResponseStringsRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::response_body::RepeatedResponseStrings>* PrepareAsyncListResponseStringsRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::response_body::ResponseBodyOut>* GetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request) override;
    ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>* AsyncGetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::response_body::ResponseBodyOut>* PrepareAsyncGetResponseBodyStreamRaw(::grpc::ClientContext* context, const ::response_body::ResponseBodyIn& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponseBody_;
    const ::grpc::internal::RpcMethod rpcmethod_ListResponseBodies_;
    const ::grpc::internal::RpcMethod rpcmethod_ListResponseStrings_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResponseBodyStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetResponseBody(::grpc::ServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response);
    // option (google.api.http) = {
    //   get: "/responsebody/{data}"
    //   response_body: "response"
    // };
    virtual ::grpc::Status ListResponseBodies(::grpc::ServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response);
    // option (google.api.http) = {
    //   get: "/responsebodies/{data}"
    //   response_body: "response"
    // };
    virtual ::grpc::Status ListResponseStrings(::grpc::ServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response);
    // option (google.api.http) = {
    //   get: "/responsestrings/{data}"
    //   response_body: "values"
    // };
    virtual ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* context, const ::response_body::ResponseBodyIn* request, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* writer);
    // option (google.api.http) = {
    //   get: "/responsebody/stream/{data}"
    //   response_body: "response"
    // };
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseBody(::grpc::ServerContext* context, ::response_body::ResponseBodyIn* request, ::grpc::ServerAsyncResponseWriter< ::response_body::ResponseBodyOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResponseBodies(::grpc::ServerContext* context, ::response_body::ResponseBodyIn* request, ::grpc::ServerAsyncResponseWriter< ::response_body::RepeatedResponseBodyOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResponseStrings(::grpc::ServerContext* context, ::response_body::ResponseBodyIn* request, ::grpc::ServerAsyncResponseWriter< ::response_body::RepeatedResponseStrings>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseBodyStream(::grpc::ServerContext* context, ::response_body::ResponseBodyIn* request, ::grpc::ServerAsyncWriter< ::response_body::ResponseBodyOut>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetResponseBody<WithAsyncMethod_ListResponseBodies<WithAsyncMethod_ListResponseStrings<WithAsyncMethod_GetResponseBodyStream<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::ResponseBodyOut* response) { return this->GetResponseBody(context, request, response); }));}
    void SetMessageAllocatorFor_GetResponseBody(
        ::grpc::MessageAllocator< ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResponseBody(
      ::grpc::CallbackServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseBodyOut>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseBodyOut* response) { return this->ListResponseBodies(context, request, response); }));}
    void SetMessageAllocatorFor_ListResponseBodies(
        ::grpc::MessageAllocator< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseBodyOut>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseBodyOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResponseBodies(
      ::grpc::CallbackServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseStrings>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::response_body::ResponseBodyIn* request, ::response_body::RepeatedResponseStrings* response) { return this->ListResponseStrings(context, request, response); }));}
    void SetMessageAllocatorFor_ListResponseStrings(
        ::grpc::MessageAllocator< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseStrings>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseStrings>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResponseStrings(
      ::grpc::CallbackServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::response_body::ResponseBodyIn* request) { return this->GetResponseBodyStream(context, request); }));
    }
    ~WithCallbackMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::response_body::ResponseBodyOut>* GetResponseBodyStream(
      ::grpc::CallbackServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetResponseBody<WithCallbackMethod_ListResponseBodies<WithCallbackMethod_ListResponseStrings<WithCallbackMethod_GetResponseBodyStream<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResponseBodies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListResponseStrings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResponseBodyStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResponseBody(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResponseBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListResponseBodies(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResponseBodies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListResponseStrings(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListResponseStrings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetResponseBodyStream(context, request); }));
    }
    ~WithRawCallbackMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetResponseBodyStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResponseBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResponseBody() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>* streamer) {
                       return this->StreamedGetResponseBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResponseBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResponseBody(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::ResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResponseBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::response_body::ResponseBodyIn,::response_body::ResponseBodyOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListResponseBodies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListResponseBodies() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseBodyOut>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseBodyOut>* streamer) {
                       return this->StreamedListResponseBodies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListResponseBodies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListResponseBodies(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseBodyOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListResponseBodies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::response_body::ResponseBodyIn,::response_body::RepeatedResponseBodyOut>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListResponseStrings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListResponseStrings() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseStrings>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::response_body::ResponseBodyIn, ::response_body::RepeatedResponseStrings>* streamer) {
                       return this->StreamedListResponseStrings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListResponseStrings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListResponseStrings(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::response_body::RepeatedResponseStrings* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListResponseStrings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::response_body::ResponseBodyIn,::response_body::RepeatedResponseStrings>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetResponseBody<WithStreamedUnaryMethod_ListResponseBodies<WithStreamedUnaryMethod_ListResponseStrings<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetResponseBodyStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetResponseBodyStream() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::response_body::ResponseBodyIn, ::response_body::ResponseBodyOut>* streamer) {
                       return this->StreamedGetResponseBodyStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetResponseBodyStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResponseBodyStream(::grpc::ServerContext* /*context*/, const ::response_body::ResponseBodyIn* /*request*/, ::grpc::ServerWriter< ::response_body::ResponseBodyOut>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetResponseBodyStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::response_body::ResponseBodyIn,::response_body::ResponseBodyOut>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetResponseBodyStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetResponseBody<WithStreamedUnaryMethod_ListResponseBodies<WithStreamedUnaryMethod_ListResponseStrings<WithSplitStreamingMethod_GetResponseBodyStream<Service > > > > StreamedService;
};

}  // namespace response_body


#endif  // GRPC_responseBody_2eproto__INCLUDED
