// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_echo_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_echo_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_echo_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_echo_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_echo_5fservice_2eproto;
namespace echo_service {
class Embedded;
struct EmbeddedDefaultTypeInternal;
extern EmbeddedDefaultTypeInternal _Embedded_default_instance_;
class SimpleMessage;
struct SimpleMessageDefaultTypeInternal;
extern SimpleMessageDefaultTypeInternal _SimpleMessage_default_instance_;
}  // namespace echo_service
PROTOBUF_NAMESPACE_OPEN
template<> ::echo_service::Embedded* Arena::CreateMaybeMessage<::echo_service::Embedded>(Arena*);
template<> ::echo_service::SimpleMessage* Arena::CreateMaybeMessage<::echo_service::SimpleMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace echo_service {

// ===================================================================

class Embedded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo_service.Embedded) */ {
 public:
  inline Embedded() : Embedded(nullptr) {}
  ~Embedded() override;
  explicit constexpr Embedded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Embedded(const Embedded& from);
  Embedded(Embedded&& from) noexcept
    : Embedded() {
    *this = ::std::move(from);
  }

  inline Embedded& operator=(const Embedded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Embedded& operator=(Embedded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Embedded& default_instance() {
    return *internal_default_instance();
  }
  enum MarkCase {
    kProgress = 1,
    kNote = 2,
    MARK_NOT_SET = 0,
  };

  static inline const Embedded* internal_default_instance() {
    return reinterpret_cast<const Embedded*>(
               &_Embedded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Embedded& a, Embedded& b) {
    a.Swap(&b);
  }
  inline void Swap(Embedded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Embedded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Embedded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Embedded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Embedded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Embedded& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Embedded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo_service.Embedded";
  }
  protected:
  explicit Embedded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
    kNoteFieldNumber = 2,
  };
  // int64 progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  int64_t progress() const;
  void set_progress(int64_t value);
  private:
  int64_t _internal_progress() const;
  void _internal_set_progress(int64_t value);
  public:

  // string note = 2;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  void clear_mark();
  MarkCase mark_case() const;
  // @@protoc_insertion_point(class_scope:echo_service.Embedded)
 private:
  class _Internal;
  void set_has_progress();
  void set_has_note();

  inline bool has_mark() const;
  inline void clear_has_mark();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MarkUnion {
    constexpr MarkUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t progress_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  } mark_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_echo_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SimpleMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:echo_service.SimpleMessage) */ {
 public:
  inline SimpleMessage() : SimpleMessage(nullptr) {}
  ~SimpleMessage() override;
  explicit constexpr SimpleMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleMessage(const SimpleMessage& from);
  SimpleMessage(SimpleMessage&& from) noexcept
    : SimpleMessage() {
    *this = ::std::move(from);
  }

  inline SimpleMessage& operator=(const SimpleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleMessage& operator=(SimpleMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleMessage& default_instance() {
    return *internal_default_instance();
  }
  enum CodeCase {
    kLineNum = 3,
    kLang = 4,
    CODE_NOT_SET = 0,
  };

  enum ExtCase {
    kEn = 6,
    kNo = 7,
    EXT_NOT_SET = 0,
  };

  static inline const SimpleMessage* internal_default_instance() {
    return reinterpret_cast<const SimpleMessage*>(
               &_SimpleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimpleMessage& a, SimpleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimpleMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "echo_service.SimpleMessage";
  }
  protected:
  explicit SimpleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 5,
    kNumFieldNumber = 2,
    kLineNumFieldNumber = 3,
    kLangFieldNumber = 4,
    kEnFieldNumber = 6,
    kNoFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .echo_service.Embedded status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::echo_service::Embedded& status() const;
  PROTOBUF_NODISCARD ::echo_service::Embedded* release_status();
  ::echo_service::Embedded* mutable_status();
  void set_allocated_status(::echo_service::Embedded* status);
  private:
  const ::echo_service::Embedded& _internal_status() const;
  ::echo_service::Embedded* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::echo_service::Embedded* status);
  ::echo_service::Embedded* unsafe_arena_release_status();

  // int64 num = 2;
  void clear_num();
  int64_t num() const;
  void set_num(int64_t value);
  private:
  int64_t _internal_num() const;
  void _internal_set_num(int64_t value);
  public:

  // int64 line_num = 3;
  bool has_line_num() const;
  private:
  bool _internal_has_line_num() const;
  public:
  void clear_line_num();
  int64_t line_num() const;
  void set_line_num(int64_t value);
  private:
  int64_t _internal_line_num() const;
  void _internal_set_line_num(int64_t value);
  public:

  // string lang = 4;
  bool has_lang() const;
  private:
  bool _internal_has_lang() const;
  public:
  void clear_lang();
  const std::string& lang() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lang(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lang();
  PROTOBUF_NODISCARD std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // int64 en = 6;
  bool has_en() const;
  private:
  bool _internal_has_en() const;
  public:
  void clear_en();
  int64_t en() const;
  void set_en(int64_t value);
  private:
  int64_t _internal_en() const;
  void _internal_set_en(int64_t value);
  public:

  // .echo_service.Embedded no = 7;
  bool has_no() const;
  private:
  bool _internal_has_no() const;
  public:
  void clear_no();
  const ::echo_service::Embedded& no() const;
  PROTOBUF_NODISCARD ::echo_service::Embedded* release_no();
  ::echo_service::Embedded* mutable_no();
  void set_allocated_no(::echo_service::Embedded* no);
  private:
  const ::echo_service::Embedded& _internal_no() const;
  ::echo_service::Embedded* _internal_mutable_no();
  public:
  void unsafe_arena_set_allocated_no(
      ::echo_service::Embedded* no);
  ::echo_service::Embedded* unsafe_arena_release_no();

  void clear_code();
  CodeCase code_case() const;
  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:echo_service.SimpleMessage)
 private:
  class _Internal;
  void set_has_line_num();
  void set_has_lang();
  void set_has_en();
  void set_has_no();

  inline bool has_code() const;
  inline void clear_has_code();

  inline bool has_ext() const;
  inline void clear_has_ext();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::echo_service::Embedded* status_;
  int64_t num_;
  union CodeUnion {
    constexpr CodeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t line_num_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  } code_;
  union ExtUnion {
    constexpr ExtUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int64_t en_;
    ::echo_service::Embedded* no_;
  } ext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[2];

  friend struct ::TableStruct_echo_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Embedded

// int64 progress = 1;
inline bool Embedded::_internal_has_progress() const {
  return mark_case() == kProgress;
}
inline bool Embedded::has_progress() const {
  return _internal_has_progress();
}
inline void Embedded::set_has_progress() {
  _oneof_case_[0] = kProgress;
}
inline void Embedded::clear_progress() {
  if (_internal_has_progress()) {
    mark_.progress_ = int64_t{0};
    clear_has_mark();
  }
}
inline int64_t Embedded::_internal_progress() const {
  if (_internal_has_progress()) {
    return mark_.progress_;
  }
  return int64_t{0};
}
inline void Embedded::_internal_set_progress(int64_t value) {
  if (!_internal_has_progress()) {
    clear_mark();
    set_has_progress();
  }
  mark_.progress_ = value;
}
inline int64_t Embedded::progress() const {
  // @@protoc_insertion_point(field_get:echo_service.Embedded.progress)
  return _internal_progress();
}
inline void Embedded::set_progress(int64_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:echo_service.Embedded.progress)
}

// string note = 2;
inline bool Embedded::_internal_has_note() const {
  return mark_case() == kNote;
}
inline bool Embedded::has_note() const {
  return _internal_has_note();
}
inline void Embedded::set_has_note() {
  _oneof_case_[0] = kNote;
}
inline void Embedded::clear_note() {
  if (_internal_has_note()) {
    mark_.note_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_mark();
  }
}
inline const std::string& Embedded::note() const {
  // @@protoc_insertion_point(field_get:echo_service.Embedded.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline void Embedded::set_note(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_note()) {
    clear_mark();
    set_has_note();
    mark_.note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mark_.note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo_service.Embedded.note)
}
inline std::string* Embedded::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:echo_service.Embedded.note)
  return _s;
}
inline const std::string& Embedded::_internal_note() const {
  if (_internal_has_note()) {
    return mark_.note_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Embedded::_internal_set_note(const std::string& value) {
  if (!_internal_has_note()) {
    clear_mark();
    set_has_note();
    mark_.note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  mark_.note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Embedded::_internal_mutable_note() {
  if (!_internal_has_note()) {
    clear_mark();
    set_has_note();
    mark_.note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return mark_.note_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Embedded::release_note() {
  // @@protoc_insertion_point(field_release:echo_service.Embedded.note)
  if (_internal_has_note()) {
    clear_has_mark();
    return mark_.note_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Embedded::set_allocated_note(std::string* note) {
  if (has_mark()) {
    clear_mark();
  }
  if (note != nullptr) {
    set_has_note();
    mark_.note_.UnsafeSetDefault(note);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(note);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:echo_service.Embedded.note)
}

inline bool Embedded::has_mark() const {
  return mark_case() != MARK_NOT_SET;
}
inline void Embedded::clear_has_mark() {
  _oneof_case_[0] = MARK_NOT_SET;
}
inline Embedded::MarkCase Embedded::mark_case() const {
  return Embedded::MarkCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimpleMessage

// string id = 1;
inline void SimpleMessage::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SimpleMessage::id() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleMessage::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo_service.SimpleMessage.id)
}
inline std::string* SimpleMessage::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:echo_service.SimpleMessage.id)
  return _s;
}
inline const std::string& SimpleMessage::_internal_id() const {
  return id_.Get();
}
inline void SimpleMessage::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimpleMessage::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimpleMessage::release_id() {
  // @@protoc_insertion_point(field_release:echo_service.SimpleMessage.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimpleMessage::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:echo_service.SimpleMessage.id)
}

// int64 num = 2;
inline void SimpleMessage::clear_num() {
  num_ = int64_t{0};
}
inline int64_t SimpleMessage::_internal_num() const {
  return num_;
}
inline int64_t SimpleMessage::num() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.num)
  return _internal_num();
}
inline void SimpleMessage::_internal_set_num(int64_t value) {
  
  num_ = value;
}
inline void SimpleMessage::set_num(int64_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:echo_service.SimpleMessage.num)
}

// int64 line_num = 3;
inline bool SimpleMessage::_internal_has_line_num() const {
  return code_case() == kLineNum;
}
inline bool SimpleMessage::has_line_num() const {
  return _internal_has_line_num();
}
inline void SimpleMessage::set_has_line_num() {
  _oneof_case_[0] = kLineNum;
}
inline void SimpleMessage::clear_line_num() {
  if (_internal_has_line_num()) {
    code_.line_num_ = int64_t{0};
    clear_has_code();
  }
}
inline int64_t SimpleMessage::_internal_line_num() const {
  if (_internal_has_line_num()) {
    return code_.line_num_;
  }
  return int64_t{0};
}
inline void SimpleMessage::_internal_set_line_num(int64_t value) {
  if (!_internal_has_line_num()) {
    clear_code();
    set_has_line_num();
  }
  code_.line_num_ = value;
}
inline int64_t SimpleMessage::line_num() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.line_num)
  return _internal_line_num();
}
inline void SimpleMessage::set_line_num(int64_t value) {
  _internal_set_line_num(value);
  // @@protoc_insertion_point(field_set:echo_service.SimpleMessage.line_num)
}

// string lang = 4;
inline bool SimpleMessage::_internal_has_lang() const {
  return code_case() == kLang;
}
inline bool SimpleMessage::has_lang() const {
  return _internal_has_lang();
}
inline void SimpleMessage::set_has_lang() {
  _oneof_case_[0] = kLang;
}
inline void SimpleMessage::clear_lang() {
  if (_internal_has_lang()) {
    code_.lang_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_code();
  }
}
inline const std::string& SimpleMessage::lang() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.lang)
  return _internal_lang();
}
template <typename ArgT0, typename... ArgT>
inline void SimpleMessage::set_lang(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_lang()) {
    clear_code();
    set_has_lang();
    code_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  code_.lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:echo_service.SimpleMessage.lang)
}
inline std::string* SimpleMessage::mutable_lang() {
  std::string* _s = _internal_mutable_lang();
  // @@protoc_insertion_point(field_mutable:echo_service.SimpleMessage.lang)
  return _s;
}
inline const std::string& SimpleMessage::_internal_lang() const {
  if (_internal_has_lang()) {
    return code_.lang_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SimpleMessage::_internal_set_lang(const std::string& value) {
  if (!_internal_has_lang()) {
    clear_code();
    set_has_lang();
    code_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  code_.lang_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimpleMessage::_internal_mutable_lang() {
  if (!_internal_has_lang()) {
    clear_code();
    set_has_lang();
    code_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return code_.lang_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimpleMessage::release_lang() {
  // @@protoc_insertion_point(field_release:echo_service.SimpleMessage.lang)
  if (_internal_has_lang()) {
    clear_has_code();
    return code_.lang_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SimpleMessage::set_allocated_lang(std::string* lang) {
  if (has_code()) {
    clear_code();
  }
  if (lang != nullptr) {
    set_has_lang();
    code_.lang_.UnsafeSetDefault(lang);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(lang);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:echo_service.SimpleMessage.lang)
}

// .echo_service.Embedded status = 5;
inline bool SimpleMessage::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SimpleMessage::has_status() const {
  return _internal_has_status();
}
inline void SimpleMessage::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::echo_service::Embedded& SimpleMessage::_internal_status() const {
  const ::echo_service::Embedded* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::echo_service::Embedded&>(
      ::echo_service::_Embedded_default_instance_);
}
inline const ::echo_service::Embedded& SimpleMessage::status() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.status)
  return _internal_status();
}
inline void SimpleMessage::unsafe_arena_set_allocated_status(
    ::echo_service::Embedded* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:echo_service.SimpleMessage.status)
}
inline ::echo_service::Embedded* SimpleMessage::release_status() {
  
  ::echo_service::Embedded* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::echo_service::Embedded* SimpleMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:echo_service.SimpleMessage.status)
  
  ::echo_service::Embedded* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::echo_service::Embedded* SimpleMessage::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::echo_service::Embedded>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::echo_service::Embedded* SimpleMessage::mutable_status() {
  ::echo_service::Embedded* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:echo_service.SimpleMessage.status)
  return _msg;
}
inline void SimpleMessage::set_allocated_status(::echo_service::Embedded* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::echo_service::Embedded>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:echo_service.SimpleMessage.status)
}

// int64 en = 6;
inline bool SimpleMessage::_internal_has_en() const {
  return ext_case() == kEn;
}
inline bool SimpleMessage::has_en() const {
  return _internal_has_en();
}
inline void SimpleMessage::set_has_en() {
  _oneof_case_[1] = kEn;
}
inline void SimpleMessage::clear_en() {
  if (_internal_has_en()) {
    ext_.en_ = int64_t{0};
    clear_has_ext();
  }
}
inline int64_t SimpleMessage::_internal_en() const {
  if (_internal_has_en()) {
    return ext_.en_;
  }
  return int64_t{0};
}
inline void SimpleMessage::_internal_set_en(int64_t value) {
  if (!_internal_has_en()) {
    clear_ext();
    set_has_en();
  }
  ext_.en_ = value;
}
inline int64_t SimpleMessage::en() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.en)
  return _internal_en();
}
inline void SimpleMessage::set_en(int64_t value) {
  _internal_set_en(value);
  // @@protoc_insertion_point(field_set:echo_service.SimpleMessage.en)
}

// .echo_service.Embedded no = 7;
inline bool SimpleMessage::_internal_has_no() const {
  return ext_case() == kNo;
}
inline bool SimpleMessage::has_no() const {
  return _internal_has_no();
}
inline void SimpleMessage::set_has_no() {
  _oneof_case_[1] = kNo;
}
inline void SimpleMessage::clear_no() {
  if (_internal_has_no()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ext_.no_;
    }
    clear_has_ext();
  }
}
inline ::echo_service::Embedded* SimpleMessage::release_no() {
  // @@protoc_insertion_point(field_release:echo_service.SimpleMessage.no)
  if (_internal_has_no()) {
    clear_has_ext();
      ::echo_service::Embedded* temp = ext_.no_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ext_.no_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::echo_service::Embedded& SimpleMessage::_internal_no() const {
  return _internal_has_no()
      ? *ext_.no_
      : reinterpret_cast< ::echo_service::Embedded&>(::echo_service::_Embedded_default_instance_);
}
inline const ::echo_service::Embedded& SimpleMessage::no() const {
  // @@protoc_insertion_point(field_get:echo_service.SimpleMessage.no)
  return _internal_no();
}
inline ::echo_service::Embedded* SimpleMessage::unsafe_arena_release_no() {
  // @@protoc_insertion_point(field_unsafe_arena_release:echo_service.SimpleMessage.no)
  if (_internal_has_no()) {
    clear_has_ext();
    ::echo_service::Embedded* temp = ext_.no_;
    ext_.no_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimpleMessage::unsafe_arena_set_allocated_no(::echo_service::Embedded* no) {
  clear_ext();
  if (no) {
    set_has_no();
    ext_.no_ = no;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:echo_service.SimpleMessage.no)
}
inline ::echo_service::Embedded* SimpleMessage::_internal_mutable_no() {
  if (!_internal_has_no()) {
    clear_ext();
    set_has_no();
    ext_.no_ = CreateMaybeMessage< ::echo_service::Embedded >(GetArenaForAllocation());
  }
  return ext_.no_;
}
inline ::echo_service::Embedded* SimpleMessage::mutable_no() {
  ::echo_service::Embedded* _msg = _internal_mutable_no();
  // @@protoc_insertion_point(field_mutable:echo_service.SimpleMessage.no)
  return _msg;
}

inline bool SimpleMessage::has_code() const {
  return code_case() != CODE_NOT_SET;
}
inline void SimpleMessage::clear_has_code() {
  _oneof_case_[0] = CODE_NOT_SET;
}
inline bool SimpleMessage::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void SimpleMessage::clear_has_ext() {
  _oneof_case_[1] = EXT_NOT_SET;
}
inline SimpleMessage::CodeCase SimpleMessage::code_case() const {
  return SimpleMessage::CodeCase(_oneof_case_[0]);
}
inline SimpleMessage::ExtCase SimpleMessage::ext_case() const {
  return SimpleMessage::ExtCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_echo_5fservice_2eproto
