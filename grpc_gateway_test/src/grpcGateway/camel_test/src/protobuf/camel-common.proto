syntax = "proto3";

package camel.api;
option go_package="./";

//camel 内部错误码
message Result{
	int32   errorCode = 1;  //错误码
	bytes 	message   = 2;  //错误信息
}

// 电量信息
message Battery{
	float 			percent			= 1;	//电量百分比
	ChargingState	state			= 2;	//状态	
	//float 			chargingTime	= 3;	//充电时间
	
	enum ChargingState{
		kIDLE = 0;		//未充电
		kCHARGING = 1;	//充电中  
		kERROR = 2;		//充电异常
		kReady = 3;	//充电准备
	}
}

enum DoAction{
	kNoAction 	= 	0;			//无操作
	kDoAction1 	= 	1;			//操作1
	kDoAction2 	= 	2;			//操作2
}

enum AgvsTaskStatus {
	kNone = 0; 			// 无任务
	kToTaskStart = 1;	// 去任务起点
	kToTaskEnd = 2;		// 去任务终点
	kToCharging = 3;	// 去充电点
	kToParking = 4;		// 去停车点
}

// 车体硬件状态
message CarHWInfo {
	bool cargoState = 1;	// true有货，false无货
	bool frontDetect = 2;
	bool backDetect = 3;
	bool inDetect = 4;
	bool leftFork = 5;
	bool rightFork = 6;
	bool mapNotMatch = 7;
	bool redLight = 8;
	bool ctrlMode = 9;	// true自动，false手动
}

//小车报警信息
message Alarm{
	int32 code = 1; //错误码
	repeated bytes params = 2; //错误描述的参数  如:Alarm表的desc:"小车被{0}管制" param1:"agv#01,agv#02,agv333" 终显:"小车agv#01,agv#02,agv333被管制"
}

// 充电指令
message ChargeCmd {
	DoAction 	allowCharging 	= 	1;  //0无动作 1允许充电 2停止充电
	int32 		channel 		= 	2;
}

//位姿
message Position{
    float 	x 			= 1;	//x
    float 	y 			= 2;	//y
    float	theta 		= 3;	//theta
	float 	confidence	= 4;	//置信度
}

//任务信息
message ContextTask{
    bytes FromStation = 1; //任务源点
    bytes ToStation = 2; //任务目标点
    bytes Type = 3; //任务类型
    string FromAction = 4; //在from点的任务类型
    string ToAction = 5; //在to点的任务类型
    bytes TaskInfo = 6;    //任务详情，agvs查询到的task信息后返回的未反序列化的原文，没有任务时为空"{}"
	bytes routeStart = 7;	//路径起点
	bytes routeEnd = 8;		//路径终点
}

message Coord {
	float x = 1;
	float y = 2;
}

// 站点数据[camel -> camel_ui]
message GStation {
	float x = 1;
	float y = 2;
	string rfid = 3;
	string type = 4;
	string name = 5;
	string area = 6;
}

// 路径数据[camel -> camel_ui]
message GPath {
	GStation from = 1;
	GStation to = 2;
	float radius = 3;
}

// 路径集合[camel -> camel_ui]
message PathCollection {
	repeated GPath paths = 1;
}

//避障区域集合
message AvoidanceAreaCollection
{
	repeated AvoidanceArea accessibleArea = 1;   //允许避障功能使用的区域
	repeated AvoidanceArea prohibitedArea = 2;   //禁止避障功能使用的区域

	//组成避障区域的点集合
	message AvoidanceArea
	{
		repeated Coord points = 1;
	}
}

// 模拟手柄下发的数据
message Gamepad
{
	float vx = 1;
	float vy = 2;
	float w = 3;
	Token token = 4;
}
// 获取手柄控制权
message GamepadControl
{
	bool force = 1;
}

// 令牌
message Token
{
	string key = 1;
	Result result = 2;
}




// 匹配点集合
message MatchPoints
{
	// 匹配点
	message MatchPoint
	{
		Position pos = 1;
		bytes description = 2;
	}
	repeated MatchPoint points = 1;
}

message MatchPointCommand 
{
	MatchPoints points = 1;
	bool remove = 2;
}

message GrpcTaskStation
{
	enum TaskAction {
		kGet = 0;
		kPut = 1;
		kWait = 2;
	}
	string rfid = 1;
	TaskAction action = 2;
}

message GrpcTaskAllocation
{
	string id = 1;
	string description = 2;
	repeated GrpcTaskStation stations = 3;
	bool circle = 4;		// 循环任务

}

message GrpcTaskOperation
{
	enum Operation {
		kNew = 0;
		kDelete = 1;
		kQuery = 2;
		kCall = 3;
		kGoto = 4;
		kCancel = 5;
		kGotoCharging = 6;
		kSingleCar = 7;
		kMuiltCar = 8;
	}
	GrpcTaskAllocation task = 1;
	Operation opt = 2;
}

message GrpcTaskAllocations
{
	repeated GrpcTaskAllocation tasks = 1;
}

message GrpcTaskInfomation 
{
	bool hasTask = 1;
	string description = 2;
	GrpcTaskStation target = 3;
	bool circle = 4;		// 循环任务
	bool multicar = 5;		// 单车模式
}


message Collaborative
{
	enum CooperationEnum 
	{
		kStartCooperation = 0;
		kEndCooperation = 1;
	}
	CooperationEnum cooperation = 1;
	string headCarIp = 2;
	string rearCarIp = 3;
	bool isMaster = 4;
}

message CollaborativeResult
{
	enum Status 
	{
		kSuccess = 0;
		kFailed = 1;
	}
	Status result = 1;
}
