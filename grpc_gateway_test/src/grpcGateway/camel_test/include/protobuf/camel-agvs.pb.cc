// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-agvs.proto

#include "camel-agvs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CamelMessage_AllowFromAgvs::CamelMessage_AllowFromAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alarms_)*/{}
  , /*decltype(_impl_.currentstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.charging_)*/nullptr
  , /*decltype(_impl_.emergency_)*/false
  , /*decltype(_impl_.isuseable_)*/false
  , /*decltype(_impl_.hastask_)*/false
  , /*decltype(_impl_.systempause_)*/0
  , /*decltype(_impl_.taskstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_AllowFromAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_AllowFromAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_AllowFromAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_AllowFromAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_AllowFromAgvsDefaultTypeInternal _CamelMessage_AllowFromAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_ReportToAgvs::CamelMessage_ReportToAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alarms_)*/{}
  , /*decltype(_impl_.carname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currentstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.battery_)*/nullptr
  , /*decltype(_impl_.carinfo_)*/nullptr
  , /*decltype(_impl_.ispulling_)*/false
  , /*decltype(_impl_.collaborative_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_ReportToAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_ReportToAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_ReportToAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_ReportToAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_ReportToAgvsDefaultTypeInternal _CamelMessage_ReportToAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_MissonFromAgvs::CamelMessage_MissonFromAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contexttask_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_MissonFromAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_MissonFromAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_MissonFromAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_MissonFromAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_MissonFromAgvsDefaultTypeInternal _CamelMessage_MissonFromAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_AvoidAreaFromAgvs::CamelMessage_AvoidAreaFromAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.avoidarea_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_AvoidAreaFromAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal _CamelMessage_AvoidAreaFromAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_RequestToAgvs::CamelMessage_RequestToAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.applyrotue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manualstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.strparam_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.getmissoninfo_)*/0
  , /*decltype(_impl_.setuseable_)*/0
  , /*decltype(_impl_.canceltask_)*/0
  , /*decltype(_impl_.requestcharging_)*/0
  , /*decltype(_impl_.unlock_)*/0
  , /*decltype(_impl_.liftemergency_)*/0
  , /*decltype(_impl_.avoidareaoper_)*/0
  , /*decltype(_impl_.initialtraffic_)*/0
  , /*decltype(_impl_.trafficrecovery_)*/0
  , /*decltype(_impl_.complishtask_)*/0
  , /*decltype(_impl_.nexttaskflow_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_RequestToAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_RequestToAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_RequestToAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_RequestToAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_RequestToAgvsDefaultTypeInternal _CamelMessage_RequestToAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_RequestFromAgvs::CamelMessage_RequestFromAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.charging_)*/nullptr
  , /*decltype(_impl_.emergency_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_RequestFromAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_RequestFromAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_RequestFromAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_RequestFromAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_RequestFromAgvsDefaultTypeInternal _CamelMessage_RequestFromAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_PeriodDataToAgvs::CamelMessage_PeriodDataToAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camelversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.totalodometry_)*/0
  , /*decltype(_impl_.totalruntime_)*/0
  , /*decltype(_impl_.totaltaskodometry_)*/0
  , /*decltype(_impl_.totaltaskruntime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_PeriodDataToAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_PeriodDataToAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_PeriodDataToAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_PeriodDataToAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_PeriodDataToAgvsDefaultTypeInternal _CamelMessage_PeriodDataToAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage_PeriodDataFromAgvs::CamelMessage_PeriodDataFromAgvs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CamelMessage_PeriodDataFromAgvsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessage_PeriodDataFromAgvsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessage_PeriodDataFromAgvsDefaultTypeInternal() {}
  union {
    CamelMessage_PeriodDataFromAgvs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessage_PeriodDataFromAgvsDefaultTypeInternal _CamelMessage_PeriodDataFromAgvs_default_instance_;
PROTOBUF_CONSTEXPR CamelMessage::CamelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.onlyone_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CamelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamelMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamelMessageDefaultTypeInternal() {}
  union {
    CamelMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamelMessageDefaultTypeInternal _CamelMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_camel_2dagvs_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_camel_2dagvs_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_camel_2dagvs_2eproto = nullptr;

const uint32_t TableStruct_camel_2dagvs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.currentstation_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.targetstation_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.errormessage_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.charging_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.emergency_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.isuseable_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.hastask_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.alarms_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.systempause_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AllowFromAgvs, _impl_.taskstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.carname_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.currentstation_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.battery_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.carinfo_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.errormessage_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.alarms_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.ispulling_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_ReportToAgvs, _impl_.collaborative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_MissonFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_MissonFromAgvs, _impl_.route_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_MissonFromAgvs, _impl_.contexttask_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_MissonFromAgvs, _impl_.targetstation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AvoidAreaFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_AvoidAreaFromAgvs, _impl_.avoidarea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.getmissoninfo_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.setuseable_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.canceltask_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.requestcharging_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.unlock_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.liftemergency_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.applyrotue_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.manualstation_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.avoidareaoper_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.initialtraffic_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.trafficrecovery_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.complishtask_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.nexttaskflow_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.strparam_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestToAgvs, _impl_.ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestFromAgvs, _impl_.charging_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_RequestFromAgvs, _impl_.emergency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.camelversion_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.mapversion_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.totalodometry_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.totalruntime_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.totaltaskodometry_),
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataToAgvs, _impl_.totaltaskruntime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataFromAgvs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamelMessage_PeriodDataFromAgvs, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CamelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CamelMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CamelMessage, _impl_.onlyone_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CamelMessage_AllowFromAgvs)},
  { 16, -1, -1, sizeof(::CamelMessage_ReportToAgvs)},
  { 32, -1, -1, sizeof(::CamelMessage_MissonFromAgvs)},
  { 41, -1, -1, sizeof(::CamelMessage_AvoidAreaFromAgvs)},
  { 48, -1, -1, sizeof(::CamelMessage_RequestToAgvs)},
  { 69, -1, -1, sizeof(::CamelMessage_RequestFromAgvs)},
  { 77, -1, -1, sizeof(::CamelMessage_PeriodDataToAgvs)},
  { 89, -1, -1, sizeof(::CamelMessage_PeriodDataFromAgvs)},
  { 96, -1, -1, sizeof(::CamelMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CamelMessage_AllowFromAgvs_default_instance_._instance,
  &::_CamelMessage_ReportToAgvs_default_instance_._instance,
  &::_CamelMessage_MissonFromAgvs_default_instance_._instance,
  &::_CamelMessage_AvoidAreaFromAgvs_default_instance_._instance,
  &::_CamelMessage_RequestToAgvs_default_instance_._instance,
  &::_CamelMessage_RequestFromAgvs_default_instance_._instance,
  &::_CamelMessage_PeriodDataToAgvs_default_instance_._instance,
  &::_CamelMessage_PeriodDataFromAgvs_default_instance_._instance,
  &::_CamelMessage_default_instance_._instance,
};

const char descriptor_table_protodef_camel_2dagvs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020camel-agvs.proto\032\022camel-common.proto\"\200"
  "\017\n\014CamelMessage\0224\n\rallowFromAgvs\030\001 \001(\0132\033"
  ".CamelMessage.AllowFromAgvsH\000\0222\n\014reportT"
  "oAgvs\030\002 \001(\0132\032.CamelMessage.ReportToAgvsH"
  "\000\0226\n\016missonFromAgvs\030\003 \001(\0132\034.CamelMessage"
  ".MissonFromAgvsH\000\0224\n\rrequestToAgvs\030\004 \001(\013"
  "2\033.CamelMessage.RequestToAgvsH\000\022<\n\021avoid"
  "AreaFromAgvs\030\005 \001(\0132\037.CamelMessage.AvoidA"
  "reaFromAgvsH\000\0228\n\017requestFromAgvs\030\006 \001(\0132\035"
  ".CamelMessage.RequestFromAgvsH\000\022\'\n\rcolla"
  "borative\030\007 \001(\0132\016.CollaborativeH\000\022:\n\020peri"
  "odDataToAgvs\030\010 \001(\0132\036.CamelMessage.Period"
  "DataToAgvsH\000\022>\n\022periodDataFromAgvs\030\t \001(\013"
  "2 .CamelMessage.PeriodDataFromAgvsH\000\032\206\002\n"
  "\rAllowFromAgvs\022\026\n\016currentStation\030\001 \001(\t\022\025"
  "\n\rtargetStation\030\002 \001(\t\022\024\n\014errorMessage\030\003 "
  "\001(\014\022\034\n\010charging\030\004 \001(\0132\n.ChargeCmd\022\021\n\teme"
  "rgency\030\005 \001(\010\022\021\n\tisUseable\030\006 \001(\010\022\017\n\007hasTa"
  "sk\030\007 \001(\010\022\026\n\006alarms\030\010 \003(\0132\006.Alarm\022\036\n\013syst"
  "emPause\030\t \001(\0162\t.DoAction\022#\n\ntaskStatus\030\n"
  " \001(\0162\017.AgvsTaskStatus\032\360\001\n\014ReportToAgvs\022\017"
  "\n\007carName\030\001 \001(\t\022\026\n\016currentStation\030\002 \001(\t\022"
  "\033\n\010position\030\003 \001(\0132\t.Position\022\031\n\007battery\030"
  "\004 \001(\0132\010.Battery\022\033\n\007carInfo\030\005 \001(\0132\n.CarHW"
  "Info\022\024\n\014errorMessage\030\006 \001(\014\022\026\n\006alarms\030\007 \003"
  "(\0132\006.Alarm\022\021\n\tisPulling\030\010 \001(\010\022\n\n\002IP\030\t \001("
  "\t\022\025\n\rcollaborative\030\n \001(\010\032Y\n\016MissonFromAg"
  "vs\022\r\n\005route\030\001 \001(\t\022!\n\013contextTask\030\002 \001(\0132\014"
  ".ContextTask\022\025\n\rtargetStation\030\003 \001(\t\032@\n\021A"
  "voidAreaFromAgvs\022+\n\tavoidArea\030\001 \001(\0132\030.Av"
  "oidanceAreaCollection\032\304\003\n\rRequestToAgvs\022"
  " \n\rgetMissonInfo\030\001 \001(\0162\t.DoAction\022\035\n\nset"
  "Useable\030\002 \001(\0162\t.DoAction\022\035\n\ncancelTask\030\003"
  " \001(\0162\t.DoAction\022\"\n\017requestCharging\030\004 \001(\016"
  "2\t.DoAction\022\031\n\006unlock\030\005 \001(\0162\t.DoAction\022 "
  "\n\rliftEmergency\030\006 \001(\0162\t.DoAction\022\022\n\nappl"
  "yRotue\030\007 \001(\t\022\025\n\rmanualStation\030\010 \001(\t\022 \n\ra"
  "voidAreaOper\030\t \001(\0162\t.DoAction\022!\n\016initial"
  "Traffic\030\n \001(\0162\t.DoAction\022\"\n\017trafficRecov"
  "ery\030\013 \001(\0162\t.DoAction\022\037\n\014complishTask\030\014 \001"
  "(\0162\t.DoAction\022\037\n\014nextTaskFlow\030\r \001(\0162\t.Do"
  "Action\022\020\n\010strParam\030\024 \001(\t\022\n\n\002IP\030\025 \001(\t\032M\n\017"
  "RequestFromAgvs\022\034\n\010charging\030\001 \001(\0132\n.Char"
  "geCmd\022\034\n\temergency\030\002 \001(\0162\t.DoAction\032\236\001\n\020"
  "PeriodDataToAgvs\022\024\n\014camelVersion\030\001 \001(\t\022\022"
  "\n\nmapVersion\030\002 \001(\t\022\025\n\rtotalOdometry\030\003 \001("
  "\002\022\024\n\014totalRuntime\030\004 \001(\002\022\031\n\021totalTaskOdom"
  "etry\030\005 \001(\002\022\030\n\020totalTaskRuntime\030\006 \001(\002\032 \n\022"
  "PeriodDataFromAgvs\022\n\n\002ok\030\001 \001(\010B\t\n\007onlyon"
  "eB!\252\002\036AGV.Communication.CamelMessageb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_camel_2dagvs_2eproto_deps[1] = {
  &::descriptor_table_camel_2dcommon_2eproto,
};
static ::_pbi::once_flag descriptor_table_camel_2dagvs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_camel_2dagvs_2eproto = {
    false, false, 2004, descriptor_table_protodef_camel_2dagvs_2eproto,
    "camel-agvs.proto",
    &descriptor_table_camel_2dagvs_2eproto_once, descriptor_table_camel_2dagvs_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_camel_2dagvs_2eproto::offsets,
    file_level_metadata_camel_2dagvs_2eproto, file_level_enum_descriptors_camel_2dagvs_2eproto,
    file_level_service_descriptors_camel_2dagvs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_camel_2dagvs_2eproto_getter() {
  return &descriptor_table_camel_2dagvs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_camel_2dagvs_2eproto(&descriptor_table_camel_2dagvs_2eproto);

// ===================================================================

class CamelMessage_AllowFromAgvs::_Internal {
 public:
  static const ::ChargeCmd& charging(const CamelMessage_AllowFromAgvs* msg);
};

const ::ChargeCmd&
CamelMessage_AllowFromAgvs::_Internal::charging(const CamelMessage_AllowFromAgvs* msg) {
  return *msg->_impl_.charging_;
}
void CamelMessage_AllowFromAgvs::clear_charging() {
  if (GetArenaForAllocation() == nullptr && _impl_.charging_ != nullptr) {
    delete _impl_.charging_;
  }
  _impl_.charging_ = nullptr;
}
void CamelMessage_AllowFromAgvs::clear_alarms() {
  _impl_.alarms_.Clear();
}
CamelMessage_AllowFromAgvs::CamelMessage_AllowFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.AllowFromAgvs)
}
CamelMessage_AllowFromAgvs::CamelMessage_AllowFromAgvs(const CamelMessage_AllowFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_AllowFromAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alarms_){from._impl_.alarms_}
    , decltype(_impl_.currentstation_){}
    , decltype(_impl_.targetstation_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.charging_){nullptr}
    , decltype(_impl_.emergency_){}
    , decltype(_impl_.isuseable_){}
    , decltype(_impl_.hastask_){}
    , decltype(_impl_.systempause_){}
    , decltype(_impl_.taskstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currentstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currentstation().empty()) {
    _this->_impl_.currentstation_.Set(from._internal_currentstation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetstation().empty()) {
    _this->_impl_.targetstation_.Set(from._internal_targetstation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_charging()) {
    _this->_impl_.charging_ = new ::ChargeCmd(*from._impl_.charging_);
  }
  ::memcpy(&_impl_.emergency_, &from._impl_.emergency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.taskstatus_) -
    reinterpret_cast<char*>(&_impl_.emergency_)) + sizeof(_impl_.taskstatus_));
  // @@protoc_insertion_point(copy_constructor:CamelMessage.AllowFromAgvs)
}

inline void CamelMessage_AllowFromAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alarms_){arena}
    , decltype(_impl_.currentstation_){}
    , decltype(_impl_.targetstation_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.charging_){nullptr}
    , decltype(_impl_.emergency_){false}
    , decltype(_impl_.isuseable_){false}
    , decltype(_impl_.hastask_){false}
    , decltype(_impl_.systempause_){0}
    , decltype(_impl_.taskstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currentstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamelMessage_AllowFromAgvs::~CamelMessage_AllowFromAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.AllowFromAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_AllowFromAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alarms_.~RepeatedPtrField();
  _impl_.currentstation_.Destroy();
  _impl_.targetstation_.Destroy();
  _impl_.errormessage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.charging_;
}

void CamelMessage_AllowFromAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_AllowFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.AllowFromAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alarms_.Clear();
  _impl_.currentstation_.ClearToEmpty();
  _impl_.targetstation_.ClearToEmpty();
  _impl_.errormessage_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.charging_ != nullptr) {
    delete _impl_.charging_;
  }
  _impl_.charging_ = nullptr;
  ::memset(&_impl_.emergency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.taskstatus_) -
      reinterpret_cast<char*>(&_impl_.emergency_)) + sizeof(_impl_.taskstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_AllowFromAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string currentStation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_currentstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.AllowFromAgvs.currentStation"));
        } else
          goto handle_unusual;
        continue;
      // string targetStation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_targetstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.AllowFromAgvs.targetStation"));
        } else
          goto handle_unusual;
        continue;
      // bytes errorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChargeCmd charging = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_charging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool emergency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.emergency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool isUseable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isuseable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool hasTask = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hastask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Alarm alarms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DoAction systemPause = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_systempause(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .AgvsTaskStatus taskStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_taskstatus(static_cast<::AgvsTaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_AllowFromAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.AllowFromAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string currentStation = 1;
  if (!this->_internal_currentstation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentstation().data(), static_cast<int>(this->_internal_currentstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.AllowFromAgvs.currentStation");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currentstation(), target);
  }

  // string targetStation = 2;
  if (!this->_internal_targetstation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetstation().data(), static_cast<int>(this->_internal_targetstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.AllowFromAgvs.targetStation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetstation(), target);
  }

  // bytes errorMessage = 3;
  if (!this->_internal_errormessage().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_errormessage(), target);
  }

  // .ChargeCmd charging = 4;
  if (this->_internal_has_charging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::charging(this),
        _Internal::charging(this).GetCachedSize(), target, stream);
  }

  // bool emergency = 5;
  if (this->_internal_emergency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_emergency(), target);
  }

  // bool isUseable = 6;
  if (this->_internal_isuseable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isuseable(), target);
  }

  // bool hasTask = 7;
  if (this->_internal_hastask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_hastask(), target);
  }

  // repeated .Alarm alarms = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alarms_size()); i < n; i++) {
    const auto& repfield = this->_internal_alarms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .DoAction systemPause = 9;
  if (this->_internal_systempause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_systempause(), target);
  }

  // .AgvsTaskStatus taskStatus = 10;
  if (this->_internal_taskstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_taskstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.AllowFromAgvs)
  return target;
}

size_t CamelMessage_AllowFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.AllowFromAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Alarm alarms = 8;
  total_size += 1UL * this->_internal_alarms_size();
  for (const auto& msg : this->_impl_.alarms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currentStation = 1;
  if (!this->_internal_currentstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentstation());
  }

  // string targetStation = 2;
  if (!this->_internal_targetstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetstation());
  }

  // bytes errorMessage = 3;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errormessage());
  }

  // .ChargeCmd charging = 4;
  if (this->_internal_has_charging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.charging_);
  }

  // bool emergency = 5;
  if (this->_internal_emergency() != 0) {
    total_size += 1 + 1;
  }

  // bool isUseable = 6;
  if (this->_internal_isuseable() != 0) {
    total_size += 1 + 1;
  }

  // bool hasTask = 7;
  if (this->_internal_hastask() != 0) {
    total_size += 1 + 1;
  }

  // .DoAction systemPause = 9;
  if (this->_internal_systempause() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_systempause());
  }

  // .AgvsTaskStatus taskStatus = 10;
  if (this->_internal_taskstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_taskstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_AllowFromAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_AllowFromAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_AllowFromAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_AllowFromAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_AllowFromAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_AllowFromAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.AllowFromAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.alarms_.MergeFrom(from._impl_.alarms_);
  if (!from._internal_currentstation().empty()) {
    _this->_internal_set_currentstation(from._internal_currentstation());
  }
  if (!from._internal_targetstation().empty()) {
    _this->_internal_set_targetstation(from._internal_targetstation());
  }
  if (!from._internal_errormessage().empty()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (from._internal_has_charging()) {
    _this->_internal_mutable_charging()->::ChargeCmd::MergeFrom(
        from._internal_charging());
  }
  if (from._internal_emergency() != 0) {
    _this->_internal_set_emergency(from._internal_emergency());
  }
  if (from._internal_isuseable() != 0) {
    _this->_internal_set_isuseable(from._internal_isuseable());
  }
  if (from._internal_hastask() != 0) {
    _this->_internal_set_hastask(from._internal_hastask());
  }
  if (from._internal_systempause() != 0) {
    _this->_internal_set_systempause(from._internal_systempause());
  }
  if (from._internal_taskstatus() != 0) {
    _this->_internal_set_taskstatus(from._internal_taskstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_AllowFromAgvs::CopyFrom(const CamelMessage_AllowFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.AllowFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_AllowFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_AllowFromAgvs::InternalSwap(CamelMessage_AllowFromAgvs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.alarms_.InternalSwap(&other->_impl_.alarms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currentstation_, lhs_arena,
      &other->_impl_.currentstation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetstation_, lhs_arena,
      &other->_impl_.targetstation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamelMessage_AllowFromAgvs, _impl_.taskstatus_)
      + sizeof(CamelMessage_AllowFromAgvs::_impl_.taskstatus_)
      - PROTOBUF_FIELD_OFFSET(CamelMessage_AllowFromAgvs, _impl_.charging_)>(
          reinterpret_cast<char*>(&_impl_.charging_),
          reinterpret_cast<char*>(&other->_impl_.charging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_AllowFromAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[0]);
}

// ===================================================================

class CamelMessage_ReportToAgvs::_Internal {
 public:
  static const ::Position& position(const CamelMessage_ReportToAgvs* msg);
  static const ::Battery& battery(const CamelMessage_ReportToAgvs* msg);
  static const ::CarHWInfo& carinfo(const CamelMessage_ReportToAgvs* msg);
};

const ::Position&
CamelMessage_ReportToAgvs::_Internal::position(const CamelMessage_ReportToAgvs* msg) {
  return *msg->_impl_.position_;
}
const ::Battery&
CamelMessage_ReportToAgvs::_Internal::battery(const CamelMessage_ReportToAgvs* msg) {
  return *msg->_impl_.battery_;
}
const ::CarHWInfo&
CamelMessage_ReportToAgvs::_Internal::carinfo(const CamelMessage_ReportToAgvs* msg) {
  return *msg->_impl_.carinfo_;
}
void CamelMessage_ReportToAgvs::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void CamelMessage_ReportToAgvs::clear_battery() {
  if (GetArenaForAllocation() == nullptr && _impl_.battery_ != nullptr) {
    delete _impl_.battery_;
  }
  _impl_.battery_ = nullptr;
}
void CamelMessage_ReportToAgvs::clear_carinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.carinfo_ != nullptr) {
    delete _impl_.carinfo_;
  }
  _impl_.carinfo_ = nullptr;
}
void CamelMessage_ReportToAgvs::clear_alarms() {
  _impl_.alarms_.Clear();
}
CamelMessage_ReportToAgvs::CamelMessage_ReportToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.ReportToAgvs)
}
CamelMessage_ReportToAgvs::CamelMessage_ReportToAgvs(const CamelMessage_ReportToAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_ReportToAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alarms_){from._impl_.alarms_}
    , decltype(_impl_.carname_){}
    , decltype(_impl_.currentstation_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.battery_){nullptr}
    , decltype(_impl_.carinfo_){nullptr}
    , decltype(_impl_.ispulling_){}
    , decltype(_impl_.collaborative_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.carname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_carname().empty()) {
    _this->_impl_.carname_.Set(from._internal_carname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currentstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currentstation().empty()) {
    _this->_impl_.currentstation_.Set(from._internal_currentstation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormessage().empty()) {
    _this->_impl_.errormessage_.Set(from._internal_errormessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Position(*from._impl_.position_);
  }
  if (from._internal_has_battery()) {
    _this->_impl_.battery_ = new ::Battery(*from._impl_.battery_);
  }
  if (from._internal_has_carinfo()) {
    _this->_impl_.carinfo_ = new ::CarHWInfo(*from._impl_.carinfo_);
  }
  ::memcpy(&_impl_.ispulling_, &from._impl_.ispulling_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collaborative_) -
    reinterpret_cast<char*>(&_impl_.ispulling_)) + sizeof(_impl_.collaborative_));
  // @@protoc_insertion_point(copy_constructor:CamelMessage.ReportToAgvs)
}

inline void CamelMessage_ReportToAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.alarms_){arena}
    , decltype(_impl_.carname_){}
    , decltype(_impl_.currentstation_){}
    , decltype(_impl_.errormessage_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.battery_){nullptr}
    , decltype(_impl_.carinfo_){nullptr}
    , decltype(_impl_.ispulling_){false}
    , decltype(_impl_.collaborative_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.carname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.carname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currentstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamelMessage_ReportToAgvs::~CamelMessage_ReportToAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.ReportToAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_ReportToAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.alarms_.~RepeatedPtrField();
  _impl_.carname_.Destroy();
  _impl_.currentstation_.Destroy();
  _impl_.errormessage_.Destroy();
  _impl_.ip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.battery_;
  if (this != internal_default_instance()) delete _impl_.carinfo_;
}

void CamelMessage_ReportToAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_ReportToAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.ReportToAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alarms_.Clear();
  _impl_.carname_.ClearToEmpty();
  _impl_.currentstation_.ClearToEmpty();
  _impl_.errormessage_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.battery_ != nullptr) {
    delete _impl_.battery_;
  }
  _impl_.battery_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.carinfo_ != nullptr) {
    delete _impl_.carinfo_;
  }
  _impl_.carinfo_ = nullptr;
  ::memset(&_impl_.ispulling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.collaborative_) -
      reinterpret_cast<char*>(&_impl_.ispulling_)) + sizeof(_impl_.collaborative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_ReportToAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string carName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_carname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.ReportToAgvs.carName"));
        } else
          goto handle_unusual;
        continue;
      // string currentStation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currentstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.ReportToAgvs.currentStation"));
        } else
          goto handle_unusual;
        continue;
      // .Position position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Battery battery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CarHWInfo carInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_carinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes errorMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Alarm alarms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool isPulling = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ispulling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string IP = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.ReportToAgvs.IP"));
        } else
          goto handle_unusual;
        continue;
      // bool collaborative = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.collaborative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_ReportToAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.ReportToAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string carName = 1;
  if (!this->_internal_carname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_carname().data(), static_cast<int>(this->_internal_carname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.ReportToAgvs.carName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_carname(), target);
  }

  // string currentStation = 2;
  if (!this->_internal_currentstation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currentstation().data(), static_cast<int>(this->_internal_currentstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.ReportToAgvs.currentStation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currentstation(), target);
  }

  // .Position position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Battery battery = 4;
  if (this->_internal_has_battery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::battery(this),
        _Internal::battery(this).GetCachedSize(), target, stream);
  }

  // .CarHWInfo carInfo = 5;
  if (this->_internal_has_carinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::carinfo(this),
        _Internal::carinfo(this).GetCachedSize(), target, stream);
  }

  // bytes errorMessage = 6;
  if (!this->_internal_errormessage().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_errormessage(), target);
  }

  // repeated .Alarm alarms = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alarms_size()); i < n; i++) {
    const auto& repfield = this->_internal_alarms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool isPulling = 8;
  if (this->_internal_ispulling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_ispulling(), target);
  }

  // string IP = 9;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.ReportToAgvs.IP");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ip(), target);
  }

  // bool collaborative = 10;
  if (this->_internal_collaborative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_collaborative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.ReportToAgvs)
  return target;
}

size_t CamelMessage_ReportToAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.ReportToAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Alarm alarms = 7;
  total_size += 1UL * this->_internal_alarms_size();
  for (const auto& msg : this->_impl_.alarms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string carName = 1;
  if (!this->_internal_carname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_carname());
  }

  // string currentStation = 2;
  if (!this->_internal_currentstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currentstation());
  }

  // bytes errorMessage = 6;
  if (!this->_internal_errormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errormessage());
  }

  // string IP = 9;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .Position position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Battery battery = 4;
  if (this->_internal_has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.battery_);
  }

  // .CarHWInfo carInfo = 5;
  if (this->_internal_has_carinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.carinfo_);
  }

  // bool isPulling = 8;
  if (this->_internal_ispulling() != 0) {
    total_size += 1 + 1;
  }

  // bool collaborative = 10;
  if (this->_internal_collaborative() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_ReportToAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_ReportToAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_ReportToAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_ReportToAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_ReportToAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_ReportToAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.ReportToAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.alarms_.MergeFrom(from._impl_.alarms_);
  if (!from._internal_carname().empty()) {
    _this->_internal_set_carname(from._internal_carname());
  }
  if (!from._internal_currentstation().empty()) {
    _this->_internal_set_currentstation(from._internal_currentstation());
  }
  if (!from._internal_errormessage().empty()) {
    _this->_internal_set_errormessage(from._internal_errormessage());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Position::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_battery()) {
    _this->_internal_mutable_battery()->::Battery::MergeFrom(
        from._internal_battery());
  }
  if (from._internal_has_carinfo()) {
    _this->_internal_mutable_carinfo()->::CarHWInfo::MergeFrom(
        from._internal_carinfo());
  }
  if (from._internal_ispulling() != 0) {
    _this->_internal_set_ispulling(from._internal_ispulling());
  }
  if (from._internal_collaborative() != 0) {
    _this->_internal_set_collaborative(from._internal_collaborative());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_ReportToAgvs::CopyFrom(const CamelMessage_ReportToAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.ReportToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_ReportToAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_ReportToAgvs::InternalSwap(CamelMessage_ReportToAgvs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.alarms_.InternalSwap(&other->_impl_.alarms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.carname_, lhs_arena,
      &other->_impl_.carname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currentstation_, lhs_arena,
      &other->_impl_.currentstation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormessage_, lhs_arena,
      &other->_impl_.errormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamelMessage_ReportToAgvs, _impl_.collaborative_)
      + sizeof(CamelMessage_ReportToAgvs::_impl_.collaborative_)
      - PROTOBUF_FIELD_OFFSET(CamelMessage_ReportToAgvs, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_ReportToAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[1]);
}

// ===================================================================

class CamelMessage_MissonFromAgvs::_Internal {
 public:
  static const ::ContextTask& contexttask(const CamelMessage_MissonFromAgvs* msg);
};

const ::ContextTask&
CamelMessage_MissonFromAgvs::_Internal::contexttask(const CamelMessage_MissonFromAgvs* msg) {
  return *msg->_impl_.contexttask_;
}
void CamelMessage_MissonFromAgvs::clear_contexttask() {
  if (GetArenaForAllocation() == nullptr && _impl_.contexttask_ != nullptr) {
    delete _impl_.contexttask_;
  }
  _impl_.contexttask_ = nullptr;
}
CamelMessage_MissonFromAgvs::CamelMessage_MissonFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.MissonFromAgvs)
}
CamelMessage_MissonFromAgvs::CamelMessage_MissonFromAgvs(const CamelMessage_MissonFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_MissonFromAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_){}
    , decltype(_impl_.targetstation_){}
    , decltype(_impl_.contexttask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.route_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route().empty()) {
    _this->_impl_.route_.Set(from._internal_route(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetstation().empty()) {
    _this->_impl_.targetstation_.Set(from._internal_targetstation(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contexttask()) {
    _this->_impl_.contexttask_ = new ::ContextTask(*from._impl_.contexttask_);
  }
  // @@protoc_insertion_point(copy_constructor:CamelMessage.MissonFromAgvs)
}

inline void CamelMessage_MissonFromAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_){}
    , decltype(_impl_.targetstation_){}
    , decltype(_impl_.contexttask_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.route_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamelMessage_MissonFromAgvs::~CamelMessage_MissonFromAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.MissonFromAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_MissonFromAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_.Destroy();
  _impl_.targetstation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contexttask_;
}

void CamelMessage_MissonFromAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_MissonFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.MissonFromAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_.ClearToEmpty();
  _impl_.targetstation_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contexttask_ != nullptr) {
    delete _impl_.contexttask_;
  }
  _impl_.contexttask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_MissonFromAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_route();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.MissonFromAgvs.route"));
        } else
          goto handle_unusual;
        continue;
      // .ContextTask contextTask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contexttask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string targetStation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_targetstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.MissonFromAgvs.targetStation"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_MissonFromAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.MissonFromAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string route = 1;
  if (!this->_internal_route().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route().data(), static_cast<int>(this->_internal_route().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.MissonFromAgvs.route");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_route(), target);
  }

  // .ContextTask contextTask = 2;
  if (this->_internal_has_contexttask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::contexttask(this),
        _Internal::contexttask(this).GetCachedSize(), target, stream);
  }

  // string targetStation = 3;
  if (!this->_internal_targetstation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetstation().data(), static_cast<int>(this->_internal_targetstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.MissonFromAgvs.targetStation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetstation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.MissonFromAgvs)
  return target;
}

size_t CamelMessage_MissonFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.MissonFromAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route = 1;
  if (!this->_internal_route().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route());
  }

  // string targetStation = 3;
  if (!this->_internal_targetstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetstation());
  }

  // .ContextTask contextTask = 2;
  if (this->_internal_has_contexttask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contexttask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_MissonFromAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_MissonFromAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_MissonFromAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_MissonFromAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_MissonFromAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_MissonFromAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.MissonFromAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_route().empty()) {
    _this->_internal_set_route(from._internal_route());
  }
  if (!from._internal_targetstation().empty()) {
    _this->_internal_set_targetstation(from._internal_targetstation());
  }
  if (from._internal_has_contexttask()) {
    _this->_internal_mutable_contexttask()->::ContextTask::MergeFrom(
        from._internal_contexttask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_MissonFromAgvs::CopyFrom(const CamelMessage_MissonFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.MissonFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_MissonFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_MissonFromAgvs::InternalSwap(CamelMessage_MissonFromAgvs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_, lhs_arena,
      &other->_impl_.route_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetstation_, lhs_arena,
      &other->_impl_.targetstation_, rhs_arena
  );
  swap(_impl_.contexttask_, other->_impl_.contexttask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_MissonFromAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[2]);
}

// ===================================================================

class CamelMessage_AvoidAreaFromAgvs::_Internal {
 public:
  static const ::AvoidanceAreaCollection& avoidarea(const CamelMessage_AvoidAreaFromAgvs* msg);
};

const ::AvoidanceAreaCollection&
CamelMessage_AvoidAreaFromAgvs::_Internal::avoidarea(const CamelMessage_AvoidAreaFromAgvs* msg) {
  return *msg->_impl_.avoidarea_;
}
void CamelMessage_AvoidAreaFromAgvs::clear_avoidarea() {
  if (GetArenaForAllocation() == nullptr && _impl_.avoidarea_ != nullptr) {
    delete _impl_.avoidarea_;
  }
  _impl_.avoidarea_ = nullptr;
}
CamelMessage_AvoidAreaFromAgvs::CamelMessage_AvoidAreaFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.AvoidAreaFromAgvs)
}
CamelMessage_AvoidAreaFromAgvs::CamelMessage_AvoidAreaFromAgvs(const CamelMessage_AvoidAreaFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_AvoidAreaFromAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.avoidarea_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_avoidarea()) {
    _this->_impl_.avoidarea_ = new ::AvoidanceAreaCollection(*from._impl_.avoidarea_);
  }
  // @@protoc_insertion_point(copy_constructor:CamelMessage.AvoidAreaFromAgvs)
}

inline void CamelMessage_AvoidAreaFromAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.avoidarea_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CamelMessage_AvoidAreaFromAgvs::~CamelMessage_AvoidAreaFromAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.AvoidAreaFromAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_AvoidAreaFromAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.avoidarea_;
}

void CamelMessage_AvoidAreaFromAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_AvoidAreaFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.AvoidAreaFromAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.avoidarea_ != nullptr) {
    delete _impl_.avoidarea_;
  }
  _impl_.avoidarea_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_AvoidAreaFromAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .AvoidanceAreaCollection avoidArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avoidarea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_AvoidAreaFromAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.AvoidAreaFromAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .AvoidanceAreaCollection avoidArea = 1;
  if (this->_internal_has_avoidarea()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::avoidarea(this),
        _Internal::avoidarea(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.AvoidAreaFromAgvs)
  return target;
}

size_t CamelMessage_AvoidAreaFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.AvoidAreaFromAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AvoidanceAreaCollection avoidArea = 1;
  if (this->_internal_has_avoidarea()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.avoidarea_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_AvoidAreaFromAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_AvoidAreaFromAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_AvoidAreaFromAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_AvoidAreaFromAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_AvoidAreaFromAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_AvoidAreaFromAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.AvoidAreaFromAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_avoidarea()) {
    _this->_internal_mutable_avoidarea()->::AvoidanceAreaCollection::MergeFrom(
        from._internal_avoidarea());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_AvoidAreaFromAgvs::CopyFrom(const CamelMessage_AvoidAreaFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.AvoidAreaFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_AvoidAreaFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_AvoidAreaFromAgvs::InternalSwap(CamelMessage_AvoidAreaFromAgvs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.avoidarea_, other->_impl_.avoidarea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_AvoidAreaFromAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[3]);
}

// ===================================================================

class CamelMessage_RequestToAgvs::_Internal {
 public:
};

CamelMessage_RequestToAgvs::CamelMessage_RequestToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.RequestToAgvs)
}
CamelMessage_RequestToAgvs::CamelMessage_RequestToAgvs(const CamelMessage_RequestToAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_RequestToAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.applyrotue_){}
    , decltype(_impl_.manualstation_){}
    , decltype(_impl_.strparam_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.getmissoninfo_){}
    , decltype(_impl_.setuseable_){}
    , decltype(_impl_.canceltask_){}
    , decltype(_impl_.requestcharging_){}
    , decltype(_impl_.unlock_){}
    , decltype(_impl_.liftemergency_){}
    , decltype(_impl_.avoidareaoper_){}
    , decltype(_impl_.initialtraffic_){}
    , decltype(_impl_.trafficrecovery_){}
    , decltype(_impl_.complishtask_){}
    , decltype(_impl_.nexttaskflow_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.applyrotue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.applyrotue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_applyrotue().empty()) {
    _this->_impl_.applyrotue_.Set(from._internal_applyrotue(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manualstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manualstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manualstation().empty()) {
    _this->_impl_.manualstation_.Set(from._internal_manualstation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.strparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strparam().empty()) {
    _this->_impl_.strparam_.Set(from._internal_strparam(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.getmissoninfo_, &from._impl_.getmissoninfo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nexttaskflow_) -
    reinterpret_cast<char*>(&_impl_.getmissoninfo_)) + sizeof(_impl_.nexttaskflow_));
  // @@protoc_insertion_point(copy_constructor:CamelMessage.RequestToAgvs)
}

inline void CamelMessage_RequestToAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.applyrotue_){}
    , decltype(_impl_.manualstation_){}
    , decltype(_impl_.strparam_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.getmissoninfo_){0}
    , decltype(_impl_.setuseable_){0}
    , decltype(_impl_.canceltask_){0}
    , decltype(_impl_.requestcharging_){0}
    , decltype(_impl_.unlock_){0}
    , decltype(_impl_.liftemergency_){0}
    , decltype(_impl_.avoidareaoper_){0}
    , decltype(_impl_.initialtraffic_){0}
    , decltype(_impl_.trafficrecovery_){0}
    , decltype(_impl_.complishtask_){0}
    , decltype(_impl_.nexttaskflow_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.applyrotue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.applyrotue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manualstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manualstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamelMessage_RequestToAgvs::~CamelMessage_RequestToAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.RequestToAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_RequestToAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.applyrotue_.Destroy();
  _impl_.manualstation_.Destroy();
  _impl_.strparam_.Destroy();
  _impl_.ip_.Destroy();
}

void CamelMessage_RequestToAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_RequestToAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.RequestToAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.applyrotue_.ClearToEmpty();
  _impl_.manualstation_.ClearToEmpty();
  _impl_.strparam_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.getmissoninfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nexttaskflow_) -
      reinterpret_cast<char*>(&_impl_.getmissoninfo_)) + sizeof(_impl_.nexttaskflow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_RequestToAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DoAction getMissonInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_getmissoninfo(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction setUseable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_setuseable(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction cancelTask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_canceltask(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction requestCharging = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requestcharging(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction unlock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unlock(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction liftEmergency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_liftemergency(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // string applyRotue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_applyrotue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.RequestToAgvs.applyRotue"));
        } else
          goto handle_unusual;
        continue;
      // string manualStation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_manualstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.RequestToAgvs.manualStation"));
        } else
          goto handle_unusual;
        continue;
      // .DoAction avoidAreaOper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_avoidareaoper(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction initialTraffic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_initialtraffic(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction trafficRecovery = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trafficrecovery(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction complishTask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_complishtask(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // .DoAction nextTaskFlow = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nexttaskflow(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // string strParam = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_strparam();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.RequestToAgvs.strParam"));
        } else
          goto handle_unusual;
        continue;
      // string IP = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.RequestToAgvs.IP"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_RequestToAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.RequestToAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DoAction getMissonInfo = 1;
  if (this->_internal_getmissoninfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_getmissoninfo(), target);
  }

  // .DoAction setUseable = 2;
  if (this->_internal_setuseable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_setuseable(), target);
  }

  // .DoAction cancelTask = 3;
  if (this->_internal_canceltask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_canceltask(), target);
  }

  // .DoAction requestCharging = 4;
  if (this->_internal_requestcharging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_requestcharging(), target);
  }

  // .DoAction unlock = 5;
  if (this->_internal_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_unlock(), target);
  }

  // .DoAction liftEmergency = 6;
  if (this->_internal_liftemergency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_liftemergency(), target);
  }

  // string applyRotue = 7;
  if (!this->_internal_applyrotue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_applyrotue().data(), static_cast<int>(this->_internal_applyrotue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.RequestToAgvs.applyRotue");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_applyrotue(), target);
  }

  // string manualStation = 8;
  if (!this->_internal_manualstation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manualstation().data(), static_cast<int>(this->_internal_manualstation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.RequestToAgvs.manualStation");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_manualstation(), target);
  }

  // .DoAction avoidAreaOper = 9;
  if (this->_internal_avoidareaoper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_avoidareaoper(), target);
  }

  // .DoAction initialTraffic = 10;
  if (this->_internal_initialtraffic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_initialtraffic(), target);
  }

  // .DoAction trafficRecovery = 11;
  if (this->_internal_trafficrecovery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_trafficrecovery(), target);
  }

  // .DoAction complishTask = 12;
  if (this->_internal_complishtask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_complishtask(), target);
  }

  // .DoAction nextTaskFlow = 13;
  if (this->_internal_nexttaskflow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_nexttaskflow(), target);
  }

  // string strParam = 20;
  if (!this->_internal_strparam().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strparam().data(), static_cast<int>(this->_internal_strparam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.RequestToAgvs.strParam");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_strparam(), target);
  }

  // string IP = 21;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.RequestToAgvs.IP");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.RequestToAgvs)
  return target;
}

size_t CamelMessage_RequestToAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.RequestToAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string applyRotue = 7;
  if (!this->_internal_applyrotue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_applyrotue());
  }

  // string manualStation = 8;
  if (!this->_internal_manualstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manualstation());
  }

  // string strParam = 20;
  if (!this->_internal_strparam().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strparam());
  }

  // string IP = 21;
  if (!this->_internal_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .DoAction getMissonInfo = 1;
  if (this->_internal_getmissoninfo() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_getmissoninfo());
  }

  // .DoAction setUseable = 2;
  if (this->_internal_setuseable() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_setuseable());
  }

  // .DoAction cancelTask = 3;
  if (this->_internal_canceltask() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_canceltask());
  }

  // .DoAction requestCharging = 4;
  if (this->_internal_requestcharging() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_requestcharging());
  }

  // .DoAction unlock = 5;
  if (this->_internal_unlock() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_unlock());
  }

  // .DoAction liftEmergency = 6;
  if (this->_internal_liftemergency() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_liftemergency());
  }

  // .DoAction avoidAreaOper = 9;
  if (this->_internal_avoidareaoper() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_avoidareaoper());
  }

  // .DoAction initialTraffic = 10;
  if (this->_internal_initialtraffic() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_initialtraffic());
  }

  // .DoAction trafficRecovery = 11;
  if (this->_internal_trafficrecovery() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trafficrecovery());
  }

  // .DoAction complishTask = 12;
  if (this->_internal_complishtask() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_complishtask());
  }

  // .DoAction nextTaskFlow = 13;
  if (this->_internal_nexttaskflow() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_nexttaskflow());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_RequestToAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_RequestToAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_RequestToAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_RequestToAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_RequestToAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_RequestToAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.RequestToAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_applyrotue().empty()) {
    _this->_internal_set_applyrotue(from._internal_applyrotue());
  }
  if (!from._internal_manualstation().empty()) {
    _this->_internal_set_manualstation(from._internal_manualstation());
  }
  if (!from._internal_strparam().empty()) {
    _this->_internal_set_strparam(from._internal_strparam());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_getmissoninfo() != 0) {
    _this->_internal_set_getmissoninfo(from._internal_getmissoninfo());
  }
  if (from._internal_setuseable() != 0) {
    _this->_internal_set_setuseable(from._internal_setuseable());
  }
  if (from._internal_canceltask() != 0) {
    _this->_internal_set_canceltask(from._internal_canceltask());
  }
  if (from._internal_requestcharging() != 0) {
    _this->_internal_set_requestcharging(from._internal_requestcharging());
  }
  if (from._internal_unlock() != 0) {
    _this->_internal_set_unlock(from._internal_unlock());
  }
  if (from._internal_liftemergency() != 0) {
    _this->_internal_set_liftemergency(from._internal_liftemergency());
  }
  if (from._internal_avoidareaoper() != 0) {
    _this->_internal_set_avoidareaoper(from._internal_avoidareaoper());
  }
  if (from._internal_initialtraffic() != 0) {
    _this->_internal_set_initialtraffic(from._internal_initialtraffic());
  }
  if (from._internal_trafficrecovery() != 0) {
    _this->_internal_set_trafficrecovery(from._internal_trafficrecovery());
  }
  if (from._internal_complishtask() != 0) {
    _this->_internal_set_complishtask(from._internal_complishtask());
  }
  if (from._internal_nexttaskflow() != 0) {
    _this->_internal_set_nexttaskflow(from._internal_nexttaskflow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_RequestToAgvs::CopyFrom(const CamelMessage_RequestToAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.RequestToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_RequestToAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_RequestToAgvs::InternalSwap(CamelMessage_RequestToAgvs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.applyrotue_, lhs_arena,
      &other->_impl_.applyrotue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manualstation_, lhs_arena,
      &other->_impl_.manualstation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strparam_, lhs_arena,
      &other->_impl_.strparam_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamelMessage_RequestToAgvs, _impl_.nexttaskflow_)
      + sizeof(CamelMessage_RequestToAgvs::_impl_.nexttaskflow_)
      - PROTOBUF_FIELD_OFFSET(CamelMessage_RequestToAgvs, _impl_.getmissoninfo_)>(
          reinterpret_cast<char*>(&_impl_.getmissoninfo_),
          reinterpret_cast<char*>(&other->_impl_.getmissoninfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_RequestToAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[4]);
}

// ===================================================================

class CamelMessage_RequestFromAgvs::_Internal {
 public:
  static const ::ChargeCmd& charging(const CamelMessage_RequestFromAgvs* msg);
};

const ::ChargeCmd&
CamelMessage_RequestFromAgvs::_Internal::charging(const CamelMessage_RequestFromAgvs* msg) {
  return *msg->_impl_.charging_;
}
void CamelMessage_RequestFromAgvs::clear_charging() {
  if (GetArenaForAllocation() == nullptr && _impl_.charging_ != nullptr) {
    delete _impl_.charging_;
  }
  _impl_.charging_ = nullptr;
}
CamelMessage_RequestFromAgvs::CamelMessage_RequestFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.RequestFromAgvs)
}
CamelMessage_RequestFromAgvs::CamelMessage_RequestFromAgvs(const CamelMessage_RequestFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_RequestFromAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.charging_){nullptr}
    , decltype(_impl_.emergency_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_charging()) {
    _this->_impl_.charging_ = new ::ChargeCmd(*from._impl_.charging_);
  }
  _this->_impl_.emergency_ = from._impl_.emergency_;
  // @@protoc_insertion_point(copy_constructor:CamelMessage.RequestFromAgvs)
}

inline void CamelMessage_RequestFromAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.charging_){nullptr}
    , decltype(_impl_.emergency_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CamelMessage_RequestFromAgvs::~CamelMessage_RequestFromAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.RequestFromAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_RequestFromAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.charging_;
}

void CamelMessage_RequestFromAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_RequestFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.RequestFromAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.charging_ != nullptr) {
    delete _impl_.charging_;
  }
  _impl_.charging_ = nullptr;
  _impl_.emergency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_RequestFromAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChargeCmd charging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_charging(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DoAction emergency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_emergency(static_cast<::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_RequestFromAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.RequestFromAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChargeCmd charging = 1;
  if (this->_internal_has_charging()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::charging(this),
        _Internal::charging(this).GetCachedSize(), target, stream);
  }

  // .DoAction emergency = 2;
  if (this->_internal_emergency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_emergency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.RequestFromAgvs)
  return target;
}

size_t CamelMessage_RequestFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.RequestFromAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChargeCmd charging = 1;
  if (this->_internal_has_charging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.charging_);
  }

  // .DoAction emergency = 2;
  if (this->_internal_emergency() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_emergency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_RequestFromAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_RequestFromAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_RequestFromAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_RequestFromAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_RequestFromAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_RequestFromAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.RequestFromAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charging()) {
    _this->_internal_mutable_charging()->::ChargeCmd::MergeFrom(
        from._internal_charging());
  }
  if (from._internal_emergency() != 0) {
    _this->_internal_set_emergency(from._internal_emergency());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_RequestFromAgvs::CopyFrom(const CamelMessage_RequestFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.RequestFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_RequestFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_RequestFromAgvs::InternalSwap(CamelMessage_RequestFromAgvs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamelMessage_RequestFromAgvs, _impl_.emergency_)
      + sizeof(CamelMessage_RequestFromAgvs::_impl_.emergency_)
      - PROTOBUF_FIELD_OFFSET(CamelMessage_RequestFromAgvs, _impl_.charging_)>(
          reinterpret_cast<char*>(&_impl_.charging_),
          reinterpret_cast<char*>(&other->_impl_.charging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_RequestFromAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[5]);
}

// ===================================================================

class CamelMessage_PeriodDataToAgvs::_Internal {
 public:
};

CamelMessage_PeriodDataToAgvs::CamelMessage_PeriodDataToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.PeriodDataToAgvs)
}
CamelMessage_PeriodDataToAgvs::CamelMessage_PeriodDataToAgvs(const CamelMessage_PeriodDataToAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_PeriodDataToAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camelversion_){}
    , decltype(_impl_.mapversion_){}
    , decltype(_impl_.totalodometry_){}
    , decltype(_impl_.totalruntime_){}
    , decltype(_impl_.totaltaskodometry_){}
    , decltype(_impl_.totaltaskruntime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camelversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camelversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camelversion().empty()) {
    _this->_impl_.camelversion_.Set(from._internal_camelversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapversion().empty()) {
    _this->_impl_.mapversion_.Set(from._internal_mapversion(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.totalodometry_, &from._impl_.totalodometry_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totaltaskruntime_) -
    reinterpret_cast<char*>(&_impl_.totalodometry_)) + sizeof(_impl_.totaltaskruntime_));
  // @@protoc_insertion_point(copy_constructor:CamelMessage.PeriodDataToAgvs)
}

inline void CamelMessage_PeriodDataToAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camelversion_){}
    , decltype(_impl_.mapversion_){}
    , decltype(_impl_.totalodometry_){0}
    , decltype(_impl_.totalruntime_){0}
    , decltype(_impl_.totaltaskodometry_){0}
    , decltype(_impl_.totaltaskruntime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.camelversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.camelversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CamelMessage_PeriodDataToAgvs::~CamelMessage_PeriodDataToAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.PeriodDataToAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_PeriodDataToAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camelversion_.Destroy();
  _impl_.mapversion_.Destroy();
}

void CamelMessage_PeriodDataToAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_PeriodDataToAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.PeriodDataToAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camelversion_.ClearToEmpty();
  _impl_.mapversion_.ClearToEmpty();
  ::memset(&_impl_.totalodometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totaltaskruntime_) -
      reinterpret_cast<char*>(&_impl_.totalodometry_)) + sizeof(_impl_.totaltaskruntime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_PeriodDataToAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camelVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camelversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.PeriodDataToAgvs.camelVersion"));
        } else
          goto handle_unusual;
        continue;
      // string mapVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mapversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CamelMessage.PeriodDataToAgvs.mapVersion"));
        } else
          goto handle_unusual;
        continue;
      // float totalOdometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.totalodometry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float totalRuntime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.totalruntime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float totalTaskOdometry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.totaltaskodometry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float totalTaskRuntime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.totaltaskruntime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_PeriodDataToAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.PeriodDataToAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camelVersion = 1;
  if (!this->_internal_camelversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camelversion().data(), static_cast<int>(this->_internal_camelversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.PeriodDataToAgvs.camelVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camelversion(), target);
  }

  // string mapVersion = 2;
  if (!this->_internal_mapversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapversion().data(), static_cast<int>(this->_internal_mapversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CamelMessage.PeriodDataToAgvs.mapVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapversion(), target);
  }

  // float totalOdometry = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalodometry = this->_internal_totalodometry();
  uint32_t raw_totalodometry;
  memcpy(&raw_totalodometry, &tmp_totalodometry, sizeof(tmp_totalodometry));
  if (raw_totalodometry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_totalodometry(), target);
  }

  // float totalRuntime = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalruntime = this->_internal_totalruntime();
  uint32_t raw_totalruntime;
  memcpy(&raw_totalruntime, &tmp_totalruntime, sizeof(tmp_totalruntime));
  if (raw_totalruntime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_totalruntime(), target);
  }

  // float totalTaskOdometry = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskodometry = this->_internal_totaltaskodometry();
  uint32_t raw_totaltaskodometry;
  memcpy(&raw_totaltaskodometry, &tmp_totaltaskodometry, sizeof(tmp_totaltaskodometry));
  if (raw_totaltaskodometry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_totaltaskodometry(), target);
  }

  // float totalTaskRuntime = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskruntime = this->_internal_totaltaskruntime();
  uint32_t raw_totaltaskruntime;
  memcpy(&raw_totaltaskruntime, &tmp_totaltaskruntime, sizeof(tmp_totaltaskruntime));
  if (raw_totaltaskruntime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_totaltaskruntime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.PeriodDataToAgvs)
  return target;
}

size_t CamelMessage_PeriodDataToAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.PeriodDataToAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camelVersion = 1;
  if (!this->_internal_camelversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camelversion());
  }

  // string mapVersion = 2;
  if (!this->_internal_mapversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapversion());
  }

  // float totalOdometry = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalodometry = this->_internal_totalodometry();
  uint32_t raw_totalodometry;
  memcpy(&raw_totalodometry, &tmp_totalodometry, sizeof(tmp_totalodometry));
  if (raw_totalodometry != 0) {
    total_size += 1 + 4;
  }

  // float totalRuntime = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalruntime = this->_internal_totalruntime();
  uint32_t raw_totalruntime;
  memcpy(&raw_totalruntime, &tmp_totalruntime, sizeof(tmp_totalruntime));
  if (raw_totalruntime != 0) {
    total_size += 1 + 4;
  }

  // float totalTaskOdometry = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskodometry = this->_internal_totaltaskodometry();
  uint32_t raw_totaltaskodometry;
  memcpy(&raw_totaltaskodometry, &tmp_totaltaskodometry, sizeof(tmp_totaltaskodometry));
  if (raw_totaltaskodometry != 0) {
    total_size += 1 + 4;
  }

  // float totalTaskRuntime = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskruntime = this->_internal_totaltaskruntime();
  uint32_t raw_totaltaskruntime;
  memcpy(&raw_totaltaskruntime, &tmp_totaltaskruntime, sizeof(tmp_totaltaskruntime));
  if (raw_totaltaskruntime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_PeriodDataToAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_PeriodDataToAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_PeriodDataToAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_PeriodDataToAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_PeriodDataToAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_PeriodDataToAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.PeriodDataToAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camelversion().empty()) {
    _this->_internal_set_camelversion(from._internal_camelversion());
  }
  if (!from._internal_mapversion().empty()) {
    _this->_internal_set_mapversion(from._internal_mapversion());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalodometry = from._internal_totalodometry();
  uint32_t raw_totalodometry;
  memcpy(&raw_totalodometry, &tmp_totalodometry, sizeof(tmp_totalodometry));
  if (raw_totalodometry != 0) {
    _this->_internal_set_totalodometry(from._internal_totalodometry());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totalruntime = from._internal_totalruntime();
  uint32_t raw_totalruntime;
  memcpy(&raw_totalruntime, &tmp_totalruntime, sizeof(tmp_totalruntime));
  if (raw_totalruntime != 0) {
    _this->_internal_set_totalruntime(from._internal_totalruntime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskodometry = from._internal_totaltaskodometry();
  uint32_t raw_totaltaskodometry;
  memcpy(&raw_totaltaskodometry, &tmp_totaltaskodometry, sizeof(tmp_totaltaskodometry));
  if (raw_totaltaskodometry != 0) {
    _this->_internal_set_totaltaskodometry(from._internal_totaltaskodometry());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_totaltaskruntime = from._internal_totaltaskruntime();
  uint32_t raw_totaltaskruntime;
  memcpy(&raw_totaltaskruntime, &tmp_totaltaskruntime, sizeof(tmp_totaltaskruntime));
  if (raw_totaltaskruntime != 0) {
    _this->_internal_set_totaltaskruntime(from._internal_totaltaskruntime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_PeriodDataToAgvs::CopyFrom(const CamelMessage_PeriodDataToAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.PeriodDataToAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_PeriodDataToAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_PeriodDataToAgvs::InternalSwap(CamelMessage_PeriodDataToAgvs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.camelversion_, lhs_arena,
      &other->_impl_.camelversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapversion_, lhs_arena,
      &other->_impl_.mapversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamelMessage_PeriodDataToAgvs, _impl_.totaltaskruntime_)
      + sizeof(CamelMessage_PeriodDataToAgvs::_impl_.totaltaskruntime_)
      - PROTOBUF_FIELD_OFFSET(CamelMessage_PeriodDataToAgvs, _impl_.totalodometry_)>(
          reinterpret_cast<char*>(&_impl_.totalodometry_),
          reinterpret_cast<char*>(&other->_impl_.totalodometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_PeriodDataToAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[6]);
}

// ===================================================================

class CamelMessage_PeriodDataFromAgvs::_Internal {
 public:
};

CamelMessage_PeriodDataFromAgvs::CamelMessage_PeriodDataFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage.PeriodDataFromAgvs)
}
CamelMessage_PeriodDataFromAgvs::CamelMessage_PeriodDataFromAgvs(const CamelMessage_PeriodDataFromAgvs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage_PeriodDataFromAgvs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ok_ = from._impl_.ok_;
  // @@protoc_insertion_point(copy_constructor:CamelMessage.PeriodDataFromAgvs)
}

inline void CamelMessage_PeriodDataFromAgvs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CamelMessage_PeriodDataFromAgvs::~CamelMessage_PeriodDataFromAgvs() {
  // @@protoc_insertion_point(destructor:CamelMessage.PeriodDataFromAgvs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage_PeriodDataFromAgvs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CamelMessage_PeriodDataFromAgvs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage_PeriodDataFromAgvs::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage.PeriodDataFromAgvs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage_PeriodDataFromAgvs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage_PeriodDataFromAgvs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage.PeriodDataFromAgvs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage.PeriodDataFromAgvs)
  return target;
}

size_t CamelMessage_PeriodDataFromAgvs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage.PeriodDataFromAgvs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage_PeriodDataFromAgvs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage_PeriodDataFromAgvs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage_PeriodDataFromAgvs::GetClassData() const { return &_class_data_; }


void CamelMessage_PeriodDataFromAgvs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage_PeriodDataFromAgvs*>(&to_msg);
  auto& from = static_cast<const CamelMessage_PeriodDataFromAgvs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage.PeriodDataFromAgvs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage_PeriodDataFromAgvs::CopyFrom(const CamelMessage_PeriodDataFromAgvs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage.PeriodDataFromAgvs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage_PeriodDataFromAgvs::IsInitialized() const {
  return true;
}

void CamelMessage_PeriodDataFromAgvs::InternalSwap(CamelMessage_PeriodDataFromAgvs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage_PeriodDataFromAgvs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[7]);
}

// ===================================================================

class CamelMessage::_Internal {
 public:
  static const ::CamelMessage_AllowFromAgvs& allowfromagvs(const CamelMessage* msg);
  static const ::CamelMessage_ReportToAgvs& reporttoagvs(const CamelMessage* msg);
  static const ::CamelMessage_MissonFromAgvs& missonfromagvs(const CamelMessage* msg);
  static const ::CamelMessage_RequestToAgvs& requesttoagvs(const CamelMessage* msg);
  static const ::CamelMessage_AvoidAreaFromAgvs& avoidareafromagvs(const CamelMessage* msg);
  static const ::CamelMessage_RequestFromAgvs& requestfromagvs(const CamelMessage* msg);
  static const ::Collaborative& collaborative(const CamelMessage* msg);
  static const ::CamelMessage_PeriodDataToAgvs& perioddatatoagvs(const CamelMessage* msg);
  static const ::CamelMessage_PeriodDataFromAgvs& perioddatafromagvs(const CamelMessage* msg);
};

const ::CamelMessage_AllowFromAgvs&
CamelMessage::_Internal::allowfromagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.allowfromagvs_;
}
const ::CamelMessage_ReportToAgvs&
CamelMessage::_Internal::reporttoagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.reporttoagvs_;
}
const ::CamelMessage_MissonFromAgvs&
CamelMessage::_Internal::missonfromagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.missonfromagvs_;
}
const ::CamelMessage_RequestToAgvs&
CamelMessage::_Internal::requesttoagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.requesttoagvs_;
}
const ::CamelMessage_AvoidAreaFromAgvs&
CamelMessage::_Internal::avoidareafromagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.avoidareafromagvs_;
}
const ::CamelMessage_RequestFromAgvs&
CamelMessage::_Internal::requestfromagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.requestfromagvs_;
}
const ::Collaborative&
CamelMessage::_Internal::collaborative(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.collaborative_;
}
const ::CamelMessage_PeriodDataToAgvs&
CamelMessage::_Internal::perioddatatoagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.perioddatatoagvs_;
}
const ::CamelMessage_PeriodDataFromAgvs&
CamelMessage::_Internal::perioddatafromagvs(const CamelMessage* msg) {
  return *msg->_impl_.onlyone_.perioddatafromagvs_;
}
void CamelMessage::set_allocated_allowfromagvs(::CamelMessage_AllowFromAgvs* allowfromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (allowfromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allowfromagvs);
    if (message_arena != submessage_arena) {
      allowfromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowfromagvs, submessage_arena);
    }
    set_has_allowfromagvs();
    _impl_.onlyone_.allowfromagvs_ = allowfromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.allowFromAgvs)
}
void CamelMessage::set_allocated_reporttoagvs(::CamelMessage_ReportToAgvs* reporttoagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (reporttoagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reporttoagvs);
    if (message_arena != submessage_arena) {
      reporttoagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reporttoagvs, submessage_arena);
    }
    set_has_reporttoagvs();
    _impl_.onlyone_.reporttoagvs_ = reporttoagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.reportToAgvs)
}
void CamelMessage::set_allocated_missonfromagvs(::CamelMessage_MissonFromAgvs* missonfromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (missonfromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(missonfromagvs);
    if (message_arena != submessage_arena) {
      missonfromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, missonfromagvs, submessage_arena);
    }
    set_has_missonfromagvs();
    _impl_.onlyone_.missonfromagvs_ = missonfromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.missonFromAgvs)
}
void CamelMessage::set_allocated_requesttoagvs(::CamelMessage_RequestToAgvs* requesttoagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (requesttoagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requesttoagvs);
    if (message_arena != submessage_arena) {
      requesttoagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requesttoagvs, submessage_arena);
    }
    set_has_requesttoagvs();
    _impl_.onlyone_.requesttoagvs_ = requesttoagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.requestToAgvs)
}
void CamelMessage::set_allocated_avoidareafromagvs(::CamelMessage_AvoidAreaFromAgvs* avoidareafromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (avoidareafromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avoidareafromagvs);
    if (message_arena != submessage_arena) {
      avoidareafromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoidareafromagvs, submessage_arena);
    }
    set_has_avoidareafromagvs();
    _impl_.onlyone_.avoidareafromagvs_ = avoidareafromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.avoidAreaFromAgvs)
}
void CamelMessage::set_allocated_requestfromagvs(::CamelMessage_RequestFromAgvs* requestfromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (requestfromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestfromagvs);
    if (message_arena != submessage_arena) {
      requestfromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestfromagvs, submessage_arena);
    }
    set_has_requestfromagvs();
    _impl_.onlyone_.requestfromagvs_ = requestfromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.requestFromAgvs)
}
void CamelMessage::set_allocated_collaborative(::Collaborative* collaborative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (collaborative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(collaborative));
    if (message_arena != submessage_arena) {
      collaborative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collaborative, submessage_arena);
    }
    set_has_collaborative();
    _impl_.onlyone_.collaborative_ = collaborative;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.collaborative)
}
void CamelMessage::clear_collaborative() {
  if (_internal_has_collaborative()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.collaborative_;
    }
    clear_has_onlyone();
  }
}
void CamelMessage::set_allocated_perioddatatoagvs(::CamelMessage_PeriodDataToAgvs* perioddatatoagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (perioddatatoagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perioddatatoagvs);
    if (message_arena != submessage_arena) {
      perioddatatoagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perioddatatoagvs, submessage_arena);
    }
    set_has_perioddatatoagvs();
    _impl_.onlyone_.perioddatatoagvs_ = perioddatatoagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.periodDataToAgvs)
}
void CamelMessage::set_allocated_perioddatafromagvs(::CamelMessage_PeriodDataFromAgvs* perioddatafromagvs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_onlyone();
  if (perioddatafromagvs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perioddatafromagvs);
    if (message_arena != submessage_arena) {
      perioddatafromagvs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perioddatafromagvs, submessage_arena);
    }
    set_has_perioddatafromagvs();
    _impl_.onlyone_.perioddatafromagvs_ = perioddatafromagvs;
  }
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.periodDataFromAgvs)
}
CamelMessage::CamelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamelMessage)
}
CamelMessage::CamelMessage(const CamelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.onlyone_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_onlyone();
  switch (from.onlyone_case()) {
    case kAllowFromAgvs: {
      _this->_internal_mutable_allowfromagvs()->::CamelMessage_AllowFromAgvs::MergeFrom(
          from._internal_allowfromagvs());
      break;
    }
    case kReportToAgvs: {
      _this->_internal_mutable_reporttoagvs()->::CamelMessage_ReportToAgvs::MergeFrom(
          from._internal_reporttoagvs());
      break;
    }
    case kMissonFromAgvs: {
      _this->_internal_mutable_missonfromagvs()->::CamelMessage_MissonFromAgvs::MergeFrom(
          from._internal_missonfromagvs());
      break;
    }
    case kRequestToAgvs: {
      _this->_internal_mutable_requesttoagvs()->::CamelMessage_RequestToAgvs::MergeFrom(
          from._internal_requesttoagvs());
      break;
    }
    case kAvoidAreaFromAgvs: {
      _this->_internal_mutable_avoidareafromagvs()->::CamelMessage_AvoidAreaFromAgvs::MergeFrom(
          from._internal_avoidareafromagvs());
      break;
    }
    case kRequestFromAgvs: {
      _this->_internal_mutable_requestfromagvs()->::CamelMessage_RequestFromAgvs::MergeFrom(
          from._internal_requestfromagvs());
      break;
    }
    case kCollaborative: {
      _this->_internal_mutable_collaborative()->::Collaborative::MergeFrom(
          from._internal_collaborative());
      break;
    }
    case kPeriodDataToAgvs: {
      _this->_internal_mutable_perioddatatoagvs()->::CamelMessage_PeriodDataToAgvs::MergeFrom(
          from._internal_perioddatatoagvs());
      break;
    }
    case kPeriodDataFromAgvs: {
      _this->_internal_mutable_perioddatafromagvs()->::CamelMessage_PeriodDataFromAgvs::MergeFrom(
          from._internal_perioddatafromagvs());
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CamelMessage)
}

inline void CamelMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.onlyone_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_onlyone();
}

CamelMessage::~CamelMessage() {
  // @@protoc_insertion_point(destructor:CamelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_onlyone()) {
    clear_onlyone();
  }
}

void CamelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamelMessage::clear_onlyone() {
// @@protoc_insertion_point(one_of_clear_start:CamelMessage)
  switch (onlyone_case()) {
    case kAllowFromAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.allowfromagvs_;
      }
      break;
    }
    case kReportToAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.reporttoagvs_;
      }
      break;
    }
    case kMissonFromAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.missonfromagvs_;
      }
      break;
    }
    case kRequestToAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.requesttoagvs_;
      }
      break;
    }
    case kAvoidAreaFromAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.avoidareafromagvs_;
      }
      break;
    }
    case kRequestFromAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.requestfromagvs_;
      }
      break;
    }
    case kCollaborative: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.collaborative_;
      }
      break;
    }
    case kPeriodDataToAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.perioddatatoagvs_;
      }
      break;
    }
    case kPeriodDataFromAgvs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.onlyone_.perioddatafromagvs_;
      }
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONLYONE_NOT_SET;
}


void CamelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CamelMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_onlyone();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CamelMessage.AllowFromAgvs allowFromAgvs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowfromagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.ReportToAgvs reportToAgvs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reporttoagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.MissonFromAgvs missonFromAgvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missonfromagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.RequestToAgvs requestToAgvs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requesttoagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.AvoidAreaFromAgvs avoidAreaFromAgvs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_avoidareafromagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.RequestFromAgvs requestFromAgvs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestfromagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Collaborative collaborative = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_collaborative(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.PeriodDataToAgvs periodDataToAgvs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_perioddatatoagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .CamelMessage.PeriodDataFromAgvs periodDataFromAgvs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_perioddatafromagvs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamelMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamelMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CamelMessage.AllowFromAgvs allowFromAgvs = 1;
  if (_internal_has_allowfromagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::allowfromagvs(this),
        _Internal::allowfromagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.ReportToAgvs reportToAgvs = 2;
  if (_internal_has_reporttoagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reporttoagvs(this),
        _Internal::reporttoagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.MissonFromAgvs missonFromAgvs = 3;
  if (_internal_has_missonfromagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::missonfromagvs(this),
        _Internal::missonfromagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.RequestToAgvs requestToAgvs = 4;
  if (_internal_has_requesttoagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::requesttoagvs(this),
        _Internal::requesttoagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.AvoidAreaFromAgvs avoidAreaFromAgvs = 5;
  if (_internal_has_avoidareafromagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::avoidareafromagvs(this),
        _Internal::avoidareafromagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.RequestFromAgvs requestFromAgvs = 6;
  if (_internal_has_requestfromagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::requestfromagvs(this),
        _Internal::requestfromagvs(this).GetCachedSize(), target, stream);
  }

  // .Collaborative collaborative = 7;
  if (_internal_has_collaborative()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::collaborative(this),
        _Internal::collaborative(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.PeriodDataToAgvs periodDataToAgvs = 8;
  if (_internal_has_perioddatatoagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::perioddatatoagvs(this),
        _Internal::perioddatatoagvs(this).GetCachedSize(), target, stream);
  }

  // .CamelMessage.PeriodDataFromAgvs periodDataFromAgvs = 9;
  if (_internal_has_perioddatafromagvs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::perioddatafromagvs(this),
        _Internal::perioddatafromagvs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamelMessage)
  return target;
}

size_t CamelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamelMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (onlyone_case()) {
    // .CamelMessage.AllowFromAgvs allowFromAgvs = 1;
    case kAllowFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.allowfromagvs_);
      break;
    }
    // .CamelMessage.ReportToAgvs reportToAgvs = 2;
    case kReportToAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.reporttoagvs_);
      break;
    }
    // .CamelMessage.MissonFromAgvs missonFromAgvs = 3;
    case kMissonFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.missonfromagvs_);
      break;
    }
    // .CamelMessage.RequestToAgvs requestToAgvs = 4;
    case kRequestToAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.requesttoagvs_);
      break;
    }
    // .CamelMessage.AvoidAreaFromAgvs avoidAreaFromAgvs = 5;
    case kAvoidAreaFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.avoidareafromagvs_);
      break;
    }
    // .CamelMessage.RequestFromAgvs requestFromAgvs = 6;
    case kRequestFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.requestfromagvs_);
      break;
    }
    // .Collaborative collaborative = 7;
    case kCollaborative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.collaborative_);
      break;
    }
    // .CamelMessage.PeriodDataToAgvs periodDataToAgvs = 8;
    case kPeriodDataToAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.perioddatatoagvs_);
      break;
    }
    // .CamelMessage.PeriodDataFromAgvs periodDataFromAgvs = 9;
    case kPeriodDataFromAgvs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlyone_.perioddatafromagvs_);
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamelMessage::GetClassData() const { return &_class_data_; }


void CamelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamelMessage*>(&to_msg);
  auto& from = static_cast<const CamelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamelMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.onlyone_case()) {
    case kAllowFromAgvs: {
      _this->_internal_mutable_allowfromagvs()->::CamelMessage_AllowFromAgvs::MergeFrom(
          from._internal_allowfromagvs());
      break;
    }
    case kReportToAgvs: {
      _this->_internal_mutable_reporttoagvs()->::CamelMessage_ReportToAgvs::MergeFrom(
          from._internal_reporttoagvs());
      break;
    }
    case kMissonFromAgvs: {
      _this->_internal_mutable_missonfromagvs()->::CamelMessage_MissonFromAgvs::MergeFrom(
          from._internal_missonfromagvs());
      break;
    }
    case kRequestToAgvs: {
      _this->_internal_mutable_requesttoagvs()->::CamelMessage_RequestToAgvs::MergeFrom(
          from._internal_requesttoagvs());
      break;
    }
    case kAvoidAreaFromAgvs: {
      _this->_internal_mutable_avoidareafromagvs()->::CamelMessage_AvoidAreaFromAgvs::MergeFrom(
          from._internal_avoidareafromagvs());
      break;
    }
    case kRequestFromAgvs: {
      _this->_internal_mutable_requestfromagvs()->::CamelMessage_RequestFromAgvs::MergeFrom(
          from._internal_requestfromagvs());
      break;
    }
    case kCollaborative: {
      _this->_internal_mutable_collaborative()->::Collaborative::MergeFrom(
          from._internal_collaborative());
      break;
    }
    case kPeriodDataToAgvs: {
      _this->_internal_mutable_perioddatatoagvs()->::CamelMessage_PeriodDataToAgvs::MergeFrom(
          from._internal_perioddatatoagvs());
      break;
    }
    case kPeriodDataFromAgvs: {
      _this->_internal_mutable_perioddatafromagvs()->::CamelMessage_PeriodDataFromAgvs::MergeFrom(
          from._internal_perioddatafromagvs());
      break;
    }
    case ONLYONE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamelMessage::CopyFrom(const CamelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamelMessage::IsInitialized() const {
  return true;
}

void CamelMessage::InternalSwap(CamelMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.onlyone_, other->_impl_.onlyone_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CamelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dagvs_2eproto_getter, &descriptor_table_camel_2dagvs_2eproto_once,
      file_level_metadata_camel_2dagvs_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CamelMessage_AllowFromAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_AllowFromAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_AllowFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_ReportToAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_ReportToAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_ReportToAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_MissonFromAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_MissonFromAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_MissonFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_AvoidAreaFromAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_AvoidAreaFromAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_AvoidAreaFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_RequestToAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_RequestToAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_RequestToAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_RequestFromAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_RequestFromAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_RequestFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_PeriodDataToAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_PeriodDataToAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_PeriodDataToAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage_PeriodDataFromAgvs*
Arena::CreateMaybeMessage< ::CamelMessage_PeriodDataFromAgvs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage_PeriodDataFromAgvs >(arena);
}
template<> PROTOBUF_NOINLINE ::CamelMessage*
Arena::CreateMaybeMessage< ::CamelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamelMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
