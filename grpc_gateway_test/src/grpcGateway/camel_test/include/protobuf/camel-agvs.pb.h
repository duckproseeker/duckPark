// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-agvs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "camel-common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_camel_2dagvs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_camel_2dagvs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_camel_2dagvs_2eproto;
class CamelMessage;
struct CamelMessageDefaultTypeInternal;
extern CamelMessageDefaultTypeInternal _CamelMessage_default_instance_;
class CamelMessage_AllowFromAgvs;
struct CamelMessage_AllowFromAgvsDefaultTypeInternal;
extern CamelMessage_AllowFromAgvsDefaultTypeInternal _CamelMessage_AllowFromAgvs_default_instance_;
class CamelMessage_AvoidAreaFromAgvs;
struct CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal;
extern CamelMessage_AvoidAreaFromAgvsDefaultTypeInternal _CamelMessage_AvoidAreaFromAgvs_default_instance_;
class CamelMessage_MissonFromAgvs;
struct CamelMessage_MissonFromAgvsDefaultTypeInternal;
extern CamelMessage_MissonFromAgvsDefaultTypeInternal _CamelMessage_MissonFromAgvs_default_instance_;
class CamelMessage_PeriodDataFromAgvs;
struct CamelMessage_PeriodDataFromAgvsDefaultTypeInternal;
extern CamelMessage_PeriodDataFromAgvsDefaultTypeInternal _CamelMessage_PeriodDataFromAgvs_default_instance_;
class CamelMessage_PeriodDataToAgvs;
struct CamelMessage_PeriodDataToAgvsDefaultTypeInternal;
extern CamelMessage_PeriodDataToAgvsDefaultTypeInternal _CamelMessage_PeriodDataToAgvs_default_instance_;
class CamelMessage_ReportToAgvs;
struct CamelMessage_ReportToAgvsDefaultTypeInternal;
extern CamelMessage_ReportToAgvsDefaultTypeInternal _CamelMessage_ReportToAgvs_default_instance_;
class CamelMessage_RequestFromAgvs;
struct CamelMessage_RequestFromAgvsDefaultTypeInternal;
extern CamelMessage_RequestFromAgvsDefaultTypeInternal _CamelMessage_RequestFromAgvs_default_instance_;
class CamelMessage_RequestToAgvs;
struct CamelMessage_RequestToAgvsDefaultTypeInternal;
extern CamelMessage_RequestToAgvsDefaultTypeInternal _CamelMessage_RequestToAgvs_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CamelMessage* Arena::CreateMaybeMessage<::CamelMessage>(Arena*);
template<> ::CamelMessage_AllowFromAgvs* Arena::CreateMaybeMessage<::CamelMessage_AllowFromAgvs>(Arena*);
template<> ::CamelMessage_AvoidAreaFromAgvs* Arena::CreateMaybeMessage<::CamelMessage_AvoidAreaFromAgvs>(Arena*);
template<> ::CamelMessage_MissonFromAgvs* Arena::CreateMaybeMessage<::CamelMessage_MissonFromAgvs>(Arena*);
template<> ::CamelMessage_PeriodDataFromAgvs* Arena::CreateMaybeMessage<::CamelMessage_PeriodDataFromAgvs>(Arena*);
template<> ::CamelMessage_PeriodDataToAgvs* Arena::CreateMaybeMessage<::CamelMessage_PeriodDataToAgvs>(Arena*);
template<> ::CamelMessage_ReportToAgvs* Arena::CreateMaybeMessage<::CamelMessage_ReportToAgvs>(Arena*);
template<> ::CamelMessage_RequestFromAgvs* Arena::CreateMaybeMessage<::CamelMessage_RequestFromAgvs>(Arena*);
template<> ::CamelMessage_RequestToAgvs* Arena::CreateMaybeMessage<::CamelMessage_RequestToAgvs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CamelMessage_AllowFromAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.AllowFromAgvs) */ {
 public:
  inline CamelMessage_AllowFromAgvs() : CamelMessage_AllowFromAgvs(nullptr) {}
  ~CamelMessage_AllowFromAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_AllowFromAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_AllowFromAgvs(const CamelMessage_AllowFromAgvs& from);
  CamelMessage_AllowFromAgvs(CamelMessage_AllowFromAgvs&& from) noexcept
    : CamelMessage_AllowFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_AllowFromAgvs& operator=(const CamelMessage_AllowFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_AllowFromAgvs& operator=(CamelMessage_AllowFromAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_AllowFromAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_AllowFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_AllowFromAgvs*>(
               &_CamelMessage_AllowFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CamelMessage_AllowFromAgvs& a, CamelMessage_AllowFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_AllowFromAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_AllowFromAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_AllowFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_AllowFromAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_AllowFromAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_AllowFromAgvs& from) {
    CamelMessage_AllowFromAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_AllowFromAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.AllowFromAgvs";
  }
  protected:
  explicit CamelMessage_AllowFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmsFieldNumber = 8,
    kCurrentStationFieldNumber = 1,
    kTargetStationFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kChargingFieldNumber = 4,
    kEmergencyFieldNumber = 5,
    kIsUseableFieldNumber = 6,
    kHasTaskFieldNumber = 7,
    kSystemPauseFieldNumber = 9,
    kTaskStatusFieldNumber = 10,
  };
  // repeated .Alarm alarms = 8;
  int alarms_size() const;
  private:
  int _internal_alarms_size() const;
  public:
  void clear_alarms();
  ::Alarm* mutable_alarms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >*
      mutable_alarms();
  private:
  const ::Alarm& _internal_alarms(int index) const;
  ::Alarm* _internal_add_alarms();
  public:
  const ::Alarm& alarms(int index) const;
  ::Alarm* add_alarms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >&
      alarms() const;

  // string currentStation = 1;
  void clear_currentstation();
  const std::string& currentstation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentstation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentstation();
  PROTOBUF_NODISCARD std::string* release_currentstation();
  void set_allocated_currentstation(std::string* currentstation);
  private:
  const std::string& _internal_currentstation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentstation(const std::string& value);
  std::string* _internal_mutable_currentstation();
  public:

  // string targetStation = 2;
  void clear_targetstation();
  const std::string& targetstation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetstation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetstation();
  PROTOBUF_NODISCARD std::string* release_targetstation();
  void set_allocated_targetstation(std::string* targetstation);
  private:
  const std::string& _internal_targetstation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetstation(const std::string& value);
  std::string* _internal_mutable_targetstation();
  public:

  // bytes errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // .ChargeCmd charging = 4;
  bool has_charging() const;
  private:
  bool _internal_has_charging() const;
  public:
  void clear_charging();
  const ::ChargeCmd& charging() const;
  PROTOBUF_NODISCARD ::ChargeCmd* release_charging();
  ::ChargeCmd* mutable_charging();
  void set_allocated_charging(::ChargeCmd* charging);
  private:
  const ::ChargeCmd& _internal_charging() const;
  ::ChargeCmd* _internal_mutable_charging();
  public:
  void unsafe_arena_set_allocated_charging(
      ::ChargeCmd* charging);
  ::ChargeCmd* unsafe_arena_release_charging();

  // bool emergency = 5;
  void clear_emergency();
  bool emergency() const;
  void set_emergency(bool value);
  private:
  bool _internal_emergency() const;
  void _internal_set_emergency(bool value);
  public:

  // bool isUseable = 6;
  void clear_isuseable();
  bool isuseable() const;
  void set_isuseable(bool value);
  private:
  bool _internal_isuseable() const;
  void _internal_set_isuseable(bool value);
  public:

  // bool hasTask = 7;
  void clear_hastask();
  bool hastask() const;
  void set_hastask(bool value);
  private:
  bool _internal_hastask() const;
  void _internal_set_hastask(bool value);
  public:

  // .DoAction systemPause = 9;
  void clear_systempause();
  ::DoAction systempause() const;
  void set_systempause(::DoAction value);
  private:
  ::DoAction _internal_systempause() const;
  void _internal_set_systempause(::DoAction value);
  public:

  // .AgvsTaskStatus taskStatus = 10;
  void clear_taskstatus();
  ::AgvsTaskStatus taskstatus() const;
  void set_taskstatus(::AgvsTaskStatus value);
  private:
  ::AgvsTaskStatus _internal_taskstatus() const;
  void _internal_set_taskstatus(::AgvsTaskStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.AllowFromAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm > alarms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentstation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetstation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    ::ChargeCmd* charging_;
    bool emergency_;
    bool isuseable_;
    bool hastask_;
    int systempause_;
    int taskstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_ReportToAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.ReportToAgvs) */ {
 public:
  inline CamelMessage_ReportToAgvs() : CamelMessage_ReportToAgvs(nullptr) {}
  ~CamelMessage_ReportToAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_ReportToAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_ReportToAgvs(const CamelMessage_ReportToAgvs& from);
  CamelMessage_ReportToAgvs(CamelMessage_ReportToAgvs&& from) noexcept
    : CamelMessage_ReportToAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_ReportToAgvs& operator=(const CamelMessage_ReportToAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_ReportToAgvs& operator=(CamelMessage_ReportToAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_ReportToAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_ReportToAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_ReportToAgvs*>(
               &_CamelMessage_ReportToAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CamelMessage_ReportToAgvs& a, CamelMessage_ReportToAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_ReportToAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_ReportToAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_ReportToAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_ReportToAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_ReportToAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_ReportToAgvs& from) {
    CamelMessage_ReportToAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_ReportToAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.ReportToAgvs";
  }
  protected:
  explicit CamelMessage_ReportToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlarmsFieldNumber = 7,
    kCarNameFieldNumber = 1,
    kCurrentStationFieldNumber = 2,
    kErrorMessageFieldNumber = 6,
    kIPFieldNumber = 9,
    kPositionFieldNumber = 3,
    kBatteryFieldNumber = 4,
    kCarInfoFieldNumber = 5,
    kIsPullingFieldNumber = 8,
    kCollaborativeFieldNumber = 10,
  };
  // repeated .Alarm alarms = 7;
  int alarms_size() const;
  private:
  int _internal_alarms_size() const;
  public:
  void clear_alarms();
  ::Alarm* mutable_alarms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >*
      mutable_alarms();
  private:
  const ::Alarm& _internal_alarms(int index) const;
  ::Alarm* _internal_add_alarms();
  public:
  const ::Alarm& alarms(int index) const;
  ::Alarm* add_alarms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >&
      alarms() const;

  // string carName = 1;
  void clear_carname();
  const std::string& carname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_carname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_carname();
  PROTOBUF_NODISCARD std::string* release_carname();
  void set_allocated_carname(std::string* carname);
  private:
  const std::string& _internal_carname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_carname(const std::string& value);
  std::string* _internal_mutable_carname();
  public:

  // string currentStation = 2;
  void clear_currentstation();
  const std::string& currentstation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentstation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentstation();
  PROTOBUF_NODISCARD std::string* release_currentstation();
  void set_allocated_currentstation(std::string* currentstation);
  private:
  const std::string& _internal_currentstation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentstation(const std::string& value);
  std::string* _internal_mutable_currentstation();
  public:

  // bytes errorMessage = 6;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // string IP = 9;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .Position position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Position& position() const;
  PROTOBUF_NODISCARD ::Position* release_position();
  ::Position* mutable_position();
  void set_allocated_position(::Position* position);
  private:
  const ::Position& _internal_position() const;
  ::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Position* position);
  ::Position* unsafe_arena_release_position();

  // .Battery battery = 4;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::Battery& battery() const;
  PROTOBUF_NODISCARD ::Battery* release_battery();
  ::Battery* mutable_battery();
  void set_allocated_battery(::Battery* battery);
  private:
  const ::Battery& _internal_battery() const;
  ::Battery* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::Battery* battery);
  ::Battery* unsafe_arena_release_battery();

  // .CarHWInfo carInfo = 5;
  bool has_carinfo() const;
  private:
  bool _internal_has_carinfo() const;
  public:
  void clear_carinfo();
  const ::CarHWInfo& carinfo() const;
  PROTOBUF_NODISCARD ::CarHWInfo* release_carinfo();
  ::CarHWInfo* mutable_carinfo();
  void set_allocated_carinfo(::CarHWInfo* carinfo);
  private:
  const ::CarHWInfo& _internal_carinfo() const;
  ::CarHWInfo* _internal_mutable_carinfo();
  public:
  void unsafe_arena_set_allocated_carinfo(
      ::CarHWInfo* carinfo);
  ::CarHWInfo* unsafe_arena_release_carinfo();

  // bool isPulling = 8;
  void clear_ispulling();
  bool ispulling() const;
  void set_ispulling(bool value);
  private:
  bool _internal_ispulling() const;
  void _internal_set_ispulling(bool value);
  public:

  // bool collaborative = 10;
  void clear_collaborative();
  bool collaborative() const;
  void set_collaborative(bool value);
  private:
  bool _internal_collaborative() const;
  void _internal_set_collaborative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.ReportToAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm > alarms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr carname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentstation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::Position* position_;
    ::Battery* battery_;
    ::CarHWInfo* carinfo_;
    bool ispulling_;
    bool collaborative_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_MissonFromAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.MissonFromAgvs) */ {
 public:
  inline CamelMessage_MissonFromAgvs() : CamelMessage_MissonFromAgvs(nullptr) {}
  ~CamelMessage_MissonFromAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_MissonFromAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_MissonFromAgvs(const CamelMessage_MissonFromAgvs& from);
  CamelMessage_MissonFromAgvs(CamelMessage_MissonFromAgvs&& from) noexcept
    : CamelMessage_MissonFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_MissonFromAgvs& operator=(const CamelMessage_MissonFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_MissonFromAgvs& operator=(CamelMessage_MissonFromAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_MissonFromAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_MissonFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_MissonFromAgvs*>(
               &_CamelMessage_MissonFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CamelMessage_MissonFromAgvs& a, CamelMessage_MissonFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_MissonFromAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_MissonFromAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_MissonFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_MissonFromAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_MissonFromAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_MissonFromAgvs& from) {
    CamelMessage_MissonFromAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_MissonFromAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.MissonFromAgvs";
  }
  protected:
  explicit CamelMessage_MissonFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kTargetStationFieldNumber = 3,
    kContextTaskFieldNumber = 2,
  };
  // string route = 1;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // string targetStation = 3;
  void clear_targetstation();
  const std::string& targetstation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetstation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetstation();
  PROTOBUF_NODISCARD std::string* release_targetstation();
  void set_allocated_targetstation(std::string* targetstation);
  private:
  const std::string& _internal_targetstation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetstation(const std::string& value);
  std::string* _internal_mutable_targetstation();
  public:

  // .ContextTask contextTask = 2;
  bool has_contexttask() const;
  private:
  bool _internal_has_contexttask() const;
  public:
  void clear_contexttask();
  const ::ContextTask& contexttask() const;
  PROTOBUF_NODISCARD ::ContextTask* release_contexttask();
  ::ContextTask* mutable_contexttask();
  void set_allocated_contexttask(::ContextTask* contexttask);
  private:
  const ::ContextTask& _internal_contexttask() const;
  ::ContextTask* _internal_mutable_contexttask();
  public:
  void unsafe_arena_set_allocated_contexttask(
      ::ContextTask* contexttask);
  ::ContextTask* unsafe_arena_release_contexttask();

  // @@protoc_insertion_point(class_scope:CamelMessage.MissonFromAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetstation_;
    ::ContextTask* contexttask_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_AvoidAreaFromAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.AvoidAreaFromAgvs) */ {
 public:
  inline CamelMessage_AvoidAreaFromAgvs() : CamelMessage_AvoidAreaFromAgvs(nullptr) {}
  ~CamelMessage_AvoidAreaFromAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_AvoidAreaFromAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_AvoidAreaFromAgvs(const CamelMessage_AvoidAreaFromAgvs& from);
  CamelMessage_AvoidAreaFromAgvs(CamelMessage_AvoidAreaFromAgvs&& from) noexcept
    : CamelMessage_AvoidAreaFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_AvoidAreaFromAgvs& operator=(const CamelMessage_AvoidAreaFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_AvoidAreaFromAgvs& operator=(CamelMessage_AvoidAreaFromAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_AvoidAreaFromAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_AvoidAreaFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_AvoidAreaFromAgvs*>(
               &_CamelMessage_AvoidAreaFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CamelMessage_AvoidAreaFromAgvs& a, CamelMessage_AvoidAreaFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_AvoidAreaFromAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_AvoidAreaFromAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_AvoidAreaFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_AvoidAreaFromAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_AvoidAreaFromAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_AvoidAreaFromAgvs& from) {
    CamelMessage_AvoidAreaFromAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_AvoidAreaFromAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.AvoidAreaFromAgvs";
  }
  protected:
  explicit CamelMessage_AvoidAreaFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvoidAreaFieldNumber = 1,
  };
  // .AvoidanceAreaCollection avoidArea = 1;
  bool has_avoidarea() const;
  private:
  bool _internal_has_avoidarea() const;
  public:
  void clear_avoidarea();
  const ::AvoidanceAreaCollection& avoidarea() const;
  PROTOBUF_NODISCARD ::AvoidanceAreaCollection* release_avoidarea();
  ::AvoidanceAreaCollection* mutable_avoidarea();
  void set_allocated_avoidarea(::AvoidanceAreaCollection* avoidarea);
  private:
  const ::AvoidanceAreaCollection& _internal_avoidarea() const;
  ::AvoidanceAreaCollection* _internal_mutable_avoidarea();
  public:
  void unsafe_arena_set_allocated_avoidarea(
      ::AvoidanceAreaCollection* avoidarea);
  ::AvoidanceAreaCollection* unsafe_arena_release_avoidarea();

  // @@protoc_insertion_point(class_scope:CamelMessage.AvoidAreaFromAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::AvoidanceAreaCollection* avoidarea_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_RequestToAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.RequestToAgvs) */ {
 public:
  inline CamelMessage_RequestToAgvs() : CamelMessage_RequestToAgvs(nullptr) {}
  ~CamelMessage_RequestToAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_RequestToAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_RequestToAgvs(const CamelMessage_RequestToAgvs& from);
  CamelMessage_RequestToAgvs(CamelMessage_RequestToAgvs&& from) noexcept
    : CamelMessage_RequestToAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_RequestToAgvs& operator=(const CamelMessage_RequestToAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_RequestToAgvs& operator=(CamelMessage_RequestToAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_RequestToAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_RequestToAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_RequestToAgvs*>(
               &_CamelMessage_RequestToAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CamelMessage_RequestToAgvs& a, CamelMessage_RequestToAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_RequestToAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_RequestToAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_RequestToAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_RequestToAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_RequestToAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_RequestToAgvs& from) {
    CamelMessage_RequestToAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_RequestToAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.RequestToAgvs";
  }
  protected:
  explicit CamelMessage_RequestToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyRotueFieldNumber = 7,
    kManualStationFieldNumber = 8,
    kStrParamFieldNumber = 20,
    kIPFieldNumber = 21,
    kGetMissonInfoFieldNumber = 1,
    kSetUseableFieldNumber = 2,
    kCancelTaskFieldNumber = 3,
    kRequestChargingFieldNumber = 4,
    kUnlockFieldNumber = 5,
    kLiftEmergencyFieldNumber = 6,
    kAvoidAreaOperFieldNumber = 9,
    kInitialTrafficFieldNumber = 10,
    kTrafficRecoveryFieldNumber = 11,
    kComplishTaskFieldNumber = 12,
    kNextTaskFlowFieldNumber = 13,
  };
  // string applyRotue = 7;
  void clear_applyrotue();
  const std::string& applyrotue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_applyrotue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_applyrotue();
  PROTOBUF_NODISCARD std::string* release_applyrotue();
  void set_allocated_applyrotue(std::string* applyrotue);
  private:
  const std::string& _internal_applyrotue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_applyrotue(const std::string& value);
  std::string* _internal_mutable_applyrotue();
  public:

  // string manualStation = 8;
  void clear_manualstation();
  const std::string& manualstation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manualstation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manualstation();
  PROTOBUF_NODISCARD std::string* release_manualstation();
  void set_allocated_manualstation(std::string* manualstation);
  private:
  const std::string& _internal_manualstation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manualstation(const std::string& value);
  std::string* _internal_mutable_manualstation();
  public:

  // string strParam = 20;
  void clear_strparam();
  const std::string& strparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strparam();
  PROTOBUF_NODISCARD std::string* release_strparam();
  void set_allocated_strparam(std::string* strparam);
  private:
  const std::string& _internal_strparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strparam(const std::string& value);
  std::string* _internal_mutable_strparam();
  public:

  // string IP = 21;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .DoAction getMissonInfo = 1;
  void clear_getmissoninfo();
  ::DoAction getmissoninfo() const;
  void set_getmissoninfo(::DoAction value);
  private:
  ::DoAction _internal_getmissoninfo() const;
  void _internal_set_getmissoninfo(::DoAction value);
  public:

  // .DoAction setUseable = 2;
  void clear_setuseable();
  ::DoAction setuseable() const;
  void set_setuseable(::DoAction value);
  private:
  ::DoAction _internal_setuseable() const;
  void _internal_set_setuseable(::DoAction value);
  public:

  // .DoAction cancelTask = 3;
  void clear_canceltask();
  ::DoAction canceltask() const;
  void set_canceltask(::DoAction value);
  private:
  ::DoAction _internal_canceltask() const;
  void _internal_set_canceltask(::DoAction value);
  public:

  // .DoAction requestCharging = 4;
  void clear_requestcharging();
  ::DoAction requestcharging() const;
  void set_requestcharging(::DoAction value);
  private:
  ::DoAction _internal_requestcharging() const;
  void _internal_set_requestcharging(::DoAction value);
  public:

  // .DoAction unlock = 5;
  void clear_unlock();
  ::DoAction unlock() const;
  void set_unlock(::DoAction value);
  private:
  ::DoAction _internal_unlock() const;
  void _internal_set_unlock(::DoAction value);
  public:

  // .DoAction liftEmergency = 6;
  void clear_liftemergency();
  ::DoAction liftemergency() const;
  void set_liftemergency(::DoAction value);
  private:
  ::DoAction _internal_liftemergency() const;
  void _internal_set_liftemergency(::DoAction value);
  public:

  // .DoAction avoidAreaOper = 9;
  void clear_avoidareaoper();
  ::DoAction avoidareaoper() const;
  void set_avoidareaoper(::DoAction value);
  private:
  ::DoAction _internal_avoidareaoper() const;
  void _internal_set_avoidareaoper(::DoAction value);
  public:

  // .DoAction initialTraffic = 10;
  void clear_initialtraffic();
  ::DoAction initialtraffic() const;
  void set_initialtraffic(::DoAction value);
  private:
  ::DoAction _internal_initialtraffic() const;
  void _internal_set_initialtraffic(::DoAction value);
  public:

  // .DoAction trafficRecovery = 11;
  void clear_trafficrecovery();
  ::DoAction trafficrecovery() const;
  void set_trafficrecovery(::DoAction value);
  private:
  ::DoAction _internal_trafficrecovery() const;
  void _internal_set_trafficrecovery(::DoAction value);
  public:

  // .DoAction complishTask = 12;
  void clear_complishtask();
  ::DoAction complishtask() const;
  void set_complishtask(::DoAction value);
  private:
  ::DoAction _internal_complishtask() const;
  void _internal_set_complishtask(::DoAction value);
  public:

  // .DoAction nextTaskFlow = 13;
  void clear_nexttaskflow();
  ::DoAction nexttaskflow() const;
  void set_nexttaskflow(::DoAction value);
  private:
  ::DoAction _internal_nexttaskflow() const;
  void _internal_set_nexttaskflow(::DoAction value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.RequestToAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr applyrotue_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manualstation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strparam_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int getmissoninfo_;
    int setuseable_;
    int canceltask_;
    int requestcharging_;
    int unlock_;
    int liftemergency_;
    int avoidareaoper_;
    int initialtraffic_;
    int trafficrecovery_;
    int complishtask_;
    int nexttaskflow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_RequestFromAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.RequestFromAgvs) */ {
 public:
  inline CamelMessage_RequestFromAgvs() : CamelMessage_RequestFromAgvs(nullptr) {}
  ~CamelMessage_RequestFromAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_RequestFromAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_RequestFromAgvs(const CamelMessage_RequestFromAgvs& from);
  CamelMessage_RequestFromAgvs(CamelMessage_RequestFromAgvs&& from) noexcept
    : CamelMessage_RequestFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_RequestFromAgvs& operator=(const CamelMessage_RequestFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_RequestFromAgvs& operator=(CamelMessage_RequestFromAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_RequestFromAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_RequestFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_RequestFromAgvs*>(
               &_CamelMessage_RequestFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CamelMessage_RequestFromAgvs& a, CamelMessage_RequestFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_RequestFromAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_RequestFromAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_RequestFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_RequestFromAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_RequestFromAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_RequestFromAgvs& from) {
    CamelMessage_RequestFromAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_RequestFromAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.RequestFromAgvs";
  }
  protected:
  explicit CamelMessage_RequestFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChargingFieldNumber = 1,
    kEmergencyFieldNumber = 2,
  };
  // .ChargeCmd charging = 1;
  bool has_charging() const;
  private:
  bool _internal_has_charging() const;
  public:
  void clear_charging();
  const ::ChargeCmd& charging() const;
  PROTOBUF_NODISCARD ::ChargeCmd* release_charging();
  ::ChargeCmd* mutable_charging();
  void set_allocated_charging(::ChargeCmd* charging);
  private:
  const ::ChargeCmd& _internal_charging() const;
  ::ChargeCmd* _internal_mutable_charging();
  public:
  void unsafe_arena_set_allocated_charging(
      ::ChargeCmd* charging);
  ::ChargeCmd* unsafe_arena_release_charging();

  // .DoAction emergency = 2;
  void clear_emergency();
  ::DoAction emergency() const;
  void set_emergency(::DoAction value);
  private:
  ::DoAction _internal_emergency() const;
  void _internal_set_emergency(::DoAction value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.RequestFromAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ChargeCmd* charging_;
    int emergency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_PeriodDataToAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.PeriodDataToAgvs) */ {
 public:
  inline CamelMessage_PeriodDataToAgvs() : CamelMessage_PeriodDataToAgvs(nullptr) {}
  ~CamelMessage_PeriodDataToAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_PeriodDataToAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_PeriodDataToAgvs(const CamelMessage_PeriodDataToAgvs& from);
  CamelMessage_PeriodDataToAgvs(CamelMessage_PeriodDataToAgvs&& from) noexcept
    : CamelMessage_PeriodDataToAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_PeriodDataToAgvs& operator=(const CamelMessage_PeriodDataToAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_PeriodDataToAgvs& operator=(CamelMessage_PeriodDataToAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_PeriodDataToAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_PeriodDataToAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_PeriodDataToAgvs*>(
               &_CamelMessage_PeriodDataToAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CamelMessage_PeriodDataToAgvs& a, CamelMessage_PeriodDataToAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_PeriodDataToAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_PeriodDataToAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_PeriodDataToAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_PeriodDataToAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_PeriodDataToAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_PeriodDataToAgvs& from) {
    CamelMessage_PeriodDataToAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_PeriodDataToAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.PeriodDataToAgvs";
  }
  protected:
  explicit CamelMessage_PeriodDataToAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamelVersionFieldNumber = 1,
    kMapVersionFieldNumber = 2,
    kTotalOdometryFieldNumber = 3,
    kTotalRuntimeFieldNumber = 4,
    kTotalTaskOdometryFieldNumber = 5,
    kTotalTaskRuntimeFieldNumber = 6,
  };
  // string camelVersion = 1;
  void clear_camelversion();
  const std::string& camelversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camelversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camelversion();
  PROTOBUF_NODISCARD std::string* release_camelversion();
  void set_allocated_camelversion(std::string* camelversion);
  private:
  const std::string& _internal_camelversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camelversion(const std::string& value);
  std::string* _internal_mutable_camelversion();
  public:

  // string mapVersion = 2;
  void clear_mapversion();
  const std::string& mapversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapversion();
  PROTOBUF_NODISCARD std::string* release_mapversion();
  void set_allocated_mapversion(std::string* mapversion);
  private:
  const std::string& _internal_mapversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapversion(const std::string& value);
  std::string* _internal_mutable_mapversion();
  public:

  // float totalOdometry = 3;
  void clear_totalodometry();
  float totalodometry() const;
  void set_totalodometry(float value);
  private:
  float _internal_totalodometry() const;
  void _internal_set_totalodometry(float value);
  public:

  // float totalRuntime = 4;
  void clear_totalruntime();
  float totalruntime() const;
  void set_totalruntime(float value);
  private:
  float _internal_totalruntime() const;
  void _internal_set_totalruntime(float value);
  public:

  // float totalTaskOdometry = 5;
  void clear_totaltaskodometry();
  float totaltaskodometry() const;
  void set_totaltaskodometry(float value);
  private:
  float _internal_totaltaskodometry() const;
  void _internal_set_totaltaskodometry(float value);
  public:

  // float totalTaskRuntime = 6;
  void clear_totaltaskruntime();
  float totaltaskruntime() const;
  void set_totaltaskruntime(float value);
  private:
  float _internal_totaltaskruntime() const;
  void _internal_set_totaltaskruntime(float value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.PeriodDataToAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camelversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapversion_;
    float totalodometry_;
    float totalruntime_;
    float totaltaskodometry_;
    float totaltaskruntime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage_PeriodDataFromAgvs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage.PeriodDataFromAgvs) */ {
 public:
  inline CamelMessage_PeriodDataFromAgvs() : CamelMessage_PeriodDataFromAgvs(nullptr) {}
  ~CamelMessage_PeriodDataFromAgvs() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage_PeriodDataFromAgvs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage_PeriodDataFromAgvs(const CamelMessage_PeriodDataFromAgvs& from);
  CamelMessage_PeriodDataFromAgvs(CamelMessage_PeriodDataFromAgvs&& from) noexcept
    : CamelMessage_PeriodDataFromAgvs() {
    *this = ::std::move(from);
  }

  inline CamelMessage_PeriodDataFromAgvs& operator=(const CamelMessage_PeriodDataFromAgvs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage_PeriodDataFromAgvs& operator=(CamelMessage_PeriodDataFromAgvs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage_PeriodDataFromAgvs& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamelMessage_PeriodDataFromAgvs* internal_default_instance() {
    return reinterpret_cast<const CamelMessage_PeriodDataFromAgvs*>(
               &_CamelMessage_PeriodDataFromAgvs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CamelMessage_PeriodDataFromAgvs& a, CamelMessage_PeriodDataFromAgvs& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage_PeriodDataFromAgvs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage_PeriodDataFromAgvs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage_PeriodDataFromAgvs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage_PeriodDataFromAgvs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage_PeriodDataFromAgvs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage_PeriodDataFromAgvs& from) {
    CamelMessage_PeriodDataFromAgvs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage_PeriodDataFromAgvs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage.PeriodDataFromAgvs";
  }
  protected:
  explicit CamelMessage_PeriodDataFromAgvs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CamelMessage.PeriodDataFromAgvs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// -------------------------------------------------------------------

class CamelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamelMessage) */ {
 public:
  inline CamelMessage() : CamelMessage(nullptr) {}
  ~CamelMessage() override;
  explicit PROTOBUF_CONSTEXPR CamelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamelMessage(const CamelMessage& from);
  CamelMessage(CamelMessage&& from) noexcept
    : CamelMessage() {
    *this = ::std::move(from);
  }

  inline CamelMessage& operator=(const CamelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamelMessage& operator=(CamelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamelMessage& default_instance() {
    return *internal_default_instance();
  }
  enum OnlyoneCase {
    kAllowFromAgvs = 1,
    kReportToAgvs = 2,
    kMissonFromAgvs = 3,
    kRequestToAgvs = 4,
    kAvoidAreaFromAgvs = 5,
    kRequestFromAgvs = 6,
    kCollaborative = 7,
    kPeriodDataToAgvs = 8,
    kPeriodDataFromAgvs = 9,
    ONLYONE_NOT_SET = 0,
  };

  static inline const CamelMessage* internal_default_instance() {
    return reinterpret_cast<const CamelMessage*>(
               &_CamelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CamelMessage& a, CamelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CamelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamelMessage& from) {
    CamelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamelMessage";
  }
  protected:
  explicit CamelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CamelMessage_AllowFromAgvs AllowFromAgvs;
  typedef CamelMessage_ReportToAgvs ReportToAgvs;
  typedef CamelMessage_MissonFromAgvs MissonFromAgvs;
  typedef CamelMessage_AvoidAreaFromAgvs AvoidAreaFromAgvs;
  typedef CamelMessage_RequestToAgvs RequestToAgvs;
  typedef CamelMessage_RequestFromAgvs RequestFromAgvs;
  typedef CamelMessage_PeriodDataToAgvs PeriodDataToAgvs;
  typedef CamelMessage_PeriodDataFromAgvs PeriodDataFromAgvs;

  // accessors -------------------------------------------------------

  enum : int {
    kAllowFromAgvsFieldNumber = 1,
    kReportToAgvsFieldNumber = 2,
    kMissonFromAgvsFieldNumber = 3,
    kRequestToAgvsFieldNumber = 4,
    kAvoidAreaFromAgvsFieldNumber = 5,
    kRequestFromAgvsFieldNumber = 6,
    kCollaborativeFieldNumber = 7,
    kPeriodDataToAgvsFieldNumber = 8,
    kPeriodDataFromAgvsFieldNumber = 9,
  };
  // .CamelMessage.AllowFromAgvs allowFromAgvs = 1;
  bool has_allowfromagvs() const;
  private:
  bool _internal_has_allowfromagvs() const;
  public:
  void clear_allowfromagvs();
  const ::CamelMessage_AllowFromAgvs& allowfromagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_AllowFromAgvs* release_allowfromagvs();
  ::CamelMessage_AllowFromAgvs* mutable_allowfromagvs();
  void set_allocated_allowfromagvs(::CamelMessage_AllowFromAgvs* allowfromagvs);
  private:
  const ::CamelMessage_AllowFromAgvs& _internal_allowfromagvs() const;
  ::CamelMessage_AllowFromAgvs* _internal_mutable_allowfromagvs();
  public:
  void unsafe_arena_set_allocated_allowfromagvs(
      ::CamelMessage_AllowFromAgvs* allowfromagvs);
  ::CamelMessage_AllowFromAgvs* unsafe_arena_release_allowfromagvs();

  // .CamelMessage.ReportToAgvs reportToAgvs = 2;
  bool has_reporttoagvs() const;
  private:
  bool _internal_has_reporttoagvs() const;
  public:
  void clear_reporttoagvs();
  const ::CamelMessage_ReportToAgvs& reporttoagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_ReportToAgvs* release_reporttoagvs();
  ::CamelMessage_ReportToAgvs* mutable_reporttoagvs();
  void set_allocated_reporttoagvs(::CamelMessage_ReportToAgvs* reporttoagvs);
  private:
  const ::CamelMessage_ReportToAgvs& _internal_reporttoagvs() const;
  ::CamelMessage_ReportToAgvs* _internal_mutable_reporttoagvs();
  public:
  void unsafe_arena_set_allocated_reporttoagvs(
      ::CamelMessage_ReportToAgvs* reporttoagvs);
  ::CamelMessage_ReportToAgvs* unsafe_arena_release_reporttoagvs();

  // .CamelMessage.MissonFromAgvs missonFromAgvs = 3;
  bool has_missonfromagvs() const;
  private:
  bool _internal_has_missonfromagvs() const;
  public:
  void clear_missonfromagvs();
  const ::CamelMessage_MissonFromAgvs& missonfromagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_MissonFromAgvs* release_missonfromagvs();
  ::CamelMessage_MissonFromAgvs* mutable_missonfromagvs();
  void set_allocated_missonfromagvs(::CamelMessage_MissonFromAgvs* missonfromagvs);
  private:
  const ::CamelMessage_MissonFromAgvs& _internal_missonfromagvs() const;
  ::CamelMessage_MissonFromAgvs* _internal_mutable_missonfromagvs();
  public:
  void unsafe_arena_set_allocated_missonfromagvs(
      ::CamelMessage_MissonFromAgvs* missonfromagvs);
  ::CamelMessage_MissonFromAgvs* unsafe_arena_release_missonfromagvs();

  // .CamelMessage.RequestToAgvs requestToAgvs = 4;
  bool has_requesttoagvs() const;
  private:
  bool _internal_has_requesttoagvs() const;
  public:
  void clear_requesttoagvs();
  const ::CamelMessage_RequestToAgvs& requesttoagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_RequestToAgvs* release_requesttoagvs();
  ::CamelMessage_RequestToAgvs* mutable_requesttoagvs();
  void set_allocated_requesttoagvs(::CamelMessage_RequestToAgvs* requesttoagvs);
  private:
  const ::CamelMessage_RequestToAgvs& _internal_requesttoagvs() const;
  ::CamelMessage_RequestToAgvs* _internal_mutable_requesttoagvs();
  public:
  void unsafe_arena_set_allocated_requesttoagvs(
      ::CamelMessage_RequestToAgvs* requesttoagvs);
  ::CamelMessage_RequestToAgvs* unsafe_arena_release_requesttoagvs();

  // .CamelMessage.AvoidAreaFromAgvs avoidAreaFromAgvs = 5;
  bool has_avoidareafromagvs() const;
  private:
  bool _internal_has_avoidareafromagvs() const;
  public:
  void clear_avoidareafromagvs();
  const ::CamelMessage_AvoidAreaFromAgvs& avoidareafromagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_AvoidAreaFromAgvs* release_avoidareafromagvs();
  ::CamelMessage_AvoidAreaFromAgvs* mutable_avoidareafromagvs();
  void set_allocated_avoidareafromagvs(::CamelMessage_AvoidAreaFromAgvs* avoidareafromagvs);
  private:
  const ::CamelMessage_AvoidAreaFromAgvs& _internal_avoidareafromagvs() const;
  ::CamelMessage_AvoidAreaFromAgvs* _internal_mutable_avoidareafromagvs();
  public:
  void unsafe_arena_set_allocated_avoidareafromagvs(
      ::CamelMessage_AvoidAreaFromAgvs* avoidareafromagvs);
  ::CamelMessage_AvoidAreaFromAgvs* unsafe_arena_release_avoidareafromagvs();

  // .CamelMessage.RequestFromAgvs requestFromAgvs = 6;
  bool has_requestfromagvs() const;
  private:
  bool _internal_has_requestfromagvs() const;
  public:
  void clear_requestfromagvs();
  const ::CamelMessage_RequestFromAgvs& requestfromagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_RequestFromAgvs* release_requestfromagvs();
  ::CamelMessage_RequestFromAgvs* mutable_requestfromagvs();
  void set_allocated_requestfromagvs(::CamelMessage_RequestFromAgvs* requestfromagvs);
  private:
  const ::CamelMessage_RequestFromAgvs& _internal_requestfromagvs() const;
  ::CamelMessage_RequestFromAgvs* _internal_mutable_requestfromagvs();
  public:
  void unsafe_arena_set_allocated_requestfromagvs(
      ::CamelMessage_RequestFromAgvs* requestfromagvs);
  ::CamelMessage_RequestFromAgvs* unsafe_arena_release_requestfromagvs();

  // .Collaborative collaborative = 7;
  bool has_collaborative() const;
  private:
  bool _internal_has_collaborative() const;
  public:
  void clear_collaborative();
  const ::Collaborative& collaborative() const;
  PROTOBUF_NODISCARD ::Collaborative* release_collaborative();
  ::Collaborative* mutable_collaborative();
  void set_allocated_collaborative(::Collaborative* collaborative);
  private:
  const ::Collaborative& _internal_collaborative() const;
  ::Collaborative* _internal_mutable_collaborative();
  public:
  void unsafe_arena_set_allocated_collaborative(
      ::Collaborative* collaborative);
  ::Collaborative* unsafe_arena_release_collaborative();

  // .CamelMessage.PeriodDataToAgvs periodDataToAgvs = 8;
  bool has_perioddatatoagvs() const;
  private:
  bool _internal_has_perioddatatoagvs() const;
  public:
  void clear_perioddatatoagvs();
  const ::CamelMessage_PeriodDataToAgvs& perioddatatoagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_PeriodDataToAgvs* release_perioddatatoagvs();
  ::CamelMessage_PeriodDataToAgvs* mutable_perioddatatoagvs();
  void set_allocated_perioddatatoagvs(::CamelMessage_PeriodDataToAgvs* perioddatatoagvs);
  private:
  const ::CamelMessage_PeriodDataToAgvs& _internal_perioddatatoagvs() const;
  ::CamelMessage_PeriodDataToAgvs* _internal_mutable_perioddatatoagvs();
  public:
  void unsafe_arena_set_allocated_perioddatatoagvs(
      ::CamelMessage_PeriodDataToAgvs* perioddatatoagvs);
  ::CamelMessage_PeriodDataToAgvs* unsafe_arena_release_perioddatatoagvs();

  // .CamelMessage.PeriodDataFromAgvs periodDataFromAgvs = 9;
  bool has_perioddatafromagvs() const;
  private:
  bool _internal_has_perioddatafromagvs() const;
  public:
  void clear_perioddatafromagvs();
  const ::CamelMessage_PeriodDataFromAgvs& perioddatafromagvs() const;
  PROTOBUF_NODISCARD ::CamelMessage_PeriodDataFromAgvs* release_perioddatafromagvs();
  ::CamelMessage_PeriodDataFromAgvs* mutable_perioddatafromagvs();
  void set_allocated_perioddatafromagvs(::CamelMessage_PeriodDataFromAgvs* perioddatafromagvs);
  private:
  const ::CamelMessage_PeriodDataFromAgvs& _internal_perioddatafromagvs() const;
  ::CamelMessage_PeriodDataFromAgvs* _internal_mutable_perioddatafromagvs();
  public:
  void unsafe_arena_set_allocated_perioddatafromagvs(
      ::CamelMessage_PeriodDataFromAgvs* perioddatafromagvs);
  ::CamelMessage_PeriodDataFromAgvs* unsafe_arena_release_perioddatafromagvs();

  void clear_onlyone();
  OnlyoneCase onlyone_case() const;
  // @@protoc_insertion_point(class_scope:CamelMessage)
 private:
  class _Internal;
  void set_has_allowfromagvs();
  void set_has_reporttoagvs();
  void set_has_missonfromagvs();
  void set_has_requesttoagvs();
  void set_has_avoidareafromagvs();
  void set_has_requestfromagvs();
  void set_has_collaborative();
  void set_has_perioddatatoagvs();
  void set_has_perioddatafromagvs();

  inline bool has_onlyone() const;
  inline void clear_has_onlyone();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OnlyoneUnion {
      constexpr OnlyoneUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CamelMessage_AllowFromAgvs* allowfromagvs_;
      ::CamelMessage_ReportToAgvs* reporttoagvs_;
      ::CamelMessage_MissonFromAgvs* missonfromagvs_;
      ::CamelMessage_RequestToAgvs* requesttoagvs_;
      ::CamelMessage_AvoidAreaFromAgvs* avoidareafromagvs_;
      ::CamelMessage_RequestFromAgvs* requestfromagvs_;
      ::Collaborative* collaborative_;
      ::CamelMessage_PeriodDataToAgvs* perioddatatoagvs_;
      ::CamelMessage_PeriodDataFromAgvs* perioddatafromagvs_;
    } onlyone_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camel_2dagvs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CamelMessage_AllowFromAgvs

// string currentStation = 1;
inline void CamelMessage_AllowFromAgvs::clear_currentstation() {
  _impl_.currentstation_.ClearToEmpty();
}
inline const std::string& CamelMessage_AllowFromAgvs::currentstation() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.currentStation)
  return _internal_currentstation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_AllowFromAgvs::set_currentstation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currentstation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.currentStation)
}
inline std::string* CamelMessage_AllowFromAgvs::mutable_currentstation() {
  std::string* _s = _internal_mutable_currentstation();
  // @@protoc_insertion_point(field_mutable:CamelMessage.AllowFromAgvs.currentStation)
  return _s;
}
inline const std::string& CamelMessage_AllowFromAgvs::_internal_currentstation() const {
  return _impl_.currentstation_.Get();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_currentstation(const std::string& value) {
  
  _impl_.currentstation_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::_internal_mutable_currentstation() {
  
  return _impl_.currentstation_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::release_currentstation() {
  // @@protoc_insertion_point(field_release:CamelMessage.AllowFromAgvs.currentStation)
  return _impl_.currentstation_.Release();
}
inline void CamelMessage_AllowFromAgvs::set_allocated_currentstation(std::string* currentstation) {
  if (currentstation != nullptr) {
    
  } else {
    
  }
  _impl_.currentstation_.SetAllocated(currentstation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currentstation_.IsDefault()) {
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.AllowFromAgvs.currentStation)
}

// string targetStation = 2;
inline void CamelMessage_AllowFromAgvs::clear_targetstation() {
  _impl_.targetstation_.ClearToEmpty();
}
inline const std::string& CamelMessage_AllowFromAgvs::targetstation() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.targetStation)
  return _internal_targetstation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_AllowFromAgvs::set_targetstation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetstation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.targetStation)
}
inline std::string* CamelMessage_AllowFromAgvs::mutable_targetstation() {
  std::string* _s = _internal_mutable_targetstation();
  // @@protoc_insertion_point(field_mutable:CamelMessage.AllowFromAgvs.targetStation)
  return _s;
}
inline const std::string& CamelMessage_AllowFromAgvs::_internal_targetstation() const {
  return _impl_.targetstation_.Get();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_targetstation(const std::string& value) {
  
  _impl_.targetstation_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::_internal_mutable_targetstation() {
  
  return _impl_.targetstation_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::release_targetstation() {
  // @@protoc_insertion_point(field_release:CamelMessage.AllowFromAgvs.targetStation)
  return _impl_.targetstation_.Release();
}
inline void CamelMessage_AllowFromAgvs::set_allocated_targetstation(std::string* targetstation) {
  if (targetstation != nullptr) {
    
  } else {
    
  }
  _impl_.targetstation_.SetAllocated(targetstation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetstation_.IsDefault()) {
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.AllowFromAgvs.targetStation)
}

// bytes errorMessage = 3;
inline void CamelMessage_AllowFromAgvs::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& CamelMessage_AllowFromAgvs::errormessage() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_AllowFromAgvs::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.errorMessage)
}
inline std::string* CamelMessage_AllowFromAgvs::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:CamelMessage.AllowFromAgvs.errorMessage)
  return _s;
}
inline const std::string& CamelMessage_AllowFromAgvs::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_AllowFromAgvs::release_errormessage() {
  // @@protoc_insertion_point(field_release:CamelMessage.AllowFromAgvs.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void CamelMessage_AllowFromAgvs::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.AllowFromAgvs.errorMessage)
}

// .ChargeCmd charging = 4;
inline bool CamelMessage_AllowFromAgvs::_internal_has_charging() const {
  return this != internal_default_instance() && _impl_.charging_ != nullptr;
}
inline bool CamelMessage_AllowFromAgvs::has_charging() const {
  return _internal_has_charging();
}
inline const ::ChargeCmd& CamelMessage_AllowFromAgvs::_internal_charging() const {
  const ::ChargeCmd* p = _impl_.charging_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChargeCmd&>(
      ::_ChargeCmd_default_instance_);
}
inline const ::ChargeCmd& CamelMessage_AllowFromAgvs::charging() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.charging)
  return _internal_charging();
}
inline void CamelMessage_AllowFromAgvs::unsafe_arena_set_allocated_charging(
    ::ChargeCmd* charging) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charging_);
  }
  _impl_.charging_ = charging;
  if (charging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.AllowFromAgvs.charging)
}
inline ::ChargeCmd* CamelMessage_AllowFromAgvs::release_charging() {
  
  ::ChargeCmd* temp = _impl_.charging_;
  _impl_.charging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChargeCmd* CamelMessage_AllowFromAgvs::unsafe_arena_release_charging() {
  // @@protoc_insertion_point(field_release:CamelMessage.AllowFromAgvs.charging)
  
  ::ChargeCmd* temp = _impl_.charging_;
  _impl_.charging_ = nullptr;
  return temp;
}
inline ::ChargeCmd* CamelMessage_AllowFromAgvs::_internal_mutable_charging() {
  
  if (_impl_.charging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChargeCmd>(GetArenaForAllocation());
    _impl_.charging_ = p;
  }
  return _impl_.charging_;
}
inline ::ChargeCmd* CamelMessage_AllowFromAgvs::mutable_charging() {
  ::ChargeCmd* _msg = _internal_mutable_charging();
  // @@protoc_insertion_point(field_mutable:CamelMessage.AllowFromAgvs.charging)
  return _msg;
}
inline void CamelMessage_AllowFromAgvs::set_allocated_charging(::ChargeCmd* charging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charging_);
  }
  if (charging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charging));
    if (message_arena != submessage_arena) {
      charging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charging, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.charging_ = charging;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.AllowFromAgvs.charging)
}

// bool emergency = 5;
inline void CamelMessage_AllowFromAgvs::clear_emergency() {
  _impl_.emergency_ = false;
}
inline bool CamelMessage_AllowFromAgvs::_internal_emergency() const {
  return _impl_.emergency_;
}
inline bool CamelMessage_AllowFromAgvs::emergency() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.emergency)
  return _internal_emergency();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_emergency(bool value) {
  
  _impl_.emergency_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_emergency(bool value) {
  _internal_set_emergency(value);
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.emergency)
}

// bool isUseable = 6;
inline void CamelMessage_AllowFromAgvs::clear_isuseable() {
  _impl_.isuseable_ = false;
}
inline bool CamelMessage_AllowFromAgvs::_internal_isuseable() const {
  return _impl_.isuseable_;
}
inline bool CamelMessage_AllowFromAgvs::isuseable() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.isUseable)
  return _internal_isuseable();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_isuseable(bool value) {
  
  _impl_.isuseable_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_isuseable(bool value) {
  _internal_set_isuseable(value);
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.isUseable)
}

// bool hasTask = 7;
inline void CamelMessage_AllowFromAgvs::clear_hastask() {
  _impl_.hastask_ = false;
}
inline bool CamelMessage_AllowFromAgvs::_internal_hastask() const {
  return _impl_.hastask_;
}
inline bool CamelMessage_AllowFromAgvs::hastask() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.hasTask)
  return _internal_hastask();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_hastask(bool value) {
  
  _impl_.hastask_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_hastask(bool value) {
  _internal_set_hastask(value);
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.hasTask)
}

// repeated .Alarm alarms = 8;
inline int CamelMessage_AllowFromAgvs::_internal_alarms_size() const {
  return _impl_.alarms_.size();
}
inline int CamelMessage_AllowFromAgvs::alarms_size() const {
  return _internal_alarms_size();
}
inline ::Alarm* CamelMessage_AllowFromAgvs::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:CamelMessage.AllowFromAgvs.alarms)
  return _impl_.alarms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >*
CamelMessage_AllowFromAgvs::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:CamelMessage.AllowFromAgvs.alarms)
  return &_impl_.alarms_;
}
inline const ::Alarm& CamelMessage_AllowFromAgvs::_internal_alarms(int index) const {
  return _impl_.alarms_.Get(index);
}
inline const ::Alarm& CamelMessage_AllowFromAgvs::alarms(int index) const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.alarms)
  return _internal_alarms(index);
}
inline ::Alarm* CamelMessage_AllowFromAgvs::_internal_add_alarms() {
  return _impl_.alarms_.Add();
}
inline ::Alarm* CamelMessage_AllowFromAgvs::add_alarms() {
  ::Alarm* _add = _internal_add_alarms();
  // @@protoc_insertion_point(field_add:CamelMessage.AllowFromAgvs.alarms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >&
CamelMessage_AllowFromAgvs::alarms() const {
  // @@protoc_insertion_point(field_list:CamelMessage.AllowFromAgvs.alarms)
  return _impl_.alarms_;
}

// .DoAction systemPause = 9;
inline void CamelMessage_AllowFromAgvs::clear_systempause() {
  _impl_.systempause_ = 0;
}
inline ::DoAction CamelMessage_AllowFromAgvs::_internal_systempause() const {
  return static_cast< ::DoAction >(_impl_.systempause_);
}
inline ::DoAction CamelMessage_AllowFromAgvs::systempause() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.systemPause)
  return _internal_systempause();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_systempause(::DoAction value) {
  
  _impl_.systempause_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_systempause(::DoAction value) {
  _internal_set_systempause(value);
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.systemPause)
}

// .AgvsTaskStatus taskStatus = 10;
inline void CamelMessage_AllowFromAgvs::clear_taskstatus() {
  _impl_.taskstatus_ = 0;
}
inline ::AgvsTaskStatus CamelMessage_AllowFromAgvs::_internal_taskstatus() const {
  return static_cast< ::AgvsTaskStatus >(_impl_.taskstatus_);
}
inline ::AgvsTaskStatus CamelMessage_AllowFromAgvs::taskstatus() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AllowFromAgvs.taskStatus)
  return _internal_taskstatus();
}
inline void CamelMessage_AllowFromAgvs::_internal_set_taskstatus(::AgvsTaskStatus value) {
  
  _impl_.taskstatus_ = value;
}
inline void CamelMessage_AllowFromAgvs::set_taskstatus(::AgvsTaskStatus value) {
  _internal_set_taskstatus(value);
  // @@protoc_insertion_point(field_set:CamelMessage.AllowFromAgvs.taskStatus)
}

// -------------------------------------------------------------------

// CamelMessage_ReportToAgvs

// string carName = 1;
inline void CamelMessage_ReportToAgvs::clear_carname() {
  _impl_.carname_.ClearToEmpty();
}
inline const std::string& CamelMessage_ReportToAgvs::carname() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.carName)
  return _internal_carname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_ReportToAgvs::set_carname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.carname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.carName)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_carname() {
  std::string* _s = _internal_mutable_carname();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.carName)
  return _s;
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_carname() const {
  return _impl_.carname_.Get();
}
inline void CamelMessage_ReportToAgvs::_internal_set_carname(const std::string& value) {
  
  _impl_.carname_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_carname() {
  
  return _impl_.carname_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::release_carname() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.carName)
  return _impl_.carname_.Release();
}
inline void CamelMessage_ReportToAgvs::set_allocated_carname(std::string* carname) {
  if (carname != nullptr) {
    
  } else {
    
  }
  _impl_.carname_.SetAllocated(carname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.carname_.IsDefault()) {
    _impl_.carname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.carName)
}

// string currentStation = 2;
inline void CamelMessage_ReportToAgvs::clear_currentstation() {
  _impl_.currentstation_.ClearToEmpty();
}
inline const std::string& CamelMessage_ReportToAgvs::currentstation() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.currentStation)
  return _internal_currentstation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_ReportToAgvs::set_currentstation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currentstation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.currentStation)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_currentstation() {
  std::string* _s = _internal_mutable_currentstation();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.currentStation)
  return _s;
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_currentstation() const {
  return _impl_.currentstation_.Get();
}
inline void CamelMessage_ReportToAgvs::_internal_set_currentstation(const std::string& value) {
  
  _impl_.currentstation_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_currentstation() {
  
  return _impl_.currentstation_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::release_currentstation() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.currentStation)
  return _impl_.currentstation_.Release();
}
inline void CamelMessage_ReportToAgvs::set_allocated_currentstation(std::string* currentstation) {
  if (currentstation != nullptr) {
    
  } else {
    
  }
  _impl_.currentstation_.SetAllocated(currentstation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currentstation_.IsDefault()) {
    _impl_.currentstation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.currentStation)
}

// .Position position = 3;
inline bool CamelMessage_ReportToAgvs::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CamelMessage_ReportToAgvs::has_position() const {
  return _internal_has_position();
}
inline const ::Position& CamelMessage_ReportToAgvs::_internal_position() const {
  const ::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Position&>(
      ::_Position_default_instance_);
}
inline const ::Position& CamelMessage_ReportToAgvs::position() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.position)
  return _internal_position();
}
inline void CamelMessage_ReportToAgvs::unsafe_arena_set_allocated_position(
    ::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.ReportToAgvs.position)
}
inline ::Position* CamelMessage_ReportToAgvs::release_position() {
  
  ::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Position* CamelMessage_ReportToAgvs::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.position)
  
  ::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Position* CamelMessage_ReportToAgvs::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Position* CamelMessage_ReportToAgvs::mutable_position() {
  ::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.position)
  return _msg;
}
inline void CamelMessage_ReportToAgvs::set_allocated_position(::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.position)
}

// .Battery battery = 4;
inline bool CamelMessage_ReportToAgvs::_internal_has_battery() const {
  return this != internal_default_instance() && _impl_.battery_ != nullptr;
}
inline bool CamelMessage_ReportToAgvs::has_battery() const {
  return _internal_has_battery();
}
inline const ::Battery& CamelMessage_ReportToAgvs::_internal_battery() const {
  const ::Battery* p = _impl_.battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::Battery&>(
      ::_Battery_default_instance_);
}
inline const ::Battery& CamelMessage_ReportToAgvs::battery() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.battery)
  return _internal_battery();
}
inline void CamelMessage_ReportToAgvs::unsafe_arena_set_allocated_battery(
    ::Battery* battery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battery_);
  }
  _impl_.battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.ReportToAgvs.battery)
}
inline ::Battery* CamelMessage_ReportToAgvs::release_battery() {
  
  ::Battery* temp = _impl_.battery_;
  _impl_.battery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Battery* CamelMessage_ReportToAgvs::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.battery)
  
  ::Battery* temp = _impl_.battery_;
  _impl_.battery_ = nullptr;
  return temp;
}
inline ::Battery* CamelMessage_ReportToAgvs::_internal_mutable_battery() {
  
  if (_impl_.battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::Battery>(GetArenaForAllocation());
    _impl_.battery_ = p;
  }
  return _impl_.battery_;
}
inline ::Battery* CamelMessage_ReportToAgvs::mutable_battery() {
  ::Battery* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.battery)
  return _msg;
}
inline void CamelMessage_ReportToAgvs::set_allocated_battery(::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battery_);
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery));
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.battery)
}

// .CarHWInfo carInfo = 5;
inline bool CamelMessage_ReportToAgvs::_internal_has_carinfo() const {
  return this != internal_default_instance() && _impl_.carinfo_ != nullptr;
}
inline bool CamelMessage_ReportToAgvs::has_carinfo() const {
  return _internal_has_carinfo();
}
inline const ::CarHWInfo& CamelMessage_ReportToAgvs::_internal_carinfo() const {
  const ::CarHWInfo* p = _impl_.carinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::CarHWInfo&>(
      ::_CarHWInfo_default_instance_);
}
inline const ::CarHWInfo& CamelMessage_ReportToAgvs::carinfo() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.carInfo)
  return _internal_carinfo();
}
inline void CamelMessage_ReportToAgvs::unsafe_arena_set_allocated_carinfo(
    ::CarHWInfo* carinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.carinfo_);
  }
  _impl_.carinfo_ = carinfo;
  if (carinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.ReportToAgvs.carInfo)
}
inline ::CarHWInfo* CamelMessage_ReportToAgvs::release_carinfo() {
  
  ::CarHWInfo* temp = _impl_.carinfo_;
  _impl_.carinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CarHWInfo* CamelMessage_ReportToAgvs::unsafe_arena_release_carinfo() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.carInfo)
  
  ::CarHWInfo* temp = _impl_.carinfo_;
  _impl_.carinfo_ = nullptr;
  return temp;
}
inline ::CarHWInfo* CamelMessage_ReportToAgvs::_internal_mutable_carinfo() {
  
  if (_impl_.carinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::CarHWInfo>(GetArenaForAllocation());
    _impl_.carinfo_ = p;
  }
  return _impl_.carinfo_;
}
inline ::CarHWInfo* CamelMessage_ReportToAgvs::mutable_carinfo() {
  ::CarHWInfo* _msg = _internal_mutable_carinfo();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.carInfo)
  return _msg;
}
inline void CamelMessage_ReportToAgvs::set_allocated_carinfo(::CarHWInfo* carinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.carinfo_);
  }
  if (carinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carinfo));
    if (message_arena != submessage_arena) {
      carinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.carinfo_ = carinfo;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.carInfo)
}

// bytes errorMessage = 6;
inline void CamelMessage_ReportToAgvs::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& CamelMessage_ReportToAgvs::errormessage() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_ReportToAgvs::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.errorMessage)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.errorMessage)
  return _s;
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void CamelMessage_ReportToAgvs::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::release_errormessage() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void CamelMessage_ReportToAgvs::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.errorMessage)
}

// repeated .Alarm alarms = 7;
inline int CamelMessage_ReportToAgvs::_internal_alarms_size() const {
  return _impl_.alarms_.size();
}
inline int CamelMessage_ReportToAgvs::alarms_size() const {
  return _internal_alarms_size();
}
inline ::Alarm* CamelMessage_ReportToAgvs::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.alarms)
  return _impl_.alarms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >*
CamelMessage_ReportToAgvs::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:CamelMessage.ReportToAgvs.alarms)
  return &_impl_.alarms_;
}
inline const ::Alarm& CamelMessage_ReportToAgvs::_internal_alarms(int index) const {
  return _impl_.alarms_.Get(index);
}
inline const ::Alarm& CamelMessage_ReportToAgvs::alarms(int index) const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.alarms)
  return _internal_alarms(index);
}
inline ::Alarm* CamelMessage_ReportToAgvs::_internal_add_alarms() {
  return _impl_.alarms_.Add();
}
inline ::Alarm* CamelMessage_ReportToAgvs::add_alarms() {
  ::Alarm* _add = _internal_add_alarms();
  // @@protoc_insertion_point(field_add:CamelMessage.ReportToAgvs.alarms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Alarm >&
CamelMessage_ReportToAgvs::alarms() const {
  // @@protoc_insertion_point(field_list:CamelMessage.ReportToAgvs.alarms)
  return _impl_.alarms_;
}

// bool isPulling = 8;
inline void CamelMessage_ReportToAgvs::clear_ispulling() {
  _impl_.ispulling_ = false;
}
inline bool CamelMessage_ReportToAgvs::_internal_ispulling() const {
  return _impl_.ispulling_;
}
inline bool CamelMessage_ReportToAgvs::ispulling() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.isPulling)
  return _internal_ispulling();
}
inline void CamelMessage_ReportToAgvs::_internal_set_ispulling(bool value) {
  
  _impl_.ispulling_ = value;
}
inline void CamelMessage_ReportToAgvs::set_ispulling(bool value) {
  _internal_set_ispulling(value);
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.isPulling)
}

// string IP = 9;
inline void CamelMessage_ReportToAgvs::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& CamelMessage_ReportToAgvs::ip() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_ReportToAgvs::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.IP)
}
inline std::string* CamelMessage_ReportToAgvs::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:CamelMessage.ReportToAgvs.IP)
  return _s;
}
inline const std::string& CamelMessage_ReportToAgvs::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void CamelMessage_ReportToAgvs::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_ReportToAgvs::release_ip() {
  // @@protoc_insertion_point(field_release:CamelMessage.ReportToAgvs.IP)
  return _impl_.ip_.Release();
}
inline void CamelMessage_ReportToAgvs::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.ReportToAgvs.IP)
}

// bool collaborative = 10;
inline void CamelMessage_ReportToAgvs::clear_collaborative() {
  _impl_.collaborative_ = false;
}
inline bool CamelMessage_ReportToAgvs::_internal_collaborative() const {
  return _impl_.collaborative_;
}
inline bool CamelMessage_ReportToAgvs::collaborative() const {
  // @@protoc_insertion_point(field_get:CamelMessage.ReportToAgvs.collaborative)
  return _internal_collaborative();
}
inline void CamelMessage_ReportToAgvs::_internal_set_collaborative(bool value) {
  
  _impl_.collaborative_ = value;
}
inline void CamelMessage_ReportToAgvs::set_collaborative(bool value) {
  _internal_set_collaborative(value);
  // @@protoc_insertion_point(field_set:CamelMessage.ReportToAgvs.collaborative)
}

// -------------------------------------------------------------------

// CamelMessage_MissonFromAgvs

// string route = 1;
inline void CamelMessage_MissonFromAgvs::clear_route() {
  _impl_.route_.ClearToEmpty();
}
inline const std::string& CamelMessage_MissonFromAgvs::route() const {
  // @@protoc_insertion_point(field_get:CamelMessage.MissonFromAgvs.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_MissonFromAgvs::set_route(ArgT0&& arg0, ArgT... args) {
 
 _impl_.route_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.MissonFromAgvs.route)
}
inline std::string* CamelMessage_MissonFromAgvs::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:CamelMessage.MissonFromAgvs.route)
  return _s;
}
inline const std::string& CamelMessage_MissonFromAgvs::_internal_route() const {
  return _impl_.route_.Get();
}
inline void CamelMessage_MissonFromAgvs::_internal_set_route(const std::string& value) {
  
  _impl_.route_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_MissonFromAgvs::_internal_mutable_route() {
  
  return _impl_.route_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_MissonFromAgvs::release_route() {
  // @@protoc_insertion_point(field_release:CamelMessage.MissonFromAgvs.route)
  return _impl_.route_.Release();
}
inline void CamelMessage_MissonFromAgvs::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  _impl_.route_.SetAllocated(route, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.route_.IsDefault()) {
    _impl_.route_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.MissonFromAgvs.route)
}

// .ContextTask contextTask = 2;
inline bool CamelMessage_MissonFromAgvs::_internal_has_contexttask() const {
  return this != internal_default_instance() && _impl_.contexttask_ != nullptr;
}
inline bool CamelMessage_MissonFromAgvs::has_contexttask() const {
  return _internal_has_contexttask();
}
inline const ::ContextTask& CamelMessage_MissonFromAgvs::_internal_contexttask() const {
  const ::ContextTask* p = _impl_.contexttask_;
  return p != nullptr ? *p : reinterpret_cast<const ::ContextTask&>(
      ::_ContextTask_default_instance_);
}
inline const ::ContextTask& CamelMessage_MissonFromAgvs::contexttask() const {
  // @@protoc_insertion_point(field_get:CamelMessage.MissonFromAgvs.contextTask)
  return _internal_contexttask();
}
inline void CamelMessage_MissonFromAgvs::unsafe_arena_set_allocated_contexttask(
    ::ContextTask* contexttask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contexttask_);
  }
  _impl_.contexttask_ = contexttask;
  if (contexttask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.MissonFromAgvs.contextTask)
}
inline ::ContextTask* CamelMessage_MissonFromAgvs::release_contexttask() {
  
  ::ContextTask* temp = _impl_.contexttask_;
  _impl_.contexttask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ContextTask* CamelMessage_MissonFromAgvs::unsafe_arena_release_contexttask() {
  // @@protoc_insertion_point(field_release:CamelMessage.MissonFromAgvs.contextTask)
  
  ::ContextTask* temp = _impl_.contexttask_;
  _impl_.contexttask_ = nullptr;
  return temp;
}
inline ::ContextTask* CamelMessage_MissonFromAgvs::_internal_mutable_contexttask() {
  
  if (_impl_.contexttask_ == nullptr) {
    auto* p = CreateMaybeMessage<::ContextTask>(GetArenaForAllocation());
    _impl_.contexttask_ = p;
  }
  return _impl_.contexttask_;
}
inline ::ContextTask* CamelMessage_MissonFromAgvs::mutable_contexttask() {
  ::ContextTask* _msg = _internal_mutable_contexttask();
  // @@protoc_insertion_point(field_mutable:CamelMessage.MissonFromAgvs.contextTask)
  return _msg;
}
inline void CamelMessage_MissonFromAgvs::set_allocated_contexttask(::ContextTask* contexttask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contexttask_);
  }
  if (contexttask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contexttask));
    if (message_arena != submessage_arena) {
      contexttask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contexttask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.contexttask_ = contexttask;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.MissonFromAgvs.contextTask)
}

// string targetStation = 3;
inline void CamelMessage_MissonFromAgvs::clear_targetstation() {
  _impl_.targetstation_.ClearToEmpty();
}
inline const std::string& CamelMessage_MissonFromAgvs::targetstation() const {
  // @@protoc_insertion_point(field_get:CamelMessage.MissonFromAgvs.targetStation)
  return _internal_targetstation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_MissonFromAgvs::set_targetstation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetstation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.MissonFromAgvs.targetStation)
}
inline std::string* CamelMessage_MissonFromAgvs::mutable_targetstation() {
  std::string* _s = _internal_mutable_targetstation();
  // @@protoc_insertion_point(field_mutable:CamelMessage.MissonFromAgvs.targetStation)
  return _s;
}
inline const std::string& CamelMessage_MissonFromAgvs::_internal_targetstation() const {
  return _impl_.targetstation_.Get();
}
inline void CamelMessage_MissonFromAgvs::_internal_set_targetstation(const std::string& value) {
  
  _impl_.targetstation_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_MissonFromAgvs::_internal_mutable_targetstation() {
  
  return _impl_.targetstation_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_MissonFromAgvs::release_targetstation() {
  // @@protoc_insertion_point(field_release:CamelMessage.MissonFromAgvs.targetStation)
  return _impl_.targetstation_.Release();
}
inline void CamelMessage_MissonFromAgvs::set_allocated_targetstation(std::string* targetstation) {
  if (targetstation != nullptr) {
    
  } else {
    
  }
  _impl_.targetstation_.SetAllocated(targetstation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetstation_.IsDefault()) {
    _impl_.targetstation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.MissonFromAgvs.targetStation)
}

// -------------------------------------------------------------------

// CamelMessage_AvoidAreaFromAgvs

// .AvoidanceAreaCollection avoidArea = 1;
inline bool CamelMessage_AvoidAreaFromAgvs::_internal_has_avoidarea() const {
  return this != internal_default_instance() && _impl_.avoidarea_ != nullptr;
}
inline bool CamelMessage_AvoidAreaFromAgvs::has_avoidarea() const {
  return _internal_has_avoidarea();
}
inline const ::AvoidanceAreaCollection& CamelMessage_AvoidAreaFromAgvs::_internal_avoidarea() const {
  const ::AvoidanceAreaCollection* p = _impl_.avoidarea_;
  return p != nullptr ? *p : reinterpret_cast<const ::AvoidanceAreaCollection&>(
      ::_AvoidanceAreaCollection_default_instance_);
}
inline const ::AvoidanceAreaCollection& CamelMessage_AvoidAreaFromAgvs::avoidarea() const {
  // @@protoc_insertion_point(field_get:CamelMessage.AvoidAreaFromAgvs.avoidArea)
  return _internal_avoidarea();
}
inline void CamelMessage_AvoidAreaFromAgvs::unsafe_arena_set_allocated_avoidarea(
    ::AvoidanceAreaCollection* avoidarea) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.avoidarea_);
  }
  _impl_.avoidarea_ = avoidarea;
  if (avoidarea) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.AvoidAreaFromAgvs.avoidArea)
}
inline ::AvoidanceAreaCollection* CamelMessage_AvoidAreaFromAgvs::release_avoidarea() {
  
  ::AvoidanceAreaCollection* temp = _impl_.avoidarea_;
  _impl_.avoidarea_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AvoidanceAreaCollection* CamelMessage_AvoidAreaFromAgvs::unsafe_arena_release_avoidarea() {
  // @@protoc_insertion_point(field_release:CamelMessage.AvoidAreaFromAgvs.avoidArea)
  
  ::AvoidanceAreaCollection* temp = _impl_.avoidarea_;
  _impl_.avoidarea_ = nullptr;
  return temp;
}
inline ::AvoidanceAreaCollection* CamelMessage_AvoidAreaFromAgvs::_internal_mutable_avoidarea() {
  
  if (_impl_.avoidarea_ == nullptr) {
    auto* p = CreateMaybeMessage<::AvoidanceAreaCollection>(GetArenaForAllocation());
    _impl_.avoidarea_ = p;
  }
  return _impl_.avoidarea_;
}
inline ::AvoidanceAreaCollection* CamelMessage_AvoidAreaFromAgvs::mutable_avoidarea() {
  ::AvoidanceAreaCollection* _msg = _internal_mutable_avoidarea();
  // @@protoc_insertion_point(field_mutable:CamelMessage.AvoidAreaFromAgvs.avoidArea)
  return _msg;
}
inline void CamelMessage_AvoidAreaFromAgvs::set_allocated_avoidarea(::AvoidanceAreaCollection* avoidarea) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.avoidarea_);
  }
  if (avoidarea) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avoidarea));
    if (message_arena != submessage_arena) {
      avoidarea = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoidarea, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.avoidarea_ = avoidarea;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.AvoidAreaFromAgvs.avoidArea)
}

// -------------------------------------------------------------------

// CamelMessage_RequestToAgvs

// .DoAction getMissonInfo = 1;
inline void CamelMessage_RequestToAgvs::clear_getmissoninfo() {
  _impl_.getmissoninfo_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_getmissoninfo() const {
  return static_cast< ::DoAction >(_impl_.getmissoninfo_);
}
inline ::DoAction CamelMessage_RequestToAgvs::getmissoninfo() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.getMissonInfo)
  return _internal_getmissoninfo();
}
inline void CamelMessage_RequestToAgvs::_internal_set_getmissoninfo(::DoAction value) {
  
  _impl_.getmissoninfo_ = value;
}
inline void CamelMessage_RequestToAgvs::set_getmissoninfo(::DoAction value) {
  _internal_set_getmissoninfo(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.getMissonInfo)
}

// .DoAction setUseable = 2;
inline void CamelMessage_RequestToAgvs::clear_setuseable() {
  _impl_.setuseable_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_setuseable() const {
  return static_cast< ::DoAction >(_impl_.setuseable_);
}
inline ::DoAction CamelMessage_RequestToAgvs::setuseable() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.setUseable)
  return _internal_setuseable();
}
inline void CamelMessage_RequestToAgvs::_internal_set_setuseable(::DoAction value) {
  
  _impl_.setuseable_ = value;
}
inline void CamelMessage_RequestToAgvs::set_setuseable(::DoAction value) {
  _internal_set_setuseable(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.setUseable)
}

// .DoAction cancelTask = 3;
inline void CamelMessage_RequestToAgvs::clear_canceltask() {
  _impl_.canceltask_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_canceltask() const {
  return static_cast< ::DoAction >(_impl_.canceltask_);
}
inline ::DoAction CamelMessage_RequestToAgvs::canceltask() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.cancelTask)
  return _internal_canceltask();
}
inline void CamelMessage_RequestToAgvs::_internal_set_canceltask(::DoAction value) {
  
  _impl_.canceltask_ = value;
}
inline void CamelMessage_RequestToAgvs::set_canceltask(::DoAction value) {
  _internal_set_canceltask(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.cancelTask)
}

// .DoAction requestCharging = 4;
inline void CamelMessage_RequestToAgvs::clear_requestcharging() {
  _impl_.requestcharging_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_requestcharging() const {
  return static_cast< ::DoAction >(_impl_.requestcharging_);
}
inline ::DoAction CamelMessage_RequestToAgvs::requestcharging() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.requestCharging)
  return _internal_requestcharging();
}
inline void CamelMessage_RequestToAgvs::_internal_set_requestcharging(::DoAction value) {
  
  _impl_.requestcharging_ = value;
}
inline void CamelMessage_RequestToAgvs::set_requestcharging(::DoAction value) {
  _internal_set_requestcharging(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.requestCharging)
}

// .DoAction unlock = 5;
inline void CamelMessage_RequestToAgvs::clear_unlock() {
  _impl_.unlock_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_unlock() const {
  return static_cast< ::DoAction >(_impl_.unlock_);
}
inline ::DoAction CamelMessage_RequestToAgvs::unlock() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.unlock)
  return _internal_unlock();
}
inline void CamelMessage_RequestToAgvs::_internal_set_unlock(::DoAction value) {
  
  _impl_.unlock_ = value;
}
inline void CamelMessage_RequestToAgvs::set_unlock(::DoAction value) {
  _internal_set_unlock(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.unlock)
}

// .DoAction liftEmergency = 6;
inline void CamelMessage_RequestToAgvs::clear_liftemergency() {
  _impl_.liftemergency_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_liftemergency() const {
  return static_cast< ::DoAction >(_impl_.liftemergency_);
}
inline ::DoAction CamelMessage_RequestToAgvs::liftemergency() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.liftEmergency)
  return _internal_liftemergency();
}
inline void CamelMessage_RequestToAgvs::_internal_set_liftemergency(::DoAction value) {
  
  _impl_.liftemergency_ = value;
}
inline void CamelMessage_RequestToAgvs::set_liftemergency(::DoAction value) {
  _internal_set_liftemergency(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.liftEmergency)
}

// string applyRotue = 7;
inline void CamelMessage_RequestToAgvs::clear_applyrotue() {
  _impl_.applyrotue_.ClearToEmpty();
}
inline const std::string& CamelMessage_RequestToAgvs::applyrotue() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.applyRotue)
  return _internal_applyrotue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_RequestToAgvs::set_applyrotue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.applyrotue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.applyRotue)
}
inline std::string* CamelMessage_RequestToAgvs::mutable_applyrotue() {
  std::string* _s = _internal_mutable_applyrotue();
  // @@protoc_insertion_point(field_mutable:CamelMessage.RequestToAgvs.applyRotue)
  return _s;
}
inline const std::string& CamelMessage_RequestToAgvs::_internal_applyrotue() const {
  return _impl_.applyrotue_.Get();
}
inline void CamelMessage_RequestToAgvs::_internal_set_applyrotue(const std::string& value) {
  
  _impl_.applyrotue_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::_internal_mutable_applyrotue() {
  
  return _impl_.applyrotue_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::release_applyrotue() {
  // @@protoc_insertion_point(field_release:CamelMessage.RequestToAgvs.applyRotue)
  return _impl_.applyrotue_.Release();
}
inline void CamelMessage_RequestToAgvs::set_allocated_applyrotue(std::string* applyrotue) {
  if (applyrotue != nullptr) {
    
  } else {
    
  }
  _impl_.applyrotue_.SetAllocated(applyrotue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.applyrotue_.IsDefault()) {
    _impl_.applyrotue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.RequestToAgvs.applyRotue)
}

// string manualStation = 8;
inline void CamelMessage_RequestToAgvs::clear_manualstation() {
  _impl_.manualstation_.ClearToEmpty();
}
inline const std::string& CamelMessage_RequestToAgvs::manualstation() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.manualStation)
  return _internal_manualstation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_RequestToAgvs::set_manualstation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.manualstation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.manualStation)
}
inline std::string* CamelMessage_RequestToAgvs::mutable_manualstation() {
  std::string* _s = _internal_mutable_manualstation();
  // @@protoc_insertion_point(field_mutable:CamelMessage.RequestToAgvs.manualStation)
  return _s;
}
inline const std::string& CamelMessage_RequestToAgvs::_internal_manualstation() const {
  return _impl_.manualstation_.Get();
}
inline void CamelMessage_RequestToAgvs::_internal_set_manualstation(const std::string& value) {
  
  _impl_.manualstation_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::_internal_mutable_manualstation() {
  
  return _impl_.manualstation_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::release_manualstation() {
  // @@protoc_insertion_point(field_release:CamelMessage.RequestToAgvs.manualStation)
  return _impl_.manualstation_.Release();
}
inline void CamelMessage_RequestToAgvs::set_allocated_manualstation(std::string* manualstation) {
  if (manualstation != nullptr) {
    
  } else {
    
  }
  _impl_.manualstation_.SetAllocated(manualstation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.manualstation_.IsDefault()) {
    _impl_.manualstation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.RequestToAgvs.manualStation)
}

// .DoAction avoidAreaOper = 9;
inline void CamelMessage_RequestToAgvs::clear_avoidareaoper() {
  _impl_.avoidareaoper_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_avoidareaoper() const {
  return static_cast< ::DoAction >(_impl_.avoidareaoper_);
}
inline ::DoAction CamelMessage_RequestToAgvs::avoidareaoper() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.avoidAreaOper)
  return _internal_avoidareaoper();
}
inline void CamelMessage_RequestToAgvs::_internal_set_avoidareaoper(::DoAction value) {
  
  _impl_.avoidareaoper_ = value;
}
inline void CamelMessage_RequestToAgvs::set_avoidareaoper(::DoAction value) {
  _internal_set_avoidareaoper(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.avoidAreaOper)
}

// .DoAction initialTraffic = 10;
inline void CamelMessage_RequestToAgvs::clear_initialtraffic() {
  _impl_.initialtraffic_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_initialtraffic() const {
  return static_cast< ::DoAction >(_impl_.initialtraffic_);
}
inline ::DoAction CamelMessage_RequestToAgvs::initialtraffic() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.initialTraffic)
  return _internal_initialtraffic();
}
inline void CamelMessage_RequestToAgvs::_internal_set_initialtraffic(::DoAction value) {
  
  _impl_.initialtraffic_ = value;
}
inline void CamelMessage_RequestToAgvs::set_initialtraffic(::DoAction value) {
  _internal_set_initialtraffic(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.initialTraffic)
}

// .DoAction trafficRecovery = 11;
inline void CamelMessage_RequestToAgvs::clear_trafficrecovery() {
  _impl_.trafficrecovery_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_trafficrecovery() const {
  return static_cast< ::DoAction >(_impl_.trafficrecovery_);
}
inline ::DoAction CamelMessage_RequestToAgvs::trafficrecovery() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.trafficRecovery)
  return _internal_trafficrecovery();
}
inline void CamelMessage_RequestToAgvs::_internal_set_trafficrecovery(::DoAction value) {
  
  _impl_.trafficrecovery_ = value;
}
inline void CamelMessage_RequestToAgvs::set_trafficrecovery(::DoAction value) {
  _internal_set_trafficrecovery(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.trafficRecovery)
}

// .DoAction complishTask = 12;
inline void CamelMessage_RequestToAgvs::clear_complishtask() {
  _impl_.complishtask_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_complishtask() const {
  return static_cast< ::DoAction >(_impl_.complishtask_);
}
inline ::DoAction CamelMessage_RequestToAgvs::complishtask() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.complishTask)
  return _internal_complishtask();
}
inline void CamelMessage_RequestToAgvs::_internal_set_complishtask(::DoAction value) {
  
  _impl_.complishtask_ = value;
}
inline void CamelMessage_RequestToAgvs::set_complishtask(::DoAction value) {
  _internal_set_complishtask(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.complishTask)
}

// .DoAction nextTaskFlow = 13;
inline void CamelMessage_RequestToAgvs::clear_nexttaskflow() {
  _impl_.nexttaskflow_ = 0;
}
inline ::DoAction CamelMessage_RequestToAgvs::_internal_nexttaskflow() const {
  return static_cast< ::DoAction >(_impl_.nexttaskflow_);
}
inline ::DoAction CamelMessage_RequestToAgvs::nexttaskflow() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.nextTaskFlow)
  return _internal_nexttaskflow();
}
inline void CamelMessage_RequestToAgvs::_internal_set_nexttaskflow(::DoAction value) {
  
  _impl_.nexttaskflow_ = value;
}
inline void CamelMessage_RequestToAgvs::set_nexttaskflow(::DoAction value) {
  _internal_set_nexttaskflow(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.nextTaskFlow)
}

// string strParam = 20;
inline void CamelMessage_RequestToAgvs::clear_strparam() {
  _impl_.strparam_.ClearToEmpty();
}
inline const std::string& CamelMessage_RequestToAgvs::strparam() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.strParam)
  return _internal_strparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_RequestToAgvs::set_strparam(ArgT0&& arg0, ArgT... args) {
 
 _impl_.strparam_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.strParam)
}
inline std::string* CamelMessage_RequestToAgvs::mutable_strparam() {
  std::string* _s = _internal_mutable_strparam();
  // @@protoc_insertion_point(field_mutable:CamelMessage.RequestToAgvs.strParam)
  return _s;
}
inline const std::string& CamelMessage_RequestToAgvs::_internal_strparam() const {
  return _impl_.strparam_.Get();
}
inline void CamelMessage_RequestToAgvs::_internal_set_strparam(const std::string& value) {
  
  _impl_.strparam_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::_internal_mutable_strparam() {
  
  return _impl_.strparam_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::release_strparam() {
  // @@protoc_insertion_point(field_release:CamelMessage.RequestToAgvs.strParam)
  return _impl_.strparam_.Release();
}
inline void CamelMessage_RequestToAgvs::set_allocated_strparam(std::string* strparam) {
  if (strparam != nullptr) {
    
  } else {
    
  }
  _impl_.strparam_.SetAllocated(strparam, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strparam_.IsDefault()) {
    _impl_.strparam_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.RequestToAgvs.strParam)
}

// string IP = 21;
inline void CamelMessage_RequestToAgvs::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& CamelMessage_RequestToAgvs::ip() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestToAgvs.IP)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_RequestToAgvs::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.RequestToAgvs.IP)
}
inline std::string* CamelMessage_RequestToAgvs::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:CamelMessage.RequestToAgvs.IP)
  return _s;
}
inline const std::string& CamelMessage_RequestToAgvs::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void CamelMessage_RequestToAgvs::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_RequestToAgvs::release_ip() {
  // @@protoc_insertion_point(field_release:CamelMessage.RequestToAgvs.IP)
  return _impl_.ip_.Release();
}
inline void CamelMessage_RequestToAgvs::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.RequestToAgvs.IP)
}

// -------------------------------------------------------------------

// CamelMessage_RequestFromAgvs

// .ChargeCmd charging = 1;
inline bool CamelMessage_RequestFromAgvs::_internal_has_charging() const {
  return this != internal_default_instance() && _impl_.charging_ != nullptr;
}
inline bool CamelMessage_RequestFromAgvs::has_charging() const {
  return _internal_has_charging();
}
inline const ::ChargeCmd& CamelMessage_RequestFromAgvs::_internal_charging() const {
  const ::ChargeCmd* p = _impl_.charging_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChargeCmd&>(
      ::_ChargeCmd_default_instance_);
}
inline const ::ChargeCmd& CamelMessage_RequestFromAgvs::charging() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestFromAgvs.charging)
  return _internal_charging();
}
inline void CamelMessage_RequestFromAgvs::unsafe_arena_set_allocated_charging(
    ::ChargeCmd* charging) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charging_);
  }
  _impl_.charging_ = charging;
  if (charging) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.RequestFromAgvs.charging)
}
inline ::ChargeCmd* CamelMessage_RequestFromAgvs::release_charging() {
  
  ::ChargeCmd* temp = _impl_.charging_;
  _impl_.charging_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChargeCmd* CamelMessage_RequestFromAgvs::unsafe_arena_release_charging() {
  // @@protoc_insertion_point(field_release:CamelMessage.RequestFromAgvs.charging)
  
  ::ChargeCmd* temp = _impl_.charging_;
  _impl_.charging_ = nullptr;
  return temp;
}
inline ::ChargeCmd* CamelMessage_RequestFromAgvs::_internal_mutable_charging() {
  
  if (_impl_.charging_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChargeCmd>(GetArenaForAllocation());
    _impl_.charging_ = p;
  }
  return _impl_.charging_;
}
inline ::ChargeCmd* CamelMessage_RequestFromAgvs::mutable_charging() {
  ::ChargeCmd* _msg = _internal_mutable_charging();
  // @@protoc_insertion_point(field_mutable:CamelMessage.RequestFromAgvs.charging)
  return _msg;
}
inline void CamelMessage_RequestFromAgvs::set_allocated_charging(::ChargeCmd* charging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.charging_);
  }
  if (charging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charging));
    if (message_arena != submessage_arena) {
      charging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charging, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.charging_ = charging;
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.RequestFromAgvs.charging)
}

// .DoAction emergency = 2;
inline void CamelMessage_RequestFromAgvs::clear_emergency() {
  _impl_.emergency_ = 0;
}
inline ::DoAction CamelMessage_RequestFromAgvs::_internal_emergency() const {
  return static_cast< ::DoAction >(_impl_.emergency_);
}
inline ::DoAction CamelMessage_RequestFromAgvs::emergency() const {
  // @@protoc_insertion_point(field_get:CamelMessage.RequestFromAgvs.emergency)
  return _internal_emergency();
}
inline void CamelMessage_RequestFromAgvs::_internal_set_emergency(::DoAction value) {
  
  _impl_.emergency_ = value;
}
inline void CamelMessage_RequestFromAgvs::set_emergency(::DoAction value) {
  _internal_set_emergency(value);
  // @@protoc_insertion_point(field_set:CamelMessage.RequestFromAgvs.emergency)
}

// -------------------------------------------------------------------

// CamelMessage_PeriodDataToAgvs

// string camelVersion = 1;
inline void CamelMessage_PeriodDataToAgvs::clear_camelversion() {
  _impl_.camelversion_.ClearToEmpty();
}
inline const std::string& CamelMessage_PeriodDataToAgvs::camelversion() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.camelVersion)
  return _internal_camelversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_PeriodDataToAgvs::set_camelversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.camelversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.camelVersion)
}
inline std::string* CamelMessage_PeriodDataToAgvs::mutable_camelversion() {
  std::string* _s = _internal_mutable_camelversion();
  // @@protoc_insertion_point(field_mutable:CamelMessage.PeriodDataToAgvs.camelVersion)
  return _s;
}
inline const std::string& CamelMessage_PeriodDataToAgvs::_internal_camelversion() const {
  return _impl_.camelversion_.Get();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_camelversion(const std::string& value) {
  
  _impl_.camelversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_PeriodDataToAgvs::_internal_mutable_camelversion() {
  
  return _impl_.camelversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_PeriodDataToAgvs::release_camelversion() {
  // @@protoc_insertion_point(field_release:CamelMessage.PeriodDataToAgvs.camelVersion)
  return _impl_.camelversion_.Release();
}
inline void CamelMessage_PeriodDataToAgvs::set_allocated_camelversion(std::string* camelversion) {
  if (camelversion != nullptr) {
    
  } else {
    
  }
  _impl_.camelversion_.SetAllocated(camelversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camelversion_.IsDefault()) {
    _impl_.camelversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.PeriodDataToAgvs.camelVersion)
}

// string mapVersion = 2;
inline void CamelMessage_PeriodDataToAgvs::clear_mapversion() {
  _impl_.mapversion_.ClearToEmpty();
}
inline const std::string& CamelMessage_PeriodDataToAgvs::mapversion() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.mapVersion)
  return _internal_mapversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CamelMessage_PeriodDataToAgvs::set_mapversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.mapVersion)
}
inline std::string* CamelMessage_PeriodDataToAgvs::mutable_mapversion() {
  std::string* _s = _internal_mutable_mapversion();
  // @@protoc_insertion_point(field_mutable:CamelMessage.PeriodDataToAgvs.mapVersion)
  return _s;
}
inline const std::string& CamelMessage_PeriodDataToAgvs::_internal_mapversion() const {
  return _impl_.mapversion_.Get();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_mapversion(const std::string& value) {
  
  _impl_.mapversion_.Set(value, GetArenaForAllocation());
}
inline std::string* CamelMessage_PeriodDataToAgvs::_internal_mutable_mapversion() {
  
  return _impl_.mapversion_.Mutable(GetArenaForAllocation());
}
inline std::string* CamelMessage_PeriodDataToAgvs::release_mapversion() {
  // @@protoc_insertion_point(field_release:CamelMessage.PeriodDataToAgvs.mapVersion)
  return _impl_.mapversion_.Release();
}
inline void CamelMessage_PeriodDataToAgvs::set_allocated_mapversion(std::string* mapversion) {
  if (mapversion != nullptr) {
    
  } else {
    
  }
  _impl_.mapversion_.SetAllocated(mapversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapversion_.IsDefault()) {
    _impl_.mapversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CamelMessage.PeriodDataToAgvs.mapVersion)
}

// float totalOdometry = 3;
inline void CamelMessage_PeriodDataToAgvs::clear_totalodometry() {
  _impl_.totalodometry_ = 0;
}
inline float CamelMessage_PeriodDataToAgvs::_internal_totalodometry() const {
  return _impl_.totalodometry_;
}
inline float CamelMessage_PeriodDataToAgvs::totalodometry() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.totalOdometry)
  return _internal_totalodometry();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_totalodometry(float value) {
  
  _impl_.totalodometry_ = value;
}
inline void CamelMessage_PeriodDataToAgvs::set_totalodometry(float value) {
  _internal_set_totalodometry(value);
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.totalOdometry)
}

// float totalRuntime = 4;
inline void CamelMessage_PeriodDataToAgvs::clear_totalruntime() {
  _impl_.totalruntime_ = 0;
}
inline float CamelMessage_PeriodDataToAgvs::_internal_totalruntime() const {
  return _impl_.totalruntime_;
}
inline float CamelMessage_PeriodDataToAgvs::totalruntime() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.totalRuntime)
  return _internal_totalruntime();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_totalruntime(float value) {
  
  _impl_.totalruntime_ = value;
}
inline void CamelMessage_PeriodDataToAgvs::set_totalruntime(float value) {
  _internal_set_totalruntime(value);
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.totalRuntime)
}

// float totalTaskOdometry = 5;
inline void CamelMessage_PeriodDataToAgvs::clear_totaltaskodometry() {
  _impl_.totaltaskodometry_ = 0;
}
inline float CamelMessage_PeriodDataToAgvs::_internal_totaltaskodometry() const {
  return _impl_.totaltaskodometry_;
}
inline float CamelMessage_PeriodDataToAgvs::totaltaskodometry() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.totalTaskOdometry)
  return _internal_totaltaskodometry();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_totaltaskodometry(float value) {
  
  _impl_.totaltaskodometry_ = value;
}
inline void CamelMessage_PeriodDataToAgvs::set_totaltaskodometry(float value) {
  _internal_set_totaltaskodometry(value);
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.totalTaskOdometry)
}

// float totalTaskRuntime = 6;
inline void CamelMessage_PeriodDataToAgvs::clear_totaltaskruntime() {
  _impl_.totaltaskruntime_ = 0;
}
inline float CamelMessage_PeriodDataToAgvs::_internal_totaltaskruntime() const {
  return _impl_.totaltaskruntime_;
}
inline float CamelMessage_PeriodDataToAgvs::totaltaskruntime() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataToAgvs.totalTaskRuntime)
  return _internal_totaltaskruntime();
}
inline void CamelMessage_PeriodDataToAgvs::_internal_set_totaltaskruntime(float value) {
  
  _impl_.totaltaskruntime_ = value;
}
inline void CamelMessage_PeriodDataToAgvs::set_totaltaskruntime(float value) {
  _internal_set_totaltaskruntime(value);
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataToAgvs.totalTaskRuntime)
}

// -------------------------------------------------------------------

// CamelMessage_PeriodDataFromAgvs

// bool ok = 1;
inline void CamelMessage_PeriodDataFromAgvs::clear_ok() {
  _impl_.ok_ = false;
}
inline bool CamelMessage_PeriodDataFromAgvs::_internal_ok() const {
  return _impl_.ok_;
}
inline bool CamelMessage_PeriodDataFromAgvs::ok() const {
  // @@protoc_insertion_point(field_get:CamelMessage.PeriodDataFromAgvs.ok)
  return _internal_ok();
}
inline void CamelMessage_PeriodDataFromAgvs::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void CamelMessage_PeriodDataFromAgvs::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:CamelMessage.PeriodDataFromAgvs.ok)
}

// -------------------------------------------------------------------

// CamelMessage

// .CamelMessage.AllowFromAgvs allowFromAgvs = 1;
inline bool CamelMessage::_internal_has_allowfromagvs() const {
  return onlyone_case() == kAllowFromAgvs;
}
inline bool CamelMessage::has_allowfromagvs() const {
  return _internal_has_allowfromagvs();
}
inline void CamelMessage::set_has_allowfromagvs() {
  _impl_._oneof_case_[0] = kAllowFromAgvs;
}
inline void CamelMessage::clear_allowfromagvs() {
  if (_internal_has_allowfromagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.allowfromagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_AllowFromAgvs* CamelMessage::release_allowfromagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.allowFromAgvs)
  if (_internal_has_allowfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_AllowFromAgvs* temp = _impl_.onlyone_.allowfromagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.allowfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_AllowFromAgvs& CamelMessage::_internal_allowfromagvs() const {
  return _internal_has_allowfromagvs()
      ? *_impl_.onlyone_.allowfromagvs_
      : reinterpret_cast< ::CamelMessage_AllowFromAgvs&>(::_CamelMessage_AllowFromAgvs_default_instance_);
}
inline const ::CamelMessage_AllowFromAgvs& CamelMessage::allowfromagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.allowFromAgvs)
  return _internal_allowfromagvs();
}
inline ::CamelMessage_AllowFromAgvs* CamelMessage::unsafe_arena_release_allowfromagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.allowFromAgvs)
  if (_internal_has_allowfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_AllowFromAgvs* temp = _impl_.onlyone_.allowfromagvs_;
    _impl_.onlyone_.allowfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_allowfromagvs(::CamelMessage_AllowFromAgvs* allowfromagvs) {
  clear_onlyone();
  if (allowfromagvs) {
    set_has_allowfromagvs();
    _impl_.onlyone_.allowfromagvs_ = allowfromagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.allowFromAgvs)
}
inline ::CamelMessage_AllowFromAgvs* CamelMessage::_internal_mutable_allowfromagvs() {
  if (!_internal_has_allowfromagvs()) {
    clear_onlyone();
    set_has_allowfromagvs();
    _impl_.onlyone_.allowfromagvs_ = CreateMaybeMessage< ::CamelMessage_AllowFromAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.allowfromagvs_;
}
inline ::CamelMessage_AllowFromAgvs* CamelMessage::mutable_allowfromagvs() {
  ::CamelMessage_AllowFromAgvs* _msg = _internal_mutable_allowfromagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.allowFromAgvs)
  return _msg;
}

// .CamelMessage.ReportToAgvs reportToAgvs = 2;
inline bool CamelMessage::_internal_has_reporttoagvs() const {
  return onlyone_case() == kReportToAgvs;
}
inline bool CamelMessage::has_reporttoagvs() const {
  return _internal_has_reporttoagvs();
}
inline void CamelMessage::set_has_reporttoagvs() {
  _impl_._oneof_case_[0] = kReportToAgvs;
}
inline void CamelMessage::clear_reporttoagvs() {
  if (_internal_has_reporttoagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.reporttoagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_ReportToAgvs* CamelMessage::release_reporttoagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.reportToAgvs)
  if (_internal_has_reporttoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_ReportToAgvs* temp = _impl_.onlyone_.reporttoagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.reporttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_ReportToAgvs& CamelMessage::_internal_reporttoagvs() const {
  return _internal_has_reporttoagvs()
      ? *_impl_.onlyone_.reporttoagvs_
      : reinterpret_cast< ::CamelMessage_ReportToAgvs&>(::_CamelMessage_ReportToAgvs_default_instance_);
}
inline const ::CamelMessage_ReportToAgvs& CamelMessage::reporttoagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.reportToAgvs)
  return _internal_reporttoagvs();
}
inline ::CamelMessage_ReportToAgvs* CamelMessage::unsafe_arena_release_reporttoagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.reportToAgvs)
  if (_internal_has_reporttoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_ReportToAgvs* temp = _impl_.onlyone_.reporttoagvs_;
    _impl_.onlyone_.reporttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_reporttoagvs(::CamelMessage_ReportToAgvs* reporttoagvs) {
  clear_onlyone();
  if (reporttoagvs) {
    set_has_reporttoagvs();
    _impl_.onlyone_.reporttoagvs_ = reporttoagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.reportToAgvs)
}
inline ::CamelMessage_ReportToAgvs* CamelMessage::_internal_mutable_reporttoagvs() {
  if (!_internal_has_reporttoagvs()) {
    clear_onlyone();
    set_has_reporttoagvs();
    _impl_.onlyone_.reporttoagvs_ = CreateMaybeMessage< ::CamelMessage_ReportToAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.reporttoagvs_;
}
inline ::CamelMessage_ReportToAgvs* CamelMessage::mutable_reporttoagvs() {
  ::CamelMessage_ReportToAgvs* _msg = _internal_mutable_reporttoagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.reportToAgvs)
  return _msg;
}

// .CamelMessage.MissonFromAgvs missonFromAgvs = 3;
inline bool CamelMessage::_internal_has_missonfromagvs() const {
  return onlyone_case() == kMissonFromAgvs;
}
inline bool CamelMessage::has_missonfromagvs() const {
  return _internal_has_missonfromagvs();
}
inline void CamelMessage::set_has_missonfromagvs() {
  _impl_._oneof_case_[0] = kMissonFromAgvs;
}
inline void CamelMessage::clear_missonfromagvs() {
  if (_internal_has_missonfromagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.missonfromagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_MissonFromAgvs* CamelMessage::release_missonfromagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.missonFromAgvs)
  if (_internal_has_missonfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_MissonFromAgvs* temp = _impl_.onlyone_.missonfromagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.missonfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_MissonFromAgvs& CamelMessage::_internal_missonfromagvs() const {
  return _internal_has_missonfromagvs()
      ? *_impl_.onlyone_.missonfromagvs_
      : reinterpret_cast< ::CamelMessage_MissonFromAgvs&>(::_CamelMessage_MissonFromAgvs_default_instance_);
}
inline const ::CamelMessage_MissonFromAgvs& CamelMessage::missonfromagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.missonFromAgvs)
  return _internal_missonfromagvs();
}
inline ::CamelMessage_MissonFromAgvs* CamelMessage::unsafe_arena_release_missonfromagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.missonFromAgvs)
  if (_internal_has_missonfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_MissonFromAgvs* temp = _impl_.onlyone_.missonfromagvs_;
    _impl_.onlyone_.missonfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_missonfromagvs(::CamelMessage_MissonFromAgvs* missonfromagvs) {
  clear_onlyone();
  if (missonfromagvs) {
    set_has_missonfromagvs();
    _impl_.onlyone_.missonfromagvs_ = missonfromagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.missonFromAgvs)
}
inline ::CamelMessage_MissonFromAgvs* CamelMessage::_internal_mutable_missonfromagvs() {
  if (!_internal_has_missonfromagvs()) {
    clear_onlyone();
    set_has_missonfromagvs();
    _impl_.onlyone_.missonfromagvs_ = CreateMaybeMessage< ::CamelMessage_MissonFromAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.missonfromagvs_;
}
inline ::CamelMessage_MissonFromAgvs* CamelMessage::mutable_missonfromagvs() {
  ::CamelMessage_MissonFromAgvs* _msg = _internal_mutable_missonfromagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.missonFromAgvs)
  return _msg;
}

// .CamelMessage.RequestToAgvs requestToAgvs = 4;
inline bool CamelMessage::_internal_has_requesttoagvs() const {
  return onlyone_case() == kRequestToAgvs;
}
inline bool CamelMessage::has_requesttoagvs() const {
  return _internal_has_requesttoagvs();
}
inline void CamelMessage::set_has_requesttoagvs() {
  _impl_._oneof_case_[0] = kRequestToAgvs;
}
inline void CamelMessage::clear_requesttoagvs() {
  if (_internal_has_requesttoagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.requesttoagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_RequestToAgvs* CamelMessage::release_requesttoagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.requestToAgvs)
  if (_internal_has_requesttoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_RequestToAgvs* temp = _impl_.onlyone_.requesttoagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.requesttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_RequestToAgvs& CamelMessage::_internal_requesttoagvs() const {
  return _internal_has_requesttoagvs()
      ? *_impl_.onlyone_.requesttoagvs_
      : reinterpret_cast< ::CamelMessage_RequestToAgvs&>(::_CamelMessage_RequestToAgvs_default_instance_);
}
inline const ::CamelMessage_RequestToAgvs& CamelMessage::requesttoagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.requestToAgvs)
  return _internal_requesttoagvs();
}
inline ::CamelMessage_RequestToAgvs* CamelMessage::unsafe_arena_release_requesttoagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.requestToAgvs)
  if (_internal_has_requesttoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_RequestToAgvs* temp = _impl_.onlyone_.requesttoagvs_;
    _impl_.onlyone_.requesttoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_requesttoagvs(::CamelMessage_RequestToAgvs* requesttoagvs) {
  clear_onlyone();
  if (requesttoagvs) {
    set_has_requesttoagvs();
    _impl_.onlyone_.requesttoagvs_ = requesttoagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.requestToAgvs)
}
inline ::CamelMessage_RequestToAgvs* CamelMessage::_internal_mutable_requesttoagvs() {
  if (!_internal_has_requesttoagvs()) {
    clear_onlyone();
    set_has_requesttoagvs();
    _impl_.onlyone_.requesttoagvs_ = CreateMaybeMessage< ::CamelMessage_RequestToAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.requesttoagvs_;
}
inline ::CamelMessage_RequestToAgvs* CamelMessage::mutable_requesttoagvs() {
  ::CamelMessage_RequestToAgvs* _msg = _internal_mutable_requesttoagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.requestToAgvs)
  return _msg;
}

// .CamelMessage.AvoidAreaFromAgvs avoidAreaFromAgvs = 5;
inline bool CamelMessage::_internal_has_avoidareafromagvs() const {
  return onlyone_case() == kAvoidAreaFromAgvs;
}
inline bool CamelMessage::has_avoidareafromagvs() const {
  return _internal_has_avoidareafromagvs();
}
inline void CamelMessage::set_has_avoidareafromagvs() {
  _impl_._oneof_case_[0] = kAvoidAreaFromAgvs;
}
inline void CamelMessage::clear_avoidareafromagvs() {
  if (_internal_has_avoidareafromagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.avoidareafromagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_AvoidAreaFromAgvs* CamelMessage::release_avoidareafromagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.avoidAreaFromAgvs)
  if (_internal_has_avoidareafromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_AvoidAreaFromAgvs* temp = _impl_.onlyone_.avoidareafromagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.avoidareafromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_AvoidAreaFromAgvs& CamelMessage::_internal_avoidareafromagvs() const {
  return _internal_has_avoidareafromagvs()
      ? *_impl_.onlyone_.avoidareafromagvs_
      : reinterpret_cast< ::CamelMessage_AvoidAreaFromAgvs&>(::_CamelMessage_AvoidAreaFromAgvs_default_instance_);
}
inline const ::CamelMessage_AvoidAreaFromAgvs& CamelMessage::avoidareafromagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.avoidAreaFromAgvs)
  return _internal_avoidareafromagvs();
}
inline ::CamelMessage_AvoidAreaFromAgvs* CamelMessage::unsafe_arena_release_avoidareafromagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.avoidAreaFromAgvs)
  if (_internal_has_avoidareafromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_AvoidAreaFromAgvs* temp = _impl_.onlyone_.avoidareafromagvs_;
    _impl_.onlyone_.avoidareafromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_avoidareafromagvs(::CamelMessage_AvoidAreaFromAgvs* avoidareafromagvs) {
  clear_onlyone();
  if (avoidareafromagvs) {
    set_has_avoidareafromagvs();
    _impl_.onlyone_.avoidareafromagvs_ = avoidareafromagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.avoidAreaFromAgvs)
}
inline ::CamelMessage_AvoidAreaFromAgvs* CamelMessage::_internal_mutable_avoidareafromagvs() {
  if (!_internal_has_avoidareafromagvs()) {
    clear_onlyone();
    set_has_avoidareafromagvs();
    _impl_.onlyone_.avoidareafromagvs_ = CreateMaybeMessage< ::CamelMessage_AvoidAreaFromAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.avoidareafromagvs_;
}
inline ::CamelMessage_AvoidAreaFromAgvs* CamelMessage::mutable_avoidareafromagvs() {
  ::CamelMessage_AvoidAreaFromAgvs* _msg = _internal_mutable_avoidareafromagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.avoidAreaFromAgvs)
  return _msg;
}

// .CamelMessage.RequestFromAgvs requestFromAgvs = 6;
inline bool CamelMessage::_internal_has_requestfromagvs() const {
  return onlyone_case() == kRequestFromAgvs;
}
inline bool CamelMessage::has_requestfromagvs() const {
  return _internal_has_requestfromagvs();
}
inline void CamelMessage::set_has_requestfromagvs() {
  _impl_._oneof_case_[0] = kRequestFromAgvs;
}
inline void CamelMessage::clear_requestfromagvs() {
  if (_internal_has_requestfromagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.requestfromagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_RequestFromAgvs* CamelMessage::release_requestfromagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.requestFromAgvs)
  if (_internal_has_requestfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_RequestFromAgvs* temp = _impl_.onlyone_.requestfromagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.requestfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_RequestFromAgvs& CamelMessage::_internal_requestfromagvs() const {
  return _internal_has_requestfromagvs()
      ? *_impl_.onlyone_.requestfromagvs_
      : reinterpret_cast< ::CamelMessage_RequestFromAgvs&>(::_CamelMessage_RequestFromAgvs_default_instance_);
}
inline const ::CamelMessage_RequestFromAgvs& CamelMessage::requestfromagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.requestFromAgvs)
  return _internal_requestfromagvs();
}
inline ::CamelMessage_RequestFromAgvs* CamelMessage::unsafe_arena_release_requestfromagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.requestFromAgvs)
  if (_internal_has_requestfromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_RequestFromAgvs* temp = _impl_.onlyone_.requestfromagvs_;
    _impl_.onlyone_.requestfromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_requestfromagvs(::CamelMessage_RequestFromAgvs* requestfromagvs) {
  clear_onlyone();
  if (requestfromagvs) {
    set_has_requestfromagvs();
    _impl_.onlyone_.requestfromagvs_ = requestfromagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.requestFromAgvs)
}
inline ::CamelMessage_RequestFromAgvs* CamelMessage::_internal_mutable_requestfromagvs() {
  if (!_internal_has_requestfromagvs()) {
    clear_onlyone();
    set_has_requestfromagvs();
    _impl_.onlyone_.requestfromagvs_ = CreateMaybeMessage< ::CamelMessage_RequestFromAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.requestfromagvs_;
}
inline ::CamelMessage_RequestFromAgvs* CamelMessage::mutable_requestfromagvs() {
  ::CamelMessage_RequestFromAgvs* _msg = _internal_mutable_requestfromagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.requestFromAgvs)
  return _msg;
}

// .Collaborative collaborative = 7;
inline bool CamelMessage::_internal_has_collaborative() const {
  return onlyone_case() == kCollaborative;
}
inline bool CamelMessage::has_collaborative() const {
  return _internal_has_collaborative();
}
inline void CamelMessage::set_has_collaborative() {
  _impl_._oneof_case_[0] = kCollaborative;
}
inline ::Collaborative* CamelMessage::release_collaborative() {
  // @@protoc_insertion_point(field_release:CamelMessage.collaborative)
  if (_internal_has_collaborative()) {
    clear_has_onlyone();
    ::Collaborative* temp = _impl_.onlyone_.collaborative_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.collaborative_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Collaborative& CamelMessage::_internal_collaborative() const {
  return _internal_has_collaborative()
      ? *_impl_.onlyone_.collaborative_
      : reinterpret_cast< ::Collaborative&>(::_Collaborative_default_instance_);
}
inline const ::Collaborative& CamelMessage::collaborative() const {
  // @@protoc_insertion_point(field_get:CamelMessage.collaborative)
  return _internal_collaborative();
}
inline ::Collaborative* CamelMessage::unsafe_arena_release_collaborative() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.collaborative)
  if (_internal_has_collaborative()) {
    clear_has_onlyone();
    ::Collaborative* temp = _impl_.onlyone_.collaborative_;
    _impl_.onlyone_.collaborative_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_collaborative(::Collaborative* collaborative) {
  clear_onlyone();
  if (collaborative) {
    set_has_collaborative();
    _impl_.onlyone_.collaborative_ = collaborative;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.collaborative)
}
inline ::Collaborative* CamelMessage::_internal_mutable_collaborative() {
  if (!_internal_has_collaborative()) {
    clear_onlyone();
    set_has_collaborative();
    _impl_.onlyone_.collaborative_ = CreateMaybeMessage< ::Collaborative >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.collaborative_;
}
inline ::Collaborative* CamelMessage::mutable_collaborative() {
  ::Collaborative* _msg = _internal_mutable_collaborative();
  // @@protoc_insertion_point(field_mutable:CamelMessage.collaborative)
  return _msg;
}

// .CamelMessage.PeriodDataToAgvs periodDataToAgvs = 8;
inline bool CamelMessage::_internal_has_perioddatatoagvs() const {
  return onlyone_case() == kPeriodDataToAgvs;
}
inline bool CamelMessage::has_perioddatatoagvs() const {
  return _internal_has_perioddatatoagvs();
}
inline void CamelMessage::set_has_perioddatatoagvs() {
  _impl_._oneof_case_[0] = kPeriodDataToAgvs;
}
inline void CamelMessage::clear_perioddatatoagvs() {
  if (_internal_has_perioddatatoagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.perioddatatoagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_PeriodDataToAgvs* CamelMessage::release_perioddatatoagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.periodDataToAgvs)
  if (_internal_has_perioddatatoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_PeriodDataToAgvs* temp = _impl_.onlyone_.perioddatatoagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.perioddatatoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_PeriodDataToAgvs& CamelMessage::_internal_perioddatatoagvs() const {
  return _internal_has_perioddatatoagvs()
      ? *_impl_.onlyone_.perioddatatoagvs_
      : reinterpret_cast< ::CamelMessage_PeriodDataToAgvs&>(::_CamelMessage_PeriodDataToAgvs_default_instance_);
}
inline const ::CamelMessage_PeriodDataToAgvs& CamelMessage::perioddatatoagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.periodDataToAgvs)
  return _internal_perioddatatoagvs();
}
inline ::CamelMessage_PeriodDataToAgvs* CamelMessage::unsafe_arena_release_perioddatatoagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.periodDataToAgvs)
  if (_internal_has_perioddatatoagvs()) {
    clear_has_onlyone();
    ::CamelMessage_PeriodDataToAgvs* temp = _impl_.onlyone_.perioddatatoagvs_;
    _impl_.onlyone_.perioddatatoagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_perioddatatoagvs(::CamelMessage_PeriodDataToAgvs* perioddatatoagvs) {
  clear_onlyone();
  if (perioddatatoagvs) {
    set_has_perioddatatoagvs();
    _impl_.onlyone_.perioddatatoagvs_ = perioddatatoagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.periodDataToAgvs)
}
inline ::CamelMessage_PeriodDataToAgvs* CamelMessage::_internal_mutable_perioddatatoagvs() {
  if (!_internal_has_perioddatatoagvs()) {
    clear_onlyone();
    set_has_perioddatatoagvs();
    _impl_.onlyone_.perioddatatoagvs_ = CreateMaybeMessage< ::CamelMessage_PeriodDataToAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.perioddatatoagvs_;
}
inline ::CamelMessage_PeriodDataToAgvs* CamelMessage::mutable_perioddatatoagvs() {
  ::CamelMessage_PeriodDataToAgvs* _msg = _internal_mutable_perioddatatoagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.periodDataToAgvs)
  return _msg;
}

// .CamelMessage.PeriodDataFromAgvs periodDataFromAgvs = 9;
inline bool CamelMessage::_internal_has_perioddatafromagvs() const {
  return onlyone_case() == kPeriodDataFromAgvs;
}
inline bool CamelMessage::has_perioddatafromagvs() const {
  return _internal_has_perioddatafromagvs();
}
inline void CamelMessage::set_has_perioddatafromagvs() {
  _impl_._oneof_case_[0] = kPeriodDataFromAgvs;
}
inline void CamelMessage::clear_perioddatafromagvs() {
  if (_internal_has_perioddatafromagvs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.onlyone_.perioddatafromagvs_;
    }
    clear_has_onlyone();
  }
}
inline ::CamelMessage_PeriodDataFromAgvs* CamelMessage::release_perioddatafromagvs() {
  // @@protoc_insertion_point(field_release:CamelMessage.periodDataFromAgvs)
  if (_internal_has_perioddatafromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_PeriodDataFromAgvs* temp = _impl_.onlyone_.perioddatafromagvs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.onlyone_.perioddatafromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CamelMessage_PeriodDataFromAgvs& CamelMessage::_internal_perioddatafromagvs() const {
  return _internal_has_perioddatafromagvs()
      ? *_impl_.onlyone_.perioddatafromagvs_
      : reinterpret_cast< ::CamelMessage_PeriodDataFromAgvs&>(::_CamelMessage_PeriodDataFromAgvs_default_instance_);
}
inline const ::CamelMessage_PeriodDataFromAgvs& CamelMessage::perioddatafromagvs() const {
  // @@protoc_insertion_point(field_get:CamelMessage.periodDataFromAgvs)
  return _internal_perioddatafromagvs();
}
inline ::CamelMessage_PeriodDataFromAgvs* CamelMessage::unsafe_arena_release_perioddatafromagvs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CamelMessage.periodDataFromAgvs)
  if (_internal_has_perioddatafromagvs()) {
    clear_has_onlyone();
    ::CamelMessage_PeriodDataFromAgvs* temp = _impl_.onlyone_.perioddatafromagvs_;
    _impl_.onlyone_.perioddatafromagvs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CamelMessage::unsafe_arena_set_allocated_perioddatafromagvs(::CamelMessage_PeriodDataFromAgvs* perioddatafromagvs) {
  clear_onlyone();
  if (perioddatafromagvs) {
    set_has_perioddatafromagvs();
    _impl_.onlyone_.perioddatafromagvs_ = perioddatafromagvs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CamelMessage.periodDataFromAgvs)
}
inline ::CamelMessage_PeriodDataFromAgvs* CamelMessage::_internal_mutable_perioddatafromagvs() {
  if (!_internal_has_perioddatafromagvs()) {
    clear_onlyone();
    set_has_perioddatafromagvs();
    _impl_.onlyone_.perioddatafromagvs_ = CreateMaybeMessage< ::CamelMessage_PeriodDataFromAgvs >(GetArenaForAllocation());
  }
  return _impl_.onlyone_.perioddatafromagvs_;
}
inline ::CamelMessage_PeriodDataFromAgvs* CamelMessage::mutable_perioddatafromagvs() {
  ::CamelMessage_PeriodDataFromAgvs* _msg = _internal_mutable_perioddatafromagvs();
  // @@protoc_insertion_point(field_mutable:CamelMessage.periodDataFromAgvs)
  return _msg;
}

inline bool CamelMessage::has_onlyone() const {
  return onlyone_case() != ONLYONE_NOT_SET;
}
inline void CamelMessage::clear_has_onlyone() {
  _impl_._oneof_case_[0] = ONLYONE_NOT_SET;
}
inline CamelMessage::OnlyoneCase CamelMessage::onlyone_case() const {
  return CamelMessage::OnlyoneCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_camel_2dagvs_2eproto
