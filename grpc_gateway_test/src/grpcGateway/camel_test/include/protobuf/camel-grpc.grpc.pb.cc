// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: camel-grpc.proto

#include "camel-grpc.pb.h"
#include "camel-grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* AgvService_method_names[] = {
  "/AgvService/UploadMapData",
  "/AgvService/GetVersion",
  "/AgvService/GetAgvState",
  "/AgvService/RequestUIConfig",
  "/AgvService/GetSystemStatus",
  "/AgvService/GetAgvStateInAgvs",
  "/AgvService/SendToAgvs",
  "/AgvService/ControlAgv",
  "/AgvService/SetCamelCfg",
  "/AgvService/GetCamelCfg",
  "/AgvService/GetCamelPathCollection",
  "/AgvService/RoutePlan",
  "/AgvService/GetRosNodeCfg",
  "/AgvService/SetRosNodeCfg",
  "/AgvService/DeleteNodeCfg",
  "/AgvService/StopRosnode",
  "/AgvService/GetRosoutMsg",
  "/AgvService/SetAvoidanceArea",
  "/AgvService/LogExport",
  "/AgvService/AlarmUpload",
  "/AgvService/QueryNetworkInformation",
  "/AgvService/SetNetworkInformation",
  "/AgvService/SearchWLANList",
  "/AgvService/ConnectWLAN",
  "/AgvService/SoftwareUpgrade",
  "/AgvService/SoftwareBackup",
  "/AgvService/SoftwareRollback",
  "/AgvService/SoftwareDowngrade",
  "/AgvService/StickControl",
  "/AgvService/ApplyStickControl",
  "/AgvService/ModifyMatchPoint",
  "/AgvService/GetMatchPoint",
  "/AgvService/CarRestart",
  "/AgvService/UpdateStationPose",
  "/AgvService/TaskAllocationOperation",
  "/AgvService/AssignAllocationTasks",
};

std::unique_ptr< AgvService::Stub> AgvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgvService::Stub> stub(new AgvService::Stub(channel, options));
  return stub;
}

AgvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadMapData_(AgvService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(AgvService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgvState_(AgvService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestUIConfig_(AgvService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSystemStatus_(AgvService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgvStateInAgvs_(AgvService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendToAgvs_(AgvService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ControlAgv_(AgvService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCamelCfg_(AgvService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCamelCfg_(AgvService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCamelPathCollection_(AgvService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RoutePlan_(AgvService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRosNodeCfg_(AgvService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRosNodeCfg_(AgvService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNodeCfg_(AgvService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopRosnode_(AgvService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRosoutMsg_(AgvService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAvoidanceArea_(AgvService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LogExport_(AgvService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AlarmUpload_(AgvService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryNetworkInformation_(AgvService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetworkInformation_(AgvService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchWLANList_(AgvService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectWLAN_(AgvService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftwareUpgrade_(AgvService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftwareBackup_(AgvService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftwareRollback_(AgvService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SoftwareDowngrade_(AgvService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StickControl_(AgvService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplyStickControl_(AgvService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyMatchPoint_(AgvService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMatchPoint_(AgvService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CarRestart_(AgvService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateStationPose_(AgvService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TaskAllocationOperation_(AgvService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignAllocationTasks_(AgvService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgvService::Stub::UploadMapData(::grpc::ClientContext* context, const ::ISeeMap& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ISeeMap, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadMapData_, context, request, response);
}

void AgvService::Stub::async::UploadMapData(::grpc::ClientContext* context, const ::ISeeMap* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ISeeMap, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMapData_, context, request, response, std::move(f));
}

void AgvService::Stub::async::UploadMapData(::grpc::ClientContext* context, const ::ISeeMap* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadMapData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncUploadMapDataRaw(::grpc::ClientContext* context, const ::ISeeMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::ISeeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadMapData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncUploadMapDataRaw(::grpc::ClientContext* context, const ::ISeeMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadMapDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetVersion(::grpc::ClientContext* context, const ::ISeeMap& request, ::Version* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ISeeMap, ::Version, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void AgvService::Stub::async::GetVersion(::grpc::ClientContext* context, const ::ISeeMap* request, ::Version* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ISeeMap, ::Version, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetVersion(::grpc::ClientContext* context, const ::ISeeMap* request, ::Version* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Version>* AgvService::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::ISeeMap& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Version, ::ISeeMap, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetVersion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Version>* AgvService::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::ISeeMap& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetAgvState(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::AgvInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::AgvInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgvState_, context, request, response);
}

void AgvService::Stub::async::GetAgvState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AgvInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::AgvInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgvState_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetAgvState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AgvInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgvState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AgvInfo>* AgvService::Stub::PrepareAsyncGetAgvStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AgvInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgvState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AgvInfo>* AgvService::Stub::AsyncGetAgvStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgvStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::RequestUIConfig(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::UIConfig* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::UIConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestUIConfig_, context, request, response);
}

void AgvService::Stub::async::RequestUIConfig(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::UIConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::UIConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestUIConfig_, context, request, response, std::move(f));
}

void AgvService::Stub::async::RequestUIConfig(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::UIConfig* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestUIConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UIConfig>* AgvService::Stub::PrepareAsyncRequestUIConfigRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UIConfig, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestUIConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UIConfig>* AgvService::Stub::AsyncRequestUIConfigRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestUIConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetSystemStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::SystemStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::SystemStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSystemStatus_, context, request, response);
}

void AgvService::Stub::async::GetSystemStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::SystemStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::SystemStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemStatus_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetSystemStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::SystemStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SystemStatus>* AgvService::Stub::PrepareAsyncGetSystemStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SystemStatus, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSystemStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SystemStatus>* AgvService::Stub::AsyncGetSystemStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSystemStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetAgvStateInAgvs(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CamelSysInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CamelSysInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgvStateInAgvs_, context, request, response);
}

void AgvService::Stub::async::GetAgvStateInAgvs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CamelSysInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CamelSysInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgvStateInAgvs_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetAgvStateInAgvs(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CamelSysInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgvStateInAgvs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CamelSysInfo>* AgvService::Stub::PrepareAsyncGetAgvStateInAgvsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CamelSysInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgvStateInAgvs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CamelSysInfo>* AgvService::Stub::AsyncGetAgvStateInAgvsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgvStateInAgvsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SendToAgvs(::grpc::ClientContext* context, const ::CamelMessage& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CamelMessage, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendToAgvs_, context, request, response);
}

void AgvService::Stub::async::SendToAgvs(::grpc::ClientContext* context, const ::CamelMessage* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CamelMessage, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendToAgvs_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SendToAgvs(::grpc::ClientContext* context, const ::CamelMessage* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendToAgvs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSendToAgvsRaw(::grpc::ClientContext* context, const ::CamelMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::CamelMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendToAgvs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSendToAgvsRaw(::grpc::ClientContext* context, const ::CamelMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendToAgvsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::ControlAgv(::grpc::ClientContext* context, const ::Operation& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Operation, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ControlAgv_, context, request, response);
}

void AgvService::Stub::async::ControlAgv(::grpc::ClientContext* context, const ::Operation* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Operation, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlAgv_, context, request, response, std::move(f));
}

void AgvService::Stub::async::ControlAgv(::grpc::ClientContext* context, const ::Operation* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlAgv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncControlAgvRaw(::grpc::ClientContext* context, const ::Operation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ControlAgv_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncControlAgvRaw(::grpc::ClientContext* context, const ::Operation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncControlAgvRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SetCamelCfg(::grpc::ClientContext* context, const ::CamelCfg& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CamelCfg, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCamelCfg_, context, request, response);
}

void AgvService::Stub::async::SetCamelCfg(::grpc::ClientContext* context, const ::CamelCfg* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CamelCfg, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCamelCfg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SetCamelCfg(::grpc::ClientContext* context, const ::CamelCfg* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCamelCfg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSetCamelCfgRaw(::grpc::ClientContext* context, const ::CamelCfg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::CamelCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCamelCfg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSetCamelCfgRaw(::grpc::ClientContext* context, const ::CamelCfg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCamelCfgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetCamelCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::CamelCfg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::CamelCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCamelCfg_, context, request, response);
}

void AgvService::Stub::async::GetCamelCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CamelCfg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::CamelCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamelCfg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetCamelCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::CamelCfg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamelCfg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CamelCfg>* AgvService::Stub::PrepareAsyncGetCamelCfgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::CamelCfg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCamelCfg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::CamelCfg>* AgvService::Stub::AsyncGetCamelCfgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCamelCfgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetCamelPathCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::PathCollection* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::PathCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCamelPathCollection_, context, request, response);
}

void AgvService::Stub::async::GetCamelPathCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::PathCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::PathCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamelPathCollection_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetCamelPathCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::PathCollection* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCamelPathCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PathCollection>* AgvService::Stub::PrepareAsyncGetCamelPathCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PathCollection, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCamelPathCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PathCollection>* AgvService::Stub::AsyncGetCamelPathCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCamelPathCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::RoutePlan(::grpc::ClientContext* context, const ::CamelMessage_MissonFromAgvs& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CamelMessage_MissonFromAgvs, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RoutePlan_, context, request, response);
}

void AgvService::Stub::async::RoutePlan(::grpc::ClientContext* context, const ::CamelMessage_MissonFromAgvs* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CamelMessage_MissonFromAgvs, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RoutePlan_, context, request, response, std::move(f));
}

void AgvService::Stub::async::RoutePlan(::grpc::ClientContext* context, const ::CamelMessage_MissonFromAgvs* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RoutePlan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::PrepareAsyncRoutePlanRaw(::grpc::ClientContext* context, const ::CamelMessage_MissonFromAgvs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CamelMessage_MissonFromAgvs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RoutePlan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::AsyncRoutePlanRaw(::grpc::ClientContext* context, const ::CamelMessage_MissonFromAgvs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRoutePlanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetRosNodeCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::RosNodesCfg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::RosNodesCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRosNodeCfg_, context, request, response);
}

void AgvService::Stub::async::GetRosNodeCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::RosNodesCfg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::RosNodesCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRosNodeCfg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetRosNodeCfg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::RosNodesCfg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRosNodeCfg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RosNodesCfg>* AgvService::Stub::PrepareAsyncGetRosNodeCfgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RosNodesCfg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRosNodeCfg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RosNodesCfg>* AgvService::Stub::AsyncGetRosNodeCfgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRosNodeCfgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SetRosNodeCfg(::grpc::ClientContext* context, const ::RosNode& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRosNodeCfg_, context, request, response);
}

void AgvService::Stub::async::SetRosNodeCfg(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRosNodeCfg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SetRosNodeCfg(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRosNodeCfg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSetRosNodeCfgRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::RosNode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRosNodeCfg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSetRosNodeCfgRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRosNodeCfgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::DeleteNodeCfg(::grpc::ClientContext* context, const ::RosNode& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNodeCfg_, context, request, response);
}

void AgvService::Stub::async::DeleteNodeCfg(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNodeCfg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::DeleteNodeCfg(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNodeCfg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncDeleteNodeCfgRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::RosNode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNodeCfg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncDeleteNodeCfgRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNodeCfgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::StopRosnode(::grpc::ClientContext* context, const ::RosNode& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopRosnode_, context, request, response);
}

void AgvService::Stub::async::StopRosnode(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRosnode_, context, request, response, std::move(f));
}

void AgvService::Stub::async::StopRosnode(::grpc::ClientContext* context, const ::RosNode* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopRosnode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncStopRosnodeRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::RosNode, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopRosnode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncStopRosnodeRaw(::grpc::ClientContext* context, const ::RosNode& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRosnodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetRosoutMsg(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::RosoutMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::RosoutMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRosoutMsg_, context, request, response);
}

void AgvService::Stub::async::GetRosoutMsg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::RosoutMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::RosoutMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRosoutMsg_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetRosoutMsg(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::RosoutMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRosoutMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RosoutMsg>* AgvService::Stub::PrepareAsyncGetRosoutMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RosoutMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRosoutMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RosoutMsg>* AgvService::Stub::AsyncGetRosoutMsgRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRosoutMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SetAvoidanceArea(::grpc::ClientContext* context, const ::AvoidanceAreaCollection& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AvoidanceAreaCollection, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAvoidanceArea_, context, request, response);
}

void AgvService::Stub::async::SetAvoidanceArea(::grpc::ClientContext* context, const ::AvoidanceAreaCollection* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AvoidanceAreaCollection, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAvoidanceArea_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SetAvoidanceArea(::grpc::ClientContext* context, const ::AvoidanceAreaCollection* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAvoidanceArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::PrepareAsyncSetAvoidanceAreaRaw(::grpc::ClientContext* context, const ::AvoidanceAreaCollection& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::AvoidanceAreaCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAvoidanceArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::AsyncSetAvoidanceAreaRaw(::grpc::ClientContext* context, const ::AvoidanceAreaCollection& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAvoidanceAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::LogExport(::grpc::ClientContext* context, const ::LogRequest& request, ::LogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LogRequest, ::LogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LogExport_, context, request, response);
}

void AgvService::Stub::async::LogExport(::grpc::ClientContext* context, const ::LogRequest* request, ::LogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LogRequest, ::LogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogExport_, context, request, response, std::move(f));
}

void AgvService::Stub::async::LogExport(::grpc::ClientContext* context, const ::LogRequest* request, ::LogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LogExport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LogResponse>* AgvService::Stub::PrepareAsyncLogExportRaw(::grpc::ClientContext* context, const ::LogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LogResponse, ::LogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LogExport_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LogResponse>* AgvService::Stub::AsyncLogExportRaw(::grpc::ClientContext* context, const ::LogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogExportRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::AlarmUpload(::grpc::ClientContext* context, const ::AlarmMsg& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AlarmMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AlarmUpload_, context, request, response);
}

void AgvService::Stub::async::AlarmUpload(::grpc::ClientContext* context, const ::AlarmMsg* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AlarmMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlarmUpload_, context, request, response, std::move(f));
}

void AgvService::Stub::async::AlarmUpload(::grpc::ClientContext* context, const ::AlarmMsg* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AlarmUpload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::PrepareAsyncAlarmUploadRaw(::grpc::ClientContext* context, const ::AlarmMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::AlarmMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AlarmUpload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::AsyncAlarmUploadRaw(::grpc::ClientContext* context, const ::AlarmMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAlarmUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::QueryNetworkInformation(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::NetworkConfigCollection* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::NetworkConfigCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryNetworkInformation_, context, request, response);
}

void AgvService::Stub::async::QueryNetworkInformation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::NetworkConfigCollection* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::NetworkConfigCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNetworkInformation_, context, request, response, std::move(f));
}

void AgvService::Stub::async::QueryNetworkInformation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::NetworkConfigCollection* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryNetworkInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetworkConfigCollection>* AgvService::Stub::PrepareAsyncQueryNetworkInformationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetworkConfigCollection, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryNetworkInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetworkConfigCollection>* AgvService::Stub::AsyncQueryNetworkInformationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryNetworkInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SetNetworkInformation(::grpc::ClientContext* context, const ::NetworkConfig& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetworkConfig, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNetworkInformation_, context, request, response);
}

void AgvService::Stub::async::SetNetworkInformation(::grpc::ClientContext* context, const ::NetworkConfig* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetworkConfig, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkInformation_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SetNetworkInformation(::grpc::ClientContext* context, const ::NetworkConfig* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::PrepareAsyncSetNetworkInformationRaw(::grpc::ClientContext* context, const ::NetworkConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::NetworkConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNetworkInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::AsyncSetNetworkInformationRaw(::grpc::ClientContext* context, const ::NetworkConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNetworkInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SearchWLANList(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::WLANList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::WLANList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchWLANList_, context, request, response);
}

void AgvService::Stub::async::SearchWLANList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::WLANList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::WLANList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchWLANList_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SearchWLANList(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::WLANList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchWLANList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WLANList>* AgvService::Stub::PrepareAsyncSearchWLANListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::WLANList, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchWLANList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::WLANList>* AgvService::Stub::AsyncSearchWLANListRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchWLANListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::ConnectWLAN(::grpc::ClientContext* context, const ::WirlessConfig& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::WirlessConfig, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectWLAN_, context, request, response);
}

void AgvService::Stub::async::ConnectWLAN(::grpc::ClientContext* context, const ::WirlessConfig* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::WirlessConfig, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectWLAN_, context, request, response, std::move(f));
}

void AgvService::Stub::async::ConnectWLAN(::grpc::ClientContext* context, const ::WirlessConfig* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectWLAN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncConnectWLANRaw(::grpc::ClientContext* context, const ::WirlessConfig& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::WirlessConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectWLAN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncConnectWLANRaw(::grpc::ClientContext* context, const ::WirlessConfig& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectWLANRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SoftwareUpgrade(::grpc::ClientContext* context, const ::InstallPack& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SoftwareUpgrade_, context, request, response);
}

void AgvService::Stub::async::SoftwareUpgrade(::grpc::ClientContext* context, const ::InstallPack* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareUpgrade_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SoftwareUpgrade(::grpc::ClientContext* context, const ::InstallPack* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareUpgrade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::InstallPack& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::InstallPack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SoftwareUpgrade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::InstallPack& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSoftwareUpgradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SoftwareBackup(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SoftwareBackup_, context, request, response);
}

void AgvService::Stub::async::SoftwareBackup(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareBackup_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SoftwareBackup(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareBackup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSoftwareBackupRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SoftwareBackup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSoftwareBackupRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSoftwareBackupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SoftwareRollback(::grpc::ClientContext* context, const ::InstallPack& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SoftwareRollback_, context, request, response);
}

void AgvService::Stub::async::SoftwareRollback(::grpc::ClientContext* context, const ::InstallPack* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareRollback_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SoftwareRollback(::grpc::ClientContext* context, const ::InstallPack* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareRollback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSoftwareRollbackRaw(::grpc::ClientContext* context, const ::InstallPack& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::InstallPack, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SoftwareRollback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSoftwareRollbackRaw(::grpc::ClientContext* context, const ::InstallPack& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSoftwareRollbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::SoftwareDowngrade(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SoftwareDowngrade_, context, request, response);
}

void AgvService::Stub::async::SoftwareDowngrade(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareDowngrade_, context, request, response, std::move(f));
}

void AgvService::Stub::async::SoftwareDowngrade(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SoftwareDowngrade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncSoftwareDowngradeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SoftwareDowngrade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncSoftwareDowngradeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSoftwareDowngradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::StickControl(::grpc::ClientContext* context, const ::Gamepad& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Gamepad, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StickControl_, context, request, response);
}

void AgvService::Stub::async::StickControl(::grpc::ClientContext* context, const ::Gamepad* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Gamepad, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StickControl_, context, request, response, std::move(f));
}

void AgvService::Stub::async::StickControl(::grpc::ClientContext* context, const ::Gamepad* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StickControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncStickControlRaw(::grpc::ClientContext* context, const ::Gamepad& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::Gamepad, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StickControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncStickControlRaw(::grpc::ClientContext* context, const ::Gamepad& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStickControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::ApplyStickControl(::grpc::ClientContext* context, const ::GamepadControl& request, ::Token* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GamepadControl, ::Token, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyStickControl_, context, request, response);
}

void AgvService::Stub::async::ApplyStickControl(::grpc::ClientContext* context, const ::GamepadControl* request, ::Token* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GamepadControl, ::Token, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyStickControl_, context, request, response, std::move(f));
}

void AgvService::Stub::async::ApplyStickControl(::grpc::ClientContext* context, const ::GamepadControl* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyStickControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Token>* AgvService::Stub::PrepareAsyncApplyStickControlRaw(::grpc::ClientContext* context, const ::GamepadControl& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Token, ::GamepadControl, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyStickControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Token>* AgvService::Stub::AsyncApplyStickControlRaw(::grpc::ClientContext* context, const ::GamepadControl& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyStickControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::ModifyMatchPoint(::grpc::ClientContext* context, const ::MatchPointCommand& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MatchPointCommand, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyMatchPoint_, context, request, response);
}

void AgvService::Stub::async::ModifyMatchPoint(::grpc::ClientContext* context, const ::MatchPointCommand* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MatchPointCommand, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyMatchPoint_, context, request, response, std::move(f));
}

void AgvService::Stub::async::ModifyMatchPoint(::grpc::ClientContext* context, const ::MatchPointCommand* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyMatchPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncModifyMatchPointRaw(::grpc::ClientContext* context, const ::MatchPointCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::MatchPointCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModifyMatchPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncModifyMatchPointRaw(::grpc::ClientContext* context, const ::MatchPointCommand& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyMatchPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::GetMatchPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::MatchPoints* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::MatchPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMatchPoint_, context, request, response);
}

void AgvService::Stub::async::GetMatchPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::MatchPoints* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::MatchPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMatchPoint_, context, request, response, std::move(f));
}

void AgvService::Stub::async::GetMatchPoint(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::MatchPoints* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMatchPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MatchPoints>* AgvService::Stub::PrepareAsyncGetMatchPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MatchPoints, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMatchPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MatchPoints>* AgvService::Stub::AsyncGetMatchPointRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMatchPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::CarRestart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CarRestart_, context, request, response);
}

void AgvService::Stub::async::CarRestart(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CarRestart_, context, request, response, std::move(f));
}

void AgvService::Stub::async::CarRestart(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CarRestart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::PrepareAsyncCarRestartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CarRestart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AgvService::Stub::AsyncCarRestartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCarRestartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::UpdateStationPose(::grpc::ClientContext* context, const ::UpdateStation& request, ::UpdatePose* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UpdateStation, ::UpdatePose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateStationPose_, context, request, response);
}

void AgvService::Stub::async::UpdateStationPose(::grpc::ClientContext* context, const ::UpdateStation* request, ::UpdatePose* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UpdateStation, ::UpdatePose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStationPose_, context, request, response, std::move(f));
}

void AgvService::Stub::async::UpdateStationPose(::grpc::ClientContext* context, const ::UpdateStation* request, ::UpdatePose* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateStationPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UpdatePose>* AgvService::Stub::PrepareAsyncUpdateStationPoseRaw(::grpc::ClientContext* context, const ::UpdateStation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UpdatePose, ::UpdateStation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateStationPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UpdatePose>* AgvService::Stub::AsyncUpdateStationPoseRaw(::grpc::ClientContext* context, const ::UpdateStation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateStationPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::TaskAllocationOperation(::grpc::ClientContext* context, const ::GrpcTaskOperation& request, ::GrpcTaskAllocations* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcTaskOperation, ::GrpcTaskAllocations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TaskAllocationOperation_, context, request, response);
}

void AgvService::Stub::async::TaskAllocationOperation(::grpc::ClientContext* context, const ::GrpcTaskOperation* request, ::GrpcTaskAllocations* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcTaskOperation, ::GrpcTaskAllocations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskAllocationOperation_, context, request, response, std::move(f));
}

void AgvService::Stub::async::TaskAllocationOperation(::grpc::ClientContext* context, const ::GrpcTaskOperation* request, ::GrpcTaskAllocations* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TaskAllocationOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GrpcTaskAllocations>* AgvService::Stub::PrepareAsyncTaskAllocationOperationRaw(::grpc::ClientContext* context, const ::GrpcTaskOperation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GrpcTaskAllocations, ::GrpcTaskOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TaskAllocationOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GrpcTaskAllocations>* AgvService::Stub::AsyncTaskAllocationOperationRaw(::grpc::ClientContext* context, const ::GrpcTaskOperation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTaskAllocationOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgvService::Stub::AssignAllocationTasks(::grpc::ClientContext* context, const ::GrpcTaskAllocations& request, ::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GrpcTaskAllocations, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignAllocationTasks_, context, request, response);
}

void AgvService::Stub::async::AssignAllocationTasks(::grpc::ClientContext* context, const ::GrpcTaskAllocations* request, ::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GrpcTaskAllocations, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignAllocationTasks_, context, request, response, std::move(f));
}

void AgvService::Stub::async::AssignAllocationTasks(::grpc::ClientContext* context, const ::GrpcTaskAllocations* request, ::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignAllocationTasks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::PrepareAsyncAssignAllocationTasksRaw(::grpc::ClientContext* context, const ::GrpcTaskAllocations& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Result, ::GrpcTaskAllocations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignAllocationTasks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Result>* AgvService::Stub::AsyncAssignAllocationTasksRaw(::grpc::ClientContext* context, const ::GrpcTaskAllocations& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignAllocationTasksRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgvService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::ISeeMap, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ISeeMap* req,
             ::Result* resp) {
               return service->UploadMapData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::ISeeMap, ::Version, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ISeeMap* req,
             ::Version* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::AgvInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::AgvInfo* resp) {
               return service->GetAgvState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::UIConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::UIConfig* resp) {
               return service->RequestUIConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::SystemStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::SystemStatus* resp) {
               return service->GetSystemStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::CamelSysInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CamelSysInfo* resp) {
               return service->GetAgvStateInAgvs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::CamelMessage, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CamelMessage* req,
             ::Result* resp) {
               return service->SendToAgvs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::Operation, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Operation* req,
             ::Result* resp) {
               return service->ControlAgv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::CamelCfg, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CamelCfg* req,
             ::Result* resp) {
               return service->SetCamelCfg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::CamelCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::CamelCfg* resp) {
               return service->GetCamelCfg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::PathCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::PathCollection* resp) {
               return service->GetCamelPathCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::CamelMessage_MissonFromAgvs, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CamelMessage_MissonFromAgvs* req,
             ::google::protobuf::Empty* resp) {
               return service->RoutePlan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::RosNodesCfg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::RosNodesCfg* resp) {
               return service->GetRosNodeCfg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RosNode* req,
             ::Result* resp) {
               return service->SetRosNodeCfg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RosNode* req,
             ::Result* resp) {
               return service->DeleteNodeCfg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::RosNode, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RosNode* req,
             ::Result* resp) {
               return service->StopRosnode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::RosoutMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::RosoutMsg* resp) {
               return service->GetRosoutMsg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::AvoidanceAreaCollection, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AvoidanceAreaCollection* req,
             ::google::protobuf::Empty* resp) {
               return service->SetAvoidanceArea(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::LogRequest, ::LogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LogRequest* req,
             ::LogResponse* resp) {
               return service->LogExport(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::AlarmMsg, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AlarmMsg* req,
             ::google::protobuf::Empty* resp) {
               return service->AlarmUpload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::NetworkConfigCollection, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::NetworkConfigCollection* resp) {
               return service->QueryNetworkInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::NetworkConfig, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetworkConfig* req,
             ::google::protobuf::Empty* resp) {
               return service->SetNetworkInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::WLANList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::WLANList* resp) {
               return service->SearchWLANList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::WirlessConfig, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WirlessConfig* req,
             ::Result* resp) {
               return service->ConnectWLAN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InstallPack* req,
             ::Result* resp) {
               return service->SoftwareUpgrade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Result* resp) {
               return service->SoftwareBackup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::InstallPack, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InstallPack* req,
             ::Result* resp) {
               return service->SoftwareRollback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::Result* resp) {
               return service->SoftwareDowngrade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::Gamepad, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Gamepad* req,
             ::Result* resp) {
               return service->StickControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::GamepadControl, ::Token, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GamepadControl* req,
             ::Token* resp) {
               return service->ApplyStickControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::MatchPointCommand, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MatchPointCommand* req,
             ::Result* resp) {
               return service->ModifyMatchPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::MatchPoints, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::MatchPoints* resp) {
               return service->GetMatchPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->CarRestart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::UpdateStation, ::UpdatePose, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UpdateStation* req,
             ::UpdatePose* resp) {
               return service->UpdateStationPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::GrpcTaskOperation, ::GrpcTaskAllocations, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcTaskOperation* req,
             ::GrpcTaskAllocations* resp) {
               return service->TaskAllocationOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgvService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgvService::Service, ::GrpcTaskAllocations, ::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GrpcTaskAllocations* req,
             ::Result* resp) {
               return service->AssignAllocationTasks(ctx, req, resp);
             }, this)));
}

AgvService::Service::~Service() {
}

::grpc::Status AgvService::Service::UploadMapData(::grpc::ServerContext* context, const ::ISeeMap* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetVersion(::grpc::ServerContext* context, const ::ISeeMap* request, ::Version* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetAgvState(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::AgvInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::RequestUIConfig(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::UIConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetSystemStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::SystemStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetAgvStateInAgvs(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CamelSysInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SendToAgvs(::grpc::ServerContext* context, const ::CamelMessage* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::ControlAgv(::grpc::ServerContext* context, const ::Operation* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SetCamelCfg(::grpc::ServerContext* context, const ::CamelCfg* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetCamelCfg(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::CamelCfg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetCamelPathCollection(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::PathCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::RoutePlan(::grpc::ServerContext* context, const ::CamelMessage_MissonFromAgvs* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetRosNodeCfg(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::RosNodesCfg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SetRosNodeCfg(::grpc::ServerContext* context, const ::RosNode* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::DeleteNodeCfg(::grpc::ServerContext* context, const ::RosNode* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::StopRosnode(::grpc::ServerContext* context, const ::RosNode* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetRosoutMsg(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::RosoutMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SetAvoidanceArea(::grpc::ServerContext* context, const ::AvoidanceAreaCollection* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::LogExport(::grpc::ServerContext* context, const ::LogRequest* request, ::LogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::AlarmUpload(::grpc::ServerContext* context, const ::AlarmMsg* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::QueryNetworkInformation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::NetworkConfigCollection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SetNetworkInformation(::grpc::ServerContext* context, const ::NetworkConfig* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SearchWLANList(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::WLANList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::ConnectWLAN(::grpc::ServerContext* context, const ::WirlessConfig* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SoftwareUpgrade(::grpc::ServerContext* context, const ::InstallPack* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SoftwareBackup(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SoftwareRollback(::grpc::ServerContext* context, const ::InstallPack* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::SoftwareDowngrade(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::StickControl(::grpc::ServerContext* context, const ::Gamepad* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::ApplyStickControl(::grpc::ServerContext* context, const ::GamepadControl* request, ::Token* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::ModifyMatchPoint(::grpc::ServerContext* context, const ::MatchPointCommand* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::GetMatchPoint(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::MatchPoints* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::CarRestart(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::UpdateStationPose(::grpc::ServerContext* context, const ::UpdateStation* request, ::UpdatePose* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::TaskAllocationOperation(::grpc::ServerContext* context, const ::GrpcTaskOperation* request, ::GrpcTaskAllocations* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgvService::Service::AssignAllocationTasks(::grpc::ServerContext* context, const ::GrpcTaskAllocations* request, ::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


