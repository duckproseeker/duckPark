// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-db.proto

#include "camel-db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace camel {
namespace api {
PROTOBUF_CONSTEXPR ISeeMap_Region::ISeeMap_Region(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.floor_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_RegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_RegionDefaultTypeInternal() {}
  union {
    ISeeMap_Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_RegionDefaultTypeInternal _ISeeMap_Region_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_Area::ISeeMap_Area(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fork_lift_height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_AreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_AreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_AreaDefaultTypeInternal() {}
  union {
    ISeeMap_Area _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_AreaDefaultTypeInternal _ISeeMap_Area_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_Path::ISeeMap_Path(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_station_rfid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_station_rfid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transit_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enter_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exit_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.car_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.goals_angle_)*/0
  , /*decltype(_impl_.goals_height_)*/0
  , /*decltype(_impl_.angle_compensate_)*/0
  , /*decltype(_impl_.laser_head_height_)*/0
  , /*decltype(_impl_.uncertainty_)*/0
  , /*decltype(_impl_.music_)*/0
  , /*decltype(_impl_.dedect_zone1_)*/0
  , /*decltype(_impl_.dedect_zone2_)*/0
  , /*decltype(_impl_.velocity_max_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.destination_range_)*/0
  , /*decltype(_impl_.distance_zone_interchange_)*/0
  , /*decltype(_impl_.is_running_)*/0
  , /*decltype(_impl_.height_step_)*/0
  , /*decltype(_impl_.cargo_)*/0
  , /*decltype(_impl_.driving_direction_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.allow_auto_avoid_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_PathDefaultTypeInternal() {}
  union {
    ISeeMap_Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_PathDefaultTypeInternal _ISeeMap_Path_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_Station::ISeeMap_Station(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_rfid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.related_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.space_x_)*/0
  , /*decltype(_impl_.space_y_)*/0
  , /*decltype(_impl_.z_axis_)*/0
  , /*decltype(_impl_.qr_id_)*/0u
  , /*decltype(_impl_.qr_angle_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_StationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_StationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_StationDefaultTypeInternal() {}
  union {
    ISeeMap_Station _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_StationDefaultTypeInternal _ISeeMap_Station_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_Configuration::ISeeMap_Configuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.area_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.section_)*/0
  , /*decltype(_impl_.laser_head_height_)*/0
  , /*decltype(_impl_.dedect_zone1_)*/0
  , /*decltype(_impl_.dedect_zone2_)*/0
  , /*decltype(_impl_.distance_zone_interchange_)*/0
  , /*decltype(_impl_.destination_range_)*/0
  , /*decltype(_impl_.height_step_)*/0
  , /*decltype(_impl_.cargo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_ConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_ConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_ConfigurationDefaultTypeInternal() {}
  union {
    ISeeMap_Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_ConfigurationDefaultTypeInternal _ISeeMap_Configuration_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_TaskAction::ISeeMap_TaskAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enter_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exit_action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_TaskActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_TaskActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_TaskActionDefaultTypeInternal() {}
  union {
    ISeeMap_TaskAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_TaskActionDefaultTypeInternal _ISeeMap_TaskAction_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_CarManagemet::ISeeMap_CarManagemet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.car_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.battery_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmuser_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lmdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rated_load_)*/0
  , /*decltype(_impl_.number_)*/0
  , /*decltype(_impl_.run_time_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.margin_)*/0
  , /*decltype(_impl_.reference_point_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_CarManagemetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_CarManagemetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_CarManagemetDefaultTypeInternal() {}
  union {
    ISeeMap_CarManagemet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_CarManagemetDefaultTypeInternal _ISeeMap_CarManagemet_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap_CoordOffset::ISeeMap_CoordOffset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.station_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMap_CoordOffsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMap_CoordOffsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMap_CoordOffsetDefaultTypeInternal() {}
  union {
    ISeeMap_CoordOffset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMap_CoordOffsetDefaultTypeInternal _ISeeMap_CoordOffset_default_instance_;
PROTOBUF_CONSTEXPR ISeeMap::ISeeMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arealist_)*/{}
  , /*decltype(_impl_.pathlist_)*/{}
  , /*decltype(_impl_.stationlist_)*/{}
  , /*decltype(_impl_.configurationlist_)*/{}
  , /*decltype(_impl_.taskactionlist_)*/{}
  , /*decltype(_impl_.carmnglist_)*/{}
  , /*decltype(_impl_.coordoffset_)*/{}
  , /*decltype(_impl_.region_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ISeeMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ISeeMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ISeeMapDefaultTypeInternal() {}
  union {
    ISeeMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ISeeMapDefaultTypeInternal _ISeeMap_default_instance_;
}  // namespace api
}  // namespace camel
static ::_pb::Metadata file_level_metadata_camel_2ddb_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_camel_2ddb_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_camel_2ddb_2eproto = nullptr;

const uint32_t TableStruct_camel_2ddb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.floor_number_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.lmuser_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.mapversion_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Region, _impl_.lmdate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Area, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Area, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Area, _impl_.fork_lift_height_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Area, _impl_.region_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.from_station_rfid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.to_station_rfid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.goals_angle_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.goals_height_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.angle_compensate_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.laser_head_height_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.uncertainty_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.music_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.dedect_zone1_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.dedect_zone2_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.velocity_max_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.destination_range_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.distance_zone_interchange_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.is_running_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.height_step_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.cargo_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.driving_direction_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.lmdate_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.transit_action_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.enter_action_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.exit_action_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.allow_auto_avoid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Path, _impl_.car_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.station_rfid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.station_name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.station_type_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.space_x_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.space_y_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.z_axis_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.related_id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.lmdate_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.qr_id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Station, _impl_.qr_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.area_name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.task_type_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.laser_head_height_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.dedect_zone1_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.dedect_zone2_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.distance_zone_interchange_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.destination_range_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.height_step_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_Configuration, _impl_.cargo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_TaskAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_TaskAction, _impl_.action_name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_TaskAction, _impl_.enter_action_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_TaskAction, _impl_.exit_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.car_type_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.battery_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.rated_load_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.margin_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.reference_point_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.run_time_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.valid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.lmuser_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CarManagemet, _impl_.lmdate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CoordOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CoordOffset, _impl_.station_name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CoordOffset, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap_CoordOffset, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.arealist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.pathlist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.stationlist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.configurationlist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.taskactionlist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.carmnglist_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ISeeMap, _impl_.coordoffset_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::camel::api::ISeeMap_Region)},
  { 14, -1, -1, sizeof(::camel::api::ISeeMap_Area)},
  { 24, -1, -1, sizeof(::camel::api::ISeeMap_Path)},
  { 58, -1, -1, sizeof(::camel::api::ISeeMap_Station)},
  { 77, -1, -1, sizeof(::camel::api::ISeeMap_Configuration)},
  { 93, -1, -1, sizeof(::camel::api::ISeeMap_TaskAction)},
  { 102, -1, -1, sizeof(::camel::api::ISeeMap_CarManagemet)},
  { 124, -1, -1, sizeof(::camel::api::ISeeMap_CoordOffset)},
  { 133, -1, -1, sizeof(::camel::api::ISeeMap)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::camel::api::_ISeeMap_Region_default_instance_._instance,
  &::camel::api::_ISeeMap_Area_default_instance_._instance,
  &::camel::api::_ISeeMap_Path_default_instance_._instance,
  &::camel::api::_ISeeMap_Station_default_instance_._instance,
  &::camel::api::_ISeeMap_Configuration_default_instance_._instance,
  &::camel::api::_ISeeMap_TaskAction_default_instance_._instance,
  &::camel::api::_ISeeMap_CarManagemet_default_instance_._instance,
  &::camel::api::_ISeeMap_CoordOffset_default_instance_._instance,
  &::camel::api::_ISeeMap_default_instance_._instance,
};

const char descriptor_table_protodef_camel_2ddb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016camel-db.proto\022\tcamel.api\"\336\020\n\007ISeeMap\022"
  ")\n\006region\030\001 \001(\0132\031.camel.api.ISeeMap.Regi"
  "on\022)\n\010areaList\030\002 \003(\0132\027.camel.api.ISeeMap"
  ".Area\022)\n\010pathList\030\003 \003(\0132\027.camel.api.ISee"
  "Map.Path\022/\n\013stationList\030\004 \003(\0132\032.camel.ap"
  "i.ISeeMap.Station\022;\n\021configurationList\030\005"
  " \003(\0132 .camel.api.ISeeMap.Configuration\0225"
  "\n\016taskActionList\030\006 \003(\0132\035.camel.api.ISeeM"
  "ap.TaskAction\0223\n\ncarMngList\030\007 \003(\0132\037.came"
  "l.api.ISeeMap.CarManagemet\0223\n\013coordOffse"
  "t\030\010 \003(\0132\036.camel.api.ISeeMap.CoordOffset\032"
  "\220\001\n\006Region\022\n\n\002id\030\001 \001(\t\022\023\n\013description\030\002 "
  "\001(\014\022\014\n\004name\030\003 \001(\014\022\024\n\014floor_number\030\004 \001(\005\022"
  "\r\n\005valid\030\005 \001(\t\022\016\n\006lmuser\030\006 \001(\014\022\022\n\nmapVer"
  "sion\030\007 \001(\014\022\016\n\006lmdate\030\010 \001(\t\032M\n\004Area\022\n\n\002id"
  "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\030\n\020fork_lift_height"
  "\030\003 \001(\005\022\021\n\tregion_id\030\004 \001(\t\032\337\004\n\004Path\022\n\n\002id"
  "\030\001 \001(\t\022\031\n\021from_station_rfid\030\002 \001(\t\022\027\n\017to_"
  "station_rfid\030\003 \001(\t\022\023\n\013goals_angle\030\004 \001(\002\022"
  "\024\n\014goals_height\030\005 \001(\002\022\030\n\020angle_compensat"
  "e\030\006 \001(\002\022\031\n\021laser_head_height\030\007 \001(\002\022\023\n\013un"
  "certainty\030\010 \001(\002\022\r\n\005music\030\t \001(\005\022\024\n\014dedect"
  "_zone1\030\n \001(\005\022\024\n\014dedect_zone2\030\013 \001(\005\022\024\n\014ve"
  "locity_max\030\014 \001(\002\022\016\n\006radius\030\r \001(\002\022\031\n\021dest"
  "ination_range\030\016 \001(\002\022!\n\031distance_zone_int"
  "erchange\030\017 \001(\002\022\022\n\nis_running\030\020 \001(\005\022\023\n\013he"
  "ight_step\030\021 \001(\005\022\r\n\005cargo\030\022 \001(\005\022\031\n\021drivin"
  "g_direction\030\023 \001(\005\022\020\n\010distance\030\024 \001(\002\022\014\n\004f"
  "lag\030\025 \001(\t\022\016\n\006lmdate\030\026 \001(\t\022\021\n\tregion_id\030\027"
  " \001(\t\022\026\n\016transit_action\030\030 \001(\t\022\024\n\014enter_ac"
  "tion\030\031 \001(\t\022\023\n\013exit_action\030\032 \001(\t\022\030\n\020allow"
  "_auto_avoid\030\033 \001(\010\022\020\n\010car_type\030\034 \001(\t\032\357\001\n\007"
  "Station\022\n\n\002id\030\001 \001(\t\022\024\n\014station_rfid\030\002 \001("
  "\t\022\024\n\014station_name\030\003 \001(\t\022\024\n\014station_type\030"
  "\004 \001(\t\022\017\n\007space_x\030\005 \001(\002\022\017\n\007space_y\030\006 \001(\002\022"
  "\016\n\006z_axis\030\007 \001(\002\022\022\n\nrelated_id\030\010 \001(\t\022\014\n\004f"
  "lag\030\t \001(\t\022\016\n\006lmdate\030\n \001(\t\022\021\n\tregion_id\030\013"
  " \001(\t\022\r\n\005QR_id\030\014 \001(\r\022\020\n\010QR_angle\030\r \001(\002\032\357\001"
  "\n\rConfiguration\022\021\n\tarea_name\030\001 \001(\t\022\021\n\tta"
  "sk_type\030\002 \001(\t\022\017\n\007section\030\003 \001(\005\022\031\n\021laser_"
  "head_height\030\004 \001(\005\022\024\n\014dedect_zone1\030\005 \001(\005\022"
  "\024\n\014dedect_zone2\030\006 \001(\005\022!\n\031distance_zone_i"
  "nterchange\030\007 \001(\005\022\031\n\021destination_range\030\010 "
  "\001(\005\022\023\n\013height_step\030\t \001(\005\022\r\n\005cargo\030\n \001(\005\032"
  "L\n\nTaskAction\022\023\n\013action_name\030\001 \001(\014\022\024\n\014en"
  "ter_action\030\002 \001(\t\022\023\n\013exit_action\030\003 \001(\t\032\221\002"
  "\n\014CarManagemet\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\014"
  "\022\016\n\006number\030\003 \001(\005\022\013\n\003mac\030\004 \001(\t\022\n\n\002ip\030\005 \001("
  "\t\022\020\n\010car_type\030\006 \001(\014\022\017\n\007battery\030\007 \001(\t\022\022\n\n"
  "rated_load\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005widt"
  "h\030\n \001(\001\022\016\n\006margin\030\013 \001(\001\022\027\n\017reference_poi"
  "nt\030\014 \001(\001\022\020\n\010run_time\030\r \001(\005\022\r\n\005valid\030\016 \001("
  "\t\022\016\n\006lmuser\030\017 \001(\t\022\016\n\006lmdate\030\020 \001(\t\0329\n\013Coo"
  "rdOffset\022\024\n\014station_name\030\001 \001(\t\022\t\n\001x\030\002 \001("
  "\002\022\t\n\001y\030\003 \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_camel_2ddb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_camel_2ddb_2eproto = {
    false, false, 2180, descriptor_table_protodef_camel_2ddb_2eproto,
    "camel-db.proto",
    &descriptor_table_camel_2ddb_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_camel_2ddb_2eproto::offsets,
    file_level_metadata_camel_2ddb_2eproto, file_level_enum_descriptors_camel_2ddb_2eproto,
    file_level_service_descriptors_camel_2ddb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_camel_2ddb_2eproto_getter() {
  return &descriptor_table_camel_2ddb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_camel_2ddb_2eproto(&descriptor_table_camel_2ddb_2eproto);
namespace camel {
namespace api {

// ===================================================================

class ISeeMap_Region::_Internal {
 public:
};

ISeeMap_Region::ISeeMap_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.Region)
}
ISeeMap_Region::ISeeMap_Region(const ISeeMap_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_Region* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.lmuser_){}
    , decltype(_impl_.mapversion_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.floor_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.valid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid().empty()) {
    _this->_impl_.valid_.Set(from._internal_valid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmuser().empty()) {
    _this->_impl_.lmuser_.Set(from._internal_lmuser(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapversion().empty()) {
    _this->_impl_.mapversion_.Set(from._internal_mapversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmdate().empty()) {
    _this->_impl_.lmdate_.Set(from._internal_lmdate(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.floor_number_ = from._impl_.floor_number_;
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.Region)
}

inline void ISeeMap_Region::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.lmuser_){}
    , decltype(_impl_.mapversion_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.floor_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.valid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_Region::~ISeeMap_Region() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.Region)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_Region::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.name_.Destroy();
  _impl_.valid_.Destroy();
  _impl_.lmuser_.Destroy();
  _impl_.mapversion_.Destroy();
  _impl_.lmdate_.Destroy();
}

void ISeeMap_Region::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.Region)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.valid_.ClearToEmpty();
  _impl_.lmuser_.ClearToEmpty();
  _impl_.mapversion_.ClearToEmpty();
  _impl_.lmdate_.ClearToEmpty();
  _impl_.floor_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_Region::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Region.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 floor_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.floor_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_valid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Region.valid"));
        } else
          goto handle_unusual;
        continue;
      // bytes lmuser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_lmuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mapVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mapversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lmdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_lmdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Region.lmdate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_Region::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.Region)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Region.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes description = 2;
  if (!this->_internal_description().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_description(), target);
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 floor_number = 4;
  if (this->_internal_floor_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_floor_number(), target);
  }

  // string valid = 5;
  if (!this->_internal_valid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid().data(), static_cast<int>(this->_internal_valid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Region.valid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_valid(), target);
  }

  // bytes lmuser = 6;
  if (!this->_internal_lmuser().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_lmuser(), target);
  }

  // bytes mapVersion = 7;
  if (!this->_internal_mapversion().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_mapversion(), target);
  }

  // string lmdate = 8;
  if (!this->_internal_lmdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lmdate().data(), static_cast<int>(this->_internal_lmdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Region.lmdate");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lmdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.Region)
  return target;
}

size_t ISeeMap_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.Region)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // bytes name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string valid = 5;
  if (!this->_internal_valid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid());
  }

  // bytes lmuser = 6;
  if (!this->_internal_lmuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lmuser());
  }

  // bytes mapVersion = 7;
  if (!this->_internal_mapversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapversion());
  }

  // string lmdate = 8;
  if (!this->_internal_lmdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmdate());
  }

  // int32 floor_number = 4;
  if (this->_internal_floor_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_floor_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_Region::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_Region::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_Region::GetClassData() const { return &_class_data_; }


void ISeeMap_Region::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_Region*>(&to_msg);
  auto& from = static_cast<const ISeeMap_Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.Region)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_valid().empty()) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (!from._internal_lmuser().empty()) {
    _this->_internal_set_lmuser(from._internal_lmuser());
  }
  if (!from._internal_mapversion().empty()) {
    _this->_internal_set_mapversion(from._internal_mapversion());
  }
  if (!from._internal_lmdate().empty()) {
    _this->_internal_set_lmdate(from._internal_lmdate());
  }
  if (from._internal_floor_number() != 0) {
    _this->_internal_set_floor_number(from._internal_floor_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_Region::CopyFrom(const ISeeMap_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_Region::IsInitialized() const {
  return true;
}

void ISeeMap_Region::InternalSwap(ISeeMap_Region* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valid_, lhs_arena,
      &other->_impl_.valid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmuser_, lhs_arena,
      &other->_impl_.lmuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapversion_, lhs_arena,
      &other->_impl_.mapversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmdate_, lhs_arena,
      &other->_impl_.lmdate_, rhs_arena
  );
  swap(_impl_.floor_number_, other->_impl_.floor_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_Region::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[0]);
}

// ===================================================================

class ISeeMap_Area::_Internal {
 public:
};

ISeeMap_Area::ISeeMap_Area(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.Area)
}
ISeeMap_Area::ISeeMap_Area(const ISeeMap_Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_Area* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.fork_lift_height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region_id().empty()) {
    _this->_impl_.region_id_.Set(from._internal_region_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.fork_lift_height_ = from._impl_.fork_lift_height_;
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.Area)
}

inline void ISeeMap_Area::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.fork_lift_height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_Area::~ISeeMap_Area() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.Area)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_Area::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.region_id_.Destroy();
}

void ISeeMap_Area::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_Area::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.Area)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.region_id_.ClearToEmpty();
  _impl_.fork_lift_height_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_Area::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Area.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Area.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 fork_lift_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fork_lift_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_region_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Area.region_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_Area::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.Area)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Area.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Area.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 fork_lift_height = 3;
  if (this->_internal_fork_lift_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fork_lift_height(), target);
  }

  // string region_id = 4;
  if (!this->_internal_region_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_id().data(), static_cast<int>(this->_internal_region_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Area.region_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_region_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.Area)
  return target;
}

size_t ISeeMap_Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.Area)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string region_id = 4;
  if (!this->_internal_region_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_id());
  }

  // int32 fork_lift_height = 3;
  if (this->_internal_fork_lift_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fork_lift_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_Area::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_Area::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_Area::GetClassData() const { return &_class_data_; }


void ISeeMap_Area::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_Area*>(&to_msg);
  auto& from = static_cast<const ISeeMap_Area&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.Area)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_region_id().empty()) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  if (from._internal_fork_lift_height() != 0) {
    _this->_internal_set_fork_lift_height(from._internal_fork_lift_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_Area::CopyFrom(const ISeeMap_Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_Area::IsInitialized() const {
  return true;
}

void ISeeMap_Area::InternalSwap(ISeeMap_Area* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_id_, lhs_arena,
      &other->_impl_.region_id_, rhs_arena
  );
  swap(_impl_.fork_lift_height_, other->_impl_.fork_lift_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_Area::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[1]);
}

// ===================================================================

class ISeeMap_Path::_Internal {
 public:
};

ISeeMap_Path::ISeeMap_Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.Path)
}
ISeeMap_Path::ISeeMap_Path(const ISeeMap_Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_Path* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.from_station_rfid_){}
    , decltype(_impl_.to_station_rfid_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.transit_action_){}
    , decltype(_impl_.enter_action_){}
    , decltype(_impl_.exit_action_){}
    , decltype(_impl_.car_type_){}
    , decltype(_impl_.goals_angle_){}
    , decltype(_impl_.goals_height_){}
    , decltype(_impl_.angle_compensate_){}
    , decltype(_impl_.laser_head_height_){}
    , decltype(_impl_.uncertainty_){}
    , decltype(_impl_.music_){}
    , decltype(_impl_.dedect_zone1_){}
    , decltype(_impl_.dedect_zone2_){}
    , decltype(_impl_.velocity_max_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.destination_range_){}
    , decltype(_impl_.distance_zone_interchange_){}
    , decltype(_impl_.is_running_){}
    , decltype(_impl_.height_step_){}
    , decltype(_impl_.cargo_){}
    , decltype(_impl_.driving_direction_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.allow_auto_avoid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from_station_rfid().empty()) {
    _this->_impl_.from_station_rfid_.Set(from._internal_from_station_rfid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to_station_rfid().empty()) {
    _this->_impl_.to_station_rfid_.Set(from._internal_to_station_rfid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmdate().empty()) {
    _this->_impl_.lmdate_.Set(from._internal_lmdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region_id().empty()) {
    _this->_impl_.region_id_.Set(from._internal_region_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transit_action().empty()) {
    _this->_impl_.transit_action_.Set(from._internal_transit_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enter_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enter_action().empty()) {
    _this->_impl_.enter_action_.Set(from._internal_enter_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exit_action().empty()) {
    _this->_impl_.exit_action_.Set(from._internal_exit_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.car_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.car_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_car_type().empty()) {
    _this->_impl_.car_type_.Set(from._internal_car_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.goals_angle_, &from._impl_.goals_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_auto_avoid_) -
    reinterpret_cast<char*>(&_impl_.goals_angle_)) + sizeof(_impl_.allow_auto_avoid_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.Path)
}

inline void ISeeMap_Path::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.from_station_rfid_){}
    , decltype(_impl_.to_station_rfid_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.transit_action_){}
    , decltype(_impl_.enter_action_){}
    , decltype(_impl_.exit_action_){}
    , decltype(_impl_.car_type_){}
    , decltype(_impl_.goals_angle_){0}
    , decltype(_impl_.goals_height_){0}
    , decltype(_impl_.angle_compensate_){0}
    , decltype(_impl_.laser_head_height_){0}
    , decltype(_impl_.uncertainty_){0}
    , decltype(_impl_.music_){0}
    , decltype(_impl_.dedect_zone1_){0}
    , decltype(_impl_.dedect_zone2_){0}
    , decltype(_impl_.velocity_max_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.destination_range_){0}
    , decltype(_impl_.distance_zone_interchange_){0}
    , decltype(_impl_.is_running_){0}
    , decltype(_impl_.height_step_){0}
    , decltype(_impl_.cargo_){0}
    , decltype(_impl_.driving_direction_){0}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.allow_auto_avoid_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enter_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.car_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.car_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_Path::~ISeeMap_Path() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.from_station_rfid_.Destroy();
  _impl_.to_station_rfid_.Destroy();
  _impl_.flag_.Destroy();
  _impl_.lmdate_.Destroy();
  _impl_.region_id_.Destroy();
  _impl_.transit_action_.Destroy();
  _impl_.enter_action_.Destroy();
  _impl_.exit_action_.Destroy();
  _impl_.car_type_.Destroy();
}

void ISeeMap_Path::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_Path::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.from_station_rfid_.ClearToEmpty();
  _impl_.to_station_rfid_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  _impl_.lmdate_.ClearToEmpty();
  _impl_.region_id_.ClearToEmpty();
  _impl_.transit_action_.ClearToEmpty();
  _impl_.enter_action_.ClearToEmpty();
  _impl_.exit_action_.ClearToEmpty();
  _impl_.car_type_.ClearToEmpty();
  ::memset(&_impl_.goals_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allow_auto_avoid_) -
      reinterpret_cast<char*>(&_impl_.goals_angle_)) + sizeof(_impl_.allow_auto_avoid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.id"));
        } else
          goto handle_unusual;
        continue;
      // string from_station_rfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from_station_rfid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.from_station_rfid"));
        } else
          goto handle_unusual;
        continue;
      // string to_station_rfid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to_station_rfid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.to_station_rfid"));
        } else
          goto handle_unusual;
        continue;
      // float goals_angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.goals_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float goals_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.goals_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle_compensate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.angle_compensate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float laser_head_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.laser_head_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float uncertainty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 music = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dedect_zone1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dedect_zone1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dedect_zone2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.dedect_zone2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float velocity_max = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.velocity_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float radius = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float destination_range = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.destination_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float distance_zone_interchange = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.distance_zone_interchange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 is_running = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.is_running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_step = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.height_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cargo = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.cargo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 driving_direction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.driving_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float distance = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string flag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.flag"));
        } else
          goto handle_unusual;
        continue;
      // string lmdate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_lmdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.lmdate"));
        } else
          goto handle_unusual;
        continue;
      // string region_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_region_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.region_id"));
        } else
          goto handle_unusual;
        continue;
      // string transit_action = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_transit_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.transit_action"));
        } else
          goto handle_unusual;
        continue;
      // string enter_action = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_enter_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.enter_action"));
        } else
          goto handle_unusual;
        continue;
      // string exit_action = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_exit_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.exit_action"));
        } else
          goto handle_unusual;
        continue;
      // bool allow_auto_avoid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.allow_auto_avoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string car_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_car_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Path.car_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string from_station_rfid = 2;
  if (!this->_internal_from_station_rfid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_station_rfid().data(), static_cast<int>(this->_internal_from_station_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.from_station_rfid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_station_rfid(), target);
  }

  // string to_station_rfid = 3;
  if (!this->_internal_to_station_rfid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_station_rfid().data(), static_cast<int>(this->_internal_to_station_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.to_station_rfid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to_station_rfid(), target);
  }

  // float goals_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_angle = this->_internal_goals_angle();
  uint32_t raw_goals_angle;
  memcpy(&raw_goals_angle, &tmp_goals_angle, sizeof(tmp_goals_angle));
  if (raw_goals_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_goals_angle(), target);
  }

  // float goals_height = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_height = this->_internal_goals_height();
  uint32_t raw_goals_height;
  memcpy(&raw_goals_height, &tmp_goals_height, sizeof(tmp_goals_height));
  if (raw_goals_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_goals_height(), target);
  }

  // float angle_compensate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_compensate = this->_internal_angle_compensate();
  uint32_t raw_angle_compensate;
  memcpy(&raw_angle_compensate, &tmp_angle_compensate, sizeof(tmp_angle_compensate));
  if (raw_angle_compensate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_angle_compensate(), target);
  }

  // float laser_head_height = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_laser_head_height = this->_internal_laser_head_height();
  uint32_t raw_laser_head_height;
  memcpy(&raw_laser_head_height, &tmp_laser_head_height, sizeof(tmp_laser_head_height));
  if (raw_laser_head_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_laser_head_height(), target);
  }

  // float uncertainty = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty = this->_internal_uncertainty();
  uint32_t raw_uncertainty;
  memcpy(&raw_uncertainty, &tmp_uncertainty, sizeof(tmp_uncertainty));
  if (raw_uncertainty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_uncertainty(), target);
  }

  // int32 music = 9;
  if (this->_internal_music() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_music(), target);
  }

  // int32 dedect_zone1 = 10;
  if (this->_internal_dedect_zone1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_dedect_zone1(), target);
  }

  // int32 dedect_zone2 = 11;
  if (this->_internal_dedect_zone2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_dedect_zone2(), target);
  }

  // float velocity_max = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_max = this->_internal_velocity_max();
  uint32_t raw_velocity_max;
  memcpy(&raw_velocity_max, &tmp_velocity_max, sizeof(tmp_velocity_max));
  if (raw_velocity_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_velocity_max(), target);
  }

  // float radius = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_radius(), target);
  }

  // float destination_range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destination_range = this->_internal_destination_range();
  uint32_t raw_destination_range;
  memcpy(&raw_destination_range, &tmp_destination_range, sizeof(tmp_destination_range));
  if (raw_destination_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_destination_range(), target);
  }

  // float distance_zone_interchange = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_zone_interchange = this->_internal_distance_zone_interchange();
  uint32_t raw_distance_zone_interchange;
  memcpy(&raw_distance_zone_interchange, &tmp_distance_zone_interchange, sizeof(tmp_distance_zone_interchange));
  if (raw_distance_zone_interchange != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_distance_zone_interchange(), target);
  }

  // int32 is_running = 16;
  if (this->_internal_is_running() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_is_running(), target);
  }

  // int32 height_step = 17;
  if (this->_internal_height_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_height_step(), target);
  }

  // int32 cargo = 18;
  if (this->_internal_cargo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_cargo(), target);
  }

  // int32 driving_direction = 19;
  if (this->_internal_driving_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_driving_direction(), target);
  }

  // float distance = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_distance(), target);
  }

  // string flag = 21;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.flag");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_flag(), target);
  }

  // string lmdate = 22;
  if (!this->_internal_lmdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lmdate().data(), static_cast<int>(this->_internal_lmdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.lmdate");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_lmdate(), target);
  }

  // string region_id = 23;
  if (!this->_internal_region_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_id().data(), static_cast<int>(this->_internal_region_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.region_id");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_region_id(), target);
  }

  // string transit_action = 24;
  if (!this->_internal_transit_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transit_action().data(), static_cast<int>(this->_internal_transit_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.transit_action");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_transit_action(), target);
  }

  // string enter_action = 25;
  if (!this->_internal_enter_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enter_action().data(), static_cast<int>(this->_internal_enter_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.enter_action");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_enter_action(), target);
  }

  // string exit_action = 26;
  if (!this->_internal_exit_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exit_action().data(), static_cast<int>(this->_internal_exit_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.exit_action");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_exit_action(), target);
  }

  // bool allow_auto_avoid = 27;
  if (this->_internal_allow_auto_avoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_allow_auto_avoid(), target);
  }

  // string car_type = 28;
  if (!this->_internal_car_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_car_type().data(), static_cast<int>(this->_internal_car_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Path.car_type");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_car_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.Path)
  return target;
}

size_t ISeeMap_Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string from_station_rfid = 2;
  if (!this->_internal_from_station_rfid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_station_rfid());
  }

  // string to_station_rfid = 3;
  if (!this->_internal_to_station_rfid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_station_rfid());
  }

  // string flag = 21;
  if (!this->_internal_flag().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // string lmdate = 22;
  if (!this->_internal_lmdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmdate());
  }

  // string region_id = 23;
  if (!this->_internal_region_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_id());
  }

  // string transit_action = 24;
  if (!this->_internal_transit_action().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transit_action());
  }

  // string enter_action = 25;
  if (!this->_internal_enter_action().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enter_action());
  }

  // string exit_action = 26;
  if (!this->_internal_exit_action().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exit_action());
  }

  // string car_type = 28;
  if (!this->_internal_car_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_type());
  }

  // float goals_angle = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_angle = this->_internal_goals_angle();
  uint32_t raw_goals_angle;
  memcpy(&raw_goals_angle, &tmp_goals_angle, sizeof(tmp_goals_angle));
  if (raw_goals_angle != 0) {
    total_size += 1 + 4;
  }

  // float goals_height = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_height = this->_internal_goals_height();
  uint32_t raw_goals_height;
  memcpy(&raw_goals_height, &tmp_goals_height, sizeof(tmp_goals_height));
  if (raw_goals_height != 0) {
    total_size += 1 + 4;
  }

  // float angle_compensate = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_compensate = this->_internal_angle_compensate();
  uint32_t raw_angle_compensate;
  memcpy(&raw_angle_compensate, &tmp_angle_compensate, sizeof(tmp_angle_compensate));
  if (raw_angle_compensate != 0) {
    total_size += 1 + 4;
  }

  // float laser_head_height = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_laser_head_height = this->_internal_laser_head_height();
  uint32_t raw_laser_head_height;
  memcpy(&raw_laser_head_height, &tmp_laser_head_height, sizeof(tmp_laser_head_height));
  if (raw_laser_head_height != 0) {
    total_size += 1 + 4;
  }

  // float uncertainty = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty = this->_internal_uncertainty();
  uint32_t raw_uncertainty;
  memcpy(&raw_uncertainty, &tmp_uncertainty, sizeof(tmp_uncertainty));
  if (raw_uncertainty != 0) {
    total_size += 1 + 4;
  }

  // int32 music = 9;
  if (this->_internal_music() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_music());
  }

  // int32 dedect_zone1 = 10;
  if (this->_internal_dedect_zone1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dedect_zone1());
  }

  // int32 dedect_zone2 = 11;
  if (this->_internal_dedect_zone2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dedect_zone2());
  }

  // float velocity_max = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_max = this->_internal_velocity_max();
  uint32_t raw_velocity_max;
  memcpy(&raw_velocity_max, &tmp_velocity_max, sizeof(tmp_velocity_max));
  if (raw_velocity_max != 0) {
    total_size += 1 + 4;
  }

  // float radius = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float destination_range = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destination_range = this->_internal_destination_range();
  uint32_t raw_destination_range;
  memcpy(&raw_destination_range, &tmp_destination_range, sizeof(tmp_destination_range));
  if (raw_destination_range != 0) {
    total_size += 1 + 4;
  }

  // float distance_zone_interchange = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_zone_interchange = this->_internal_distance_zone_interchange();
  uint32_t raw_distance_zone_interchange;
  memcpy(&raw_distance_zone_interchange, &tmp_distance_zone_interchange, sizeof(tmp_distance_zone_interchange));
  if (raw_distance_zone_interchange != 0) {
    total_size += 1 + 4;
  }

  // int32 is_running = 16;
  if (this->_internal_is_running() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_is_running());
  }

  // int32 height_step = 17;
  if (this->_internal_height_step() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_height_step());
  }

  // int32 cargo = 18;
  if (this->_internal_cargo() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_cargo());
  }

  // int32 driving_direction = 19;
  if (this->_internal_driving_direction() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_driving_direction());
  }

  // float distance = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = this->_internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 2 + 4;
  }

  // bool allow_auto_avoid = 27;
  if (this->_internal_allow_auto_avoid() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_Path::GetClassData() const { return &_class_data_; }


void ISeeMap_Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_Path*>(&to_msg);
  auto& from = static_cast<const ISeeMap_Path&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.Path)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_from_station_rfid().empty()) {
    _this->_internal_set_from_station_rfid(from._internal_from_station_rfid());
  }
  if (!from._internal_to_station_rfid().empty()) {
    _this->_internal_set_to_station_rfid(from._internal_to_station_rfid());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (!from._internal_lmdate().empty()) {
    _this->_internal_set_lmdate(from._internal_lmdate());
  }
  if (!from._internal_region_id().empty()) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  if (!from._internal_transit_action().empty()) {
    _this->_internal_set_transit_action(from._internal_transit_action());
  }
  if (!from._internal_enter_action().empty()) {
    _this->_internal_set_enter_action(from._internal_enter_action());
  }
  if (!from._internal_exit_action().empty()) {
    _this->_internal_set_exit_action(from._internal_exit_action());
  }
  if (!from._internal_car_type().empty()) {
    _this->_internal_set_car_type(from._internal_car_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_angle = from._internal_goals_angle();
  uint32_t raw_goals_angle;
  memcpy(&raw_goals_angle, &tmp_goals_angle, sizeof(tmp_goals_angle));
  if (raw_goals_angle != 0) {
    _this->_internal_set_goals_angle(from._internal_goals_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_goals_height = from._internal_goals_height();
  uint32_t raw_goals_height;
  memcpy(&raw_goals_height, &tmp_goals_height, sizeof(tmp_goals_height));
  if (raw_goals_height != 0) {
    _this->_internal_set_goals_height(from._internal_goals_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle_compensate = from._internal_angle_compensate();
  uint32_t raw_angle_compensate;
  memcpy(&raw_angle_compensate, &tmp_angle_compensate, sizeof(tmp_angle_compensate));
  if (raw_angle_compensate != 0) {
    _this->_internal_set_angle_compensate(from._internal_angle_compensate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_laser_head_height = from._internal_laser_head_height();
  uint32_t raw_laser_head_height;
  memcpy(&raw_laser_head_height, &tmp_laser_head_height, sizeof(tmp_laser_head_height));
  if (raw_laser_head_height != 0) {
    _this->_internal_set_laser_head_height(from._internal_laser_head_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_uncertainty = from._internal_uncertainty();
  uint32_t raw_uncertainty;
  memcpy(&raw_uncertainty, &tmp_uncertainty, sizeof(tmp_uncertainty));
  if (raw_uncertainty != 0) {
    _this->_internal_set_uncertainty(from._internal_uncertainty());
  }
  if (from._internal_music() != 0) {
    _this->_internal_set_music(from._internal_music());
  }
  if (from._internal_dedect_zone1() != 0) {
    _this->_internal_set_dedect_zone1(from._internal_dedect_zone1());
  }
  if (from._internal_dedect_zone2() != 0) {
    _this->_internal_set_dedect_zone2(from._internal_dedect_zone2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity_max = from._internal_velocity_max();
  uint32_t raw_velocity_max;
  memcpy(&raw_velocity_max, &tmp_velocity_max, sizeof(tmp_velocity_max));
  if (raw_velocity_max != 0) {
    _this->_internal_set_velocity_max(from._internal_velocity_max());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_destination_range = from._internal_destination_range();
  uint32_t raw_destination_range;
  memcpy(&raw_destination_range, &tmp_destination_range, sizeof(tmp_destination_range));
  if (raw_destination_range != 0) {
    _this->_internal_set_destination_range(from._internal_destination_range());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance_zone_interchange = from._internal_distance_zone_interchange();
  uint32_t raw_distance_zone_interchange;
  memcpy(&raw_distance_zone_interchange, &tmp_distance_zone_interchange, sizeof(tmp_distance_zone_interchange));
  if (raw_distance_zone_interchange != 0) {
    _this->_internal_set_distance_zone_interchange(from._internal_distance_zone_interchange());
  }
  if (from._internal_is_running() != 0) {
    _this->_internal_set_is_running(from._internal_is_running());
  }
  if (from._internal_height_step() != 0) {
    _this->_internal_set_height_step(from._internal_height_step());
  }
  if (from._internal_cargo() != 0) {
    _this->_internal_set_cargo(from._internal_cargo());
  }
  if (from._internal_driving_direction() != 0) {
    _this->_internal_set_driving_direction(from._internal_driving_direction());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_distance = from._internal_distance();
  uint32_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  if (from._internal_allow_auto_avoid() != 0) {
    _this->_internal_set_allow_auto_avoid(from._internal_allow_auto_avoid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_Path::CopyFrom(const ISeeMap_Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_Path::IsInitialized() const {
  return true;
}

void ISeeMap_Path::InternalSwap(ISeeMap_Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_station_rfid_, lhs_arena,
      &other->_impl_.from_station_rfid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_station_rfid_, lhs_arena,
      &other->_impl_.to_station_rfid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmdate_, lhs_arena,
      &other->_impl_.lmdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_id_, lhs_arena,
      &other->_impl_.region_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transit_action_, lhs_arena,
      &other->_impl_.transit_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enter_action_, lhs_arena,
      &other->_impl_.enter_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exit_action_, lhs_arena,
      &other->_impl_.exit_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.car_type_, lhs_arena,
      &other->_impl_.car_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ISeeMap_Path, _impl_.allow_auto_avoid_)
      + sizeof(ISeeMap_Path::_impl_.allow_auto_avoid_)
      - PROTOBUF_FIELD_OFFSET(ISeeMap_Path, _impl_.goals_angle_)>(
          reinterpret_cast<char*>(&_impl_.goals_angle_),
          reinterpret_cast<char*>(&other->_impl_.goals_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[2]);
}

// ===================================================================

class ISeeMap_Station::_Internal {
 public:
};

ISeeMap_Station::ISeeMap_Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.Station)
}
ISeeMap_Station::ISeeMap_Station(const ISeeMap_Station& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_Station* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.station_rfid_){}
    , decltype(_impl_.station_name_){}
    , decltype(_impl_.station_type_){}
    , decltype(_impl_.related_id_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.space_x_){}
    , decltype(_impl_.space_y_){}
    , decltype(_impl_.z_axis_){}
    , decltype(_impl_.qr_id_){}
    , decltype(_impl_.qr_angle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_station_rfid().empty()) {
    _this->_impl_.station_rfid_.Set(from._internal_station_rfid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.station_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_station_name().empty()) {
    _this->_impl_.station_name_.Set(from._internal_station_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.station_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_station_type().empty()) {
    _this->_impl_.station_type_.Set(from._internal_station_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.related_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.related_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_related_id().empty()) {
    _this->_impl_.related_id_.Set(from._internal_related_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flag().empty()) {
    _this->_impl_.flag_.Set(from._internal_flag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmdate().empty()) {
    _this->_impl_.lmdate_.Set(from._internal_lmdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region_id().empty()) {
    _this->_impl_.region_id_.Set(from._internal_region_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.space_x_, &from._impl_.space_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.qr_angle_) -
    reinterpret_cast<char*>(&_impl_.space_x_)) + sizeof(_impl_.qr_angle_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.Station)
}

inline void ISeeMap_Station::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.station_rfid_){}
    , decltype(_impl_.station_name_){}
    , decltype(_impl_.station_type_){}
    , decltype(_impl_.related_id_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.space_x_){0}
    , decltype(_impl_.space_y_){0}
    , decltype(_impl_.z_axis_){0}
    , decltype(_impl_.qr_id_){0u}
    , decltype(_impl_.qr_angle_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.station_rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.station_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.station_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.related_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.related_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_Station::~ISeeMap_Station() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.Station)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_Station::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.station_rfid_.Destroy();
  _impl_.station_name_.Destroy();
  _impl_.station_type_.Destroy();
  _impl_.related_id_.Destroy();
  _impl_.flag_.Destroy();
  _impl_.lmdate_.Destroy();
  _impl_.region_id_.Destroy();
}

void ISeeMap_Station::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_Station::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.Station)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.station_rfid_.ClearToEmpty();
  _impl_.station_name_.ClearToEmpty();
  _impl_.station_type_.ClearToEmpty();
  _impl_.related_id_.ClearToEmpty();
  _impl_.flag_.ClearToEmpty();
  _impl_.lmdate_.ClearToEmpty();
  _impl_.region_id_.ClearToEmpty();
  ::memset(&_impl_.space_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.qr_angle_) -
      reinterpret_cast<char*>(&_impl_.space_x_)) + sizeof(_impl_.qr_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_Station::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.id"));
        } else
          goto handle_unusual;
        continue;
      // string station_rfid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_station_rfid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.station_rfid"));
        } else
          goto handle_unusual;
        continue;
      // string station_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_station_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.station_name"));
        } else
          goto handle_unusual;
        continue;
      // string station_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_station_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.station_type"));
        } else
          goto handle_unusual;
        continue;
      // float space_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.space_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float space_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.space_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z_axis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.z_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string related_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_related_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.related_id"));
        } else
          goto handle_unusual;
        continue;
      // string flag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.flag"));
        } else
          goto handle_unusual;
        continue;
      // string lmdate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_lmdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.lmdate"));
        } else
          goto handle_unusual;
        continue;
      // string region_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_region_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Station.region_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 QR_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.qr_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float QR_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.qr_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_Station::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.Station)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string station_rfid = 2;
  if (!this->_internal_station_rfid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_rfid().data(), static_cast<int>(this->_internal_station_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.station_rfid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_station_rfid(), target);
  }

  // string station_name = 3;
  if (!this->_internal_station_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_name().data(), static_cast<int>(this->_internal_station_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.station_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_station_name(), target);
  }

  // string station_type = 4;
  if (!this->_internal_station_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_type().data(), static_cast<int>(this->_internal_station_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.station_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_station_type(), target);
  }

  // float space_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_x = this->_internal_space_x();
  uint32_t raw_space_x;
  memcpy(&raw_space_x, &tmp_space_x, sizeof(tmp_space_x));
  if (raw_space_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_space_x(), target);
  }

  // float space_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_y = this->_internal_space_y();
  uint32_t raw_space_y;
  memcpy(&raw_space_y, &tmp_space_y, sizeof(tmp_space_y));
  if (raw_space_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_space_y(), target);
  }

  // float z_axis = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_axis = this->_internal_z_axis();
  uint32_t raw_z_axis;
  memcpy(&raw_z_axis, &tmp_z_axis, sizeof(tmp_z_axis));
  if (raw_z_axis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_z_axis(), target);
  }

  // string related_id = 8;
  if (!this->_internal_related_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_related_id().data(), static_cast<int>(this->_internal_related_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.related_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_related_id(), target);
  }

  // string flag = 9;
  if (!this->_internal_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flag().data(), static_cast<int>(this->_internal_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.flag");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_flag(), target);
  }

  // string lmdate = 10;
  if (!this->_internal_lmdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lmdate().data(), static_cast<int>(this->_internal_lmdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.lmdate");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_lmdate(), target);
  }

  // string region_id = 11;
  if (!this->_internal_region_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_id().data(), static_cast<int>(this->_internal_region_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Station.region_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_region_id(), target);
  }

  // uint32 QR_id = 12;
  if (this->_internal_qr_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_qr_id(), target);
  }

  // float QR_angle = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qr_angle = this->_internal_qr_angle();
  uint32_t raw_qr_angle;
  memcpy(&raw_qr_angle, &tmp_qr_angle, sizeof(tmp_qr_angle));
  if (raw_qr_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_qr_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.Station)
  return target;
}

size_t ISeeMap_Station::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.Station)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string station_rfid = 2;
  if (!this->_internal_station_rfid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_rfid());
  }

  // string station_name = 3;
  if (!this->_internal_station_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_name());
  }

  // string station_type = 4;
  if (!this->_internal_station_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_type());
  }

  // string related_id = 8;
  if (!this->_internal_related_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_related_id());
  }

  // string flag = 9;
  if (!this->_internal_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flag());
  }

  // string lmdate = 10;
  if (!this->_internal_lmdate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmdate());
  }

  // string region_id = 11;
  if (!this->_internal_region_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_id());
  }

  // float space_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_x = this->_internal_space_x();
  uint32_t raw_space_x;
  memcpy(&raw_space_x, &tmp_space_x, sizeof(tmp_space_x));
  if (raw_space_x != 0) {
    total_size += 1 + 4;
  }

  // float space_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_y = this->_internal_space_y();
  uint32_t raw_space_y;
  memcpy(&raw_space_y, &tmp_space_y, sizeof(tmp_space_y));
  if (raw_space_y != 0) {
    total_size += 1 + 4;
  }

  // float z_axis = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_axis = this->_internal_z_axis();
  uint32_t raw_z_axis;
  memcpy(&raw_z_axis, &tmp_z_axis, sizeof(tmp_z_axis));
  if (raw_z_axis != 0) {
    total_size += 1 + 4;
  }

  // uint32 QR_id = 12;
  if (this->_internal_qr_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_qr_id());
  }

  // float QR_angle = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qr_angle = this->_internal_qr_angle();
  uint32_t raw_qr_angle;
  memcpy(&raw_qr_angle, &tmp_qr_angle, sizeof(tmp_qr_angle));
  if (raw_qr_angle != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_Station::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_Station::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_Station::GetClassData() const { return &_class_data_; }


void ISeeMap_Station::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_Station*>(&to_msg);
  auto& from = static_cast<const ISeeMap_Station&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.Station)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_station_rfid().empty()) {
    _this->_internal_set_station_rfid(from._internal_station_rfid());
  }
  if (!from._internal_station_name().empty()) {
    _this->_internal_set_station_name(from._internal_station_name());
  }
  if (!from._internal_station_type().empty()) {
    _this->_internal_set_station_type(from._internal_station_type());
  }
  if (!from._internal_related_id().empty()) {
    _this->_internal_set_related_id(from._internal_related_id());
  }
  if (!from._internal_flag().empty()) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (!from._internal_lmdate().empty()) {
    _this->_internal_set_lmdate(from._internal_lmdate());
  }
  if (!from._internal_region_id().empty()) {
    _this->_internal_set_region_id(from._internal_region_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_x = from._internal_space_x();
  uint32_t raw_space_x;
  memcpy(&raw_space_x, &tmp_space_x, sizeof(tmp_space_x));
  if (raw_space_x != 0) {
    _this->_internal_set_space_x(from._internal_space_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_space_y = from._internal_space_y();
  uint32_t raw_space_y;
  memcpy(&raw_space_y, &tmp_space_y, sizeof(tmp_space_y));
  if (raw_space_y != 0) {
    _this->_internal_set_space_y(from._internal_space_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z_axis = from._internal_z_axis();
  uint32_t raw_z_axis;
  memcpy(&raw_z_axis, &tmp_z_axis, sizeof(tmp_z_axis));
  if (raw_z_axis != 0) {
    _this->_internal_set_z_axis(from._internal_z_axis());
  }
  if (from._internal_qr_id() != 0) {
    _this->_internal_set_qr_id(from._internal_qr_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_qr_angle = from._internal_qr_angle();
  uint32_t raw_qr_angle;
  memcpy(&raw_qr_angle, &tmp_qr_angle, sizeof(tmp_qr_angle));
  if (raw_qr_angle != 0) {
    _this->_internal_set_qr_angle(from._internal_qr_angle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_Station::CopyFrom(const ISeeMap_Station& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.Station)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_Station::IsInitialized() const {
  return true;
}

void ISeeMap_Station::InternalSwap(ISeeMap_Station* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.station_rfid_, lhs_arena,
      &other->_impl_.station_rfid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.station_name_, lhs_arena,
      &other->_impl_.station_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.station_type_, lhs_arena,
      &other->_impl_.station_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.related_id_, lhs_arena,
      &other->_impl_.related_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flag_, lhs_arena,
      &other->_impl_.flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmdate_, lhs_arena,
      &other->_impl_.lmdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_id_, lhs_arena,
      &other->_impl_.region_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ISeeMap_Station, _impl_.qr_angle_)
      + sizeof(ISeeMap_Station::_impl_.qr_angle_)
      - PROTOBUF_FIELD_OFFSET(ISeeMap_Station, _impl_.space_x_)>(
          reinterpret_cast<char*>(&_impl_.space_x_),
          reinterpret_cast<char*>(&other->_impl_.space_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_Station::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[3]);
}

// ===================================================================

class ISeeMap_Configuration::_Internal {
 public:
};

ISeeMap_Configuration::ISeeMap_Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.Configuration)
}
ISeeMap_Configuration::ISeeMap_Configuration(const ISeeMap_Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_Configuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.area_name_){}
    , decltype(_impl_.task_type_){}
    , decltype(_impl_.section_){}
    , decltype(_impl_.laser_head_height_){}
    , decltype(_impl_.dedect_zone1_){}
    , decltype(_impl_.dedect_zone2_){}
    , decltype(_impl_.distance_zone_interchange_){}
    , decltype(_impl_.destination_range_){}
    , decltype(_impl_.height_step_){}
    , decltype(_impl_.cargo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.area_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_area_name().empty()) {
    _this->_impl_.area_name_.Set(from._internal_area_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.task_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_type().empty()) {
    _this->_impl_.task_type_.Set(from._internal_task_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.section_, &from._impl_.section_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cargo_) -
    reinterpret_cast<char*>(&_impl_.section_)) + sizeof(_impl_.cargo_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.Configuration)
}

inline void ISeeMap_Configuration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.area_name_){}
    , decltype(_impl_.task_type_){}
    , decltype(_impl_.section_){0}
    , decltype(_impl_.laser_head_height_){0}
    , decltype(_impl_.dedect_zone1_){0}
    , decltype(_impl_.dedect_zone2_){0}
    , decltype(_impl_.distance_zone_interchange_){0}
    , decltype(_impl_.destination_range_){0}
    , decltype(_impl_.height_step_){0}
    , decltype(_impl_.cargo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.area_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.task_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_Configuration::~ISeeMap_Configuration() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.Configuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.area_name_.Destroy();
  _impl_.task_type_.Destroy();
}

void ISeeMap_Configuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.Configuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.area_name_.ClearToEmpty();
  _impl_.task_type_.ClearToEmpty();
  ::memset(&_impl_.section_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cargo_) -
      reinterpret_cast<char*>(&_impl_.section_)) + sizeof(_impl_.cargo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_Configuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string area_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_area_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Configuration.area_name"));
        } else
          goto handle_unusual;
        continue;
      // string task_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.Configuration.task_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 section = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 laser_head_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.laser_head_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dedect_zone1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dedect_zone1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dedect_zone2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dedect_zone2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 distance_zone_interchange = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.distance_zone_interchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 destination_range = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.destination_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_step = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.height_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cargo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cargo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_Configuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.Configuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_name = 1;
  if (!this->_internal_area_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area_name().data(), static_cast<int>(this->_internal_area_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Configuration.area_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_area_name(), target);
  }

  // string task_type = 2;
  if (!this->_internal_task_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_type().data(), static_cast<int>(this->_internal_task_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.Configuration.task_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_type(), target);
  }

  // int32 section = 3;
  if (this->_internal_section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_section(), target);
  }

  // int32 laser_head_height = 4;
  if (this->_internal_laser_head_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_laser_head_height(), target);
  }

  // int32 dedect_zone1 = 5;
  if (this->_internal_dedect_zone1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dedect_zone1(), target);
  }

  // int32 dedect_zone2 = 6;
  if (this->_internal_dedect_zone2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dedect_zone2(), target);
  }

  // int32 distance_zone_interchange = 7;
  if (this->_internal_distance_zone_interchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_distance_zone_interchange(), target);
  }

  // int32 destination_range = 8;
  if (this->_internal_destination_range() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_destination_range(), target);
  }

  // int32 height_step = 9;
  if (this->_internal_height_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_height_step(), target);
  }

  // int32 cargo = 10;
  if (this->_internal_cargo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_cargo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.Configuration)
  return target;
}

size_t ISeeMap_Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.Configuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string area_name = 1;
  if (!this->_internal_area_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area_name());
  }

  // string task_type = 2;
  if (!this->_internal_task_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_type());
  }

  // int32 section = 3;
  if (this->_internal_section() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_section());
  }

  // int32 laser_head_height = 4;
  if (this->_internal_laser_head_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_laser_head_height());
  }

  // int32 dedect_zone1 = 5;
  if (this->_internal_dedect_zone1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dedect_zone1());
  }

  // int32 dedect_zone2 = 6;
  if (this->_internal_dedect_zone2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dedect_zone2());
  }

  // int32 distance_zone_interchange = 7;
  if (this->_internal_distance_zone_interchange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_distance_zone_interchange());
  }

  // int32 destination_range = 8;
  if (this->_internal_destination_range() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_destination_range());
  }

  // int32 height_step = 9;
  if (this->_internal_height_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height_step());
  }

  // int32 cargo = 10;
  if (this->_internal_cargo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cargo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_Configuration::GetClassData() const { return &_class_data_; }


void ISeeMap_Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_Configuration*>(&to_msg);
  auto& from = static_cast<const ISeeMap_Configuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.Configuration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_area_name().empty()) {
    _this->_internal_set_area_name(from._internal_area_name());
  }
  if (!from._internal_task_type().empty()) {
    _this->_internal_set_task_type(from._internal_task_type());
  }
  if (from._internal_section() != 0) {
    _this->_internal_set_section(from._internal_section());
  }
  if (from._internal_laser_head_height() != 0) {
    _this->_internal_set_laser_head_height(from._internal_laser_head_height());
  }
  if (from._internal_dedect_zone1() != 0) {
    _this->_internal_set_dedect_zone1(from._internal_dedect_zone1());
  }
  if (from._internal_dedect_zone2() != 0) {
    _this->_internal_set_dedect_zone2(from._internal_dedect_zone2());
  }
  if (from._internal_distance_zone_interchange() != 0) {
    _this->_internal_set_distance_zone_interchange(from._internal_distance_zone_interchange());
  }
  if (from._internal_destination_range() != 0) {
    _this->_internal_set_destination_range(from._internal_destination_range());
  }
  if (from._internal_height_step() != 0) {
    _this->_internal_set_height_step(from._internal_height_step());
  }
  if (from._internal_cargo() != 0) {
    _this->_internal_set_cargo(from._internal_cargo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_Configuration::CopyFrom(const ISeeMap_Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_Configuration::IsInitialized() const {
  return true;
}

void ISeeMap_Configuration::InternalSwap(ISeeMap_Configuration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.area_name_, lhs_arena,
      &other->_impl_.area_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_type_, lhs_arena,
      &other->_impl_.task_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ISeeMap_Configuration, _impl_.cargo_)
      + sizeof(ISeeMap_Configuration::_impl_.cargo_)
      - PROTOBUF_FIELD_OFFSET(ISeeMap_Configuration, _impl_.section_)>(
          reinterpret_cast<char*>(&_impl_.section_),
          reinterpret_cast<char*>(&other->_impl_.section_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_Configuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[4]);
}

// ===================================================================

class ISeeMap_TaskAction::_Internal {
 public:
};

ISeeMap_TaskAction::ISeeMap_TaskAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.TaskAction)
}
ISeeMap_TaskAction::ISeeMap_TaskAction(const ISeeMap_TaskAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_TaskAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_name_){}
    , decltype(_impl_.enter_action_){}
    , decltype(_impl_.exit_action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action_name().empty()) {
    _this->_impl_.action_name_.Set(from._internal_action_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.enter_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_enter_action().empty()) {
    _this->_impl_.enter_action_.Set(from._internal_enter_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exit_action().empty()) {
    _this->_impl_.exit_action_.Set(from._internal_exit_action(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.TaskAction)
}

inline void ISeeMap_TaskAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_name_){}
    , decltype(_impl_.enter_action_){}
    , decltype(_impl_.exit_action_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.action_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enter_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.enter_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exit_action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exit_action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_TaskAction::~ISeeMap_TaskAction() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.TaskAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_TaskAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_name_.Destroy();
  _impl_.enter_action_.Destroy();
  _impl_.exit_action_.Destroy();
}

void ISeeMap_TaskAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_TaskAction::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.TaskAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_name_.ClearToEmpty();
  _impl_.enter_action_.ClearToEmpty();
  _impl_.exit_action_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_TaskAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes action_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string enter_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_enter_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.TaskAction.enter_action"));
        } else
          goto handle_unusual;
        continue;
      // string exit_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exit_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.TaskAction.exit_action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_TaskAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.TaskAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes action_name = 1;
  if (!this->_internal_action_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_action_name(), target);
  }

  // string enter_action = 2;
  if (!this->_internal_enter_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_enter_action().data(), static_cast<int>(this->_internal_enter_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.TaskAction.enter_action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_enter_action(), target);
  }

  // string exit_action = 3;
  if (!this->_internal_exit_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exit_action().data(), static_cast<int>(this->_internal_exit_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.TaskAction.exit_action");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exit_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.TaskAction)
  return target;
}

size_t ISeeMap_TaskAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.TaskAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes action_name = 1;
  if (!this->_internal_action_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_action_name());
  }

  // string enter_action = 2;
  if (!this->_internal_enter_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enter_action());
  }

  // string exit_action = 3;
  if (!this->_internal_exit_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exit_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_TaskAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_TaskAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_TaskAction::GetClassData() const { return &_class_data_; }


void ISeeMap_TaskAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_TaskAction*>(&to_msg);
  auto& from = static_cast<const ISeeMap_TaskAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.TaskAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_name().empty()) {
    _this->_internal_set_action_name(from._internal_action_name());
  }
  if (!from._internal_enter_action().empty()) {
    _this->_internal_set_enter_action(from._internal_enter_action());
  }
  if (!from._internal_exit_action().empty()) {
    _this->_internal_set_exit_action(from._internal_exit_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_TaskAction::CopyFrom(const ISeeMap_TaskAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.TaskAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_TaskAction::IsInitialized() const {
  return true;
}

void ISeeMap_TaskAction::InternalSwap(ISeeMap_TaskAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_name_, lhs_arena,
      &other->_impl_.action_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.enter_action_, lhs_arena,
      &other->_impl_.enter_action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exit_action_, lhs_arena,
      &other->_impl_.exit_action_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_TaskAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[5]);
}

// ===================================================================

class ISeeMap_CarManagemet::_Internal {
 public:
};

ISeeMap_CarManagemet::ISeeMap_CarManagemet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.CarManagemet)
}
ISeeMap_CarManagemet::ISeeMap_CarManagemet(const ISeeMap_CarManagemet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_CarManagemet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.car_type_){}
    , decltype(_impl_.battery_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.lmuser_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.rated_load_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.run_time_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.margin_){}
    , decltype(_impl_.reference_point_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    _this->_impl_.mac_.Set(from._internal_mac(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.car_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.car_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_car_type().empty()) {
    _this->_impl_.car_type_.Set(from._internal_car_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.battery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.battery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_battery().empty()) {
    _this->_impl_.battery_.Set(from._internal_battery(), 
      _this->GetArenaForAllocation());
  }
  _impl_.valid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_valid().empty()) {
    _this->_impl_.valid_.Set(from._internal_valid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmuser().empty()) {
    _this->_impl_.lmuser_.Set(from._internal_lmuser(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lmdate().empty()) {
    _this->_impl_.lmdate_.Set(from._internal_lmdate(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rated_load_, &from._impl_.rated_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reference_point_) -
    reinterpret_cast<char*>(&_impl_.rated_load_)) + sizeof(_impl_.reference_point_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.CarManagemet)
}

inline void ISeeMap_CarManagemet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.car_type_){}
    , decltype(_impl_.battery_){}
    , decltype(_impl_.valid_){}
    , decltype(_impl_.lmuser_){}
    , decltype(_impl_.lmdate_){}
    , decltype(_impl_.rated_load_){0}
    , decltype(_impl_.number_){0}
    , decltype(_impl_.run_time_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.margin_){0}
    , decltype(_impl_.reference_point_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.car_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.car_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.battery_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.battery_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.valid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmuser_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmuser_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lmdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lmdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_CarManagemet::~ISeeMap_CarManagemet() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.CarManagemet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_CarManagemet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.mac_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.car_type_.Destroy();
  _impl_.battery_.Destroy();
  _impl_.valid_.Destroy();
  _impl_.lmuser_.Destroy();
  _impl_.lmdate_.Destroy();
}

void ISeeMap_CarManagemet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_CarManagemet::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.CarManagemet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.mac_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.car_type_.ClearToEmpty();
  _impl_.battery_.ClearToEmpty();
  _impl_.valid_.ClearToEmpty();
  _impl_.lmuser_.ClearToEmpty();
  _impl_.lmdate_.ClearToEmpty();
  ::memset(&_impl_.rated_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reference_point_) -
      reinterpret_cast<char*>(&_impl_.rated_load_)) + sizeof(_impl_.reference_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_CarManagemet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.id"));
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.mac"));
        } else
          goto handle_unusual;
        continue;
      // string ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.ip"));
        } else
          goto handle_unusual;
        continue;
      // bytes car_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_car_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string battery = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_battery();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.battery"));
        } else
          goto handle_unusual;
        continue;
      // double rated_load = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.rated_load_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double margin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double reference_point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.reference_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 run_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string valid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_valid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.valid"));
        } else
          goto handle_unusual;
        continue;
      // string lmuser = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_lmuser();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.lmuser"));
        } else
          goto handle_unusual;
        continue;
      // string lmdate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_lmdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CarManagemet.lmdate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_CarManagemet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.CarManagemet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 number = 3;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_number(), target);
  }

  // string mac = 4;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.mac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac(), target);
  }

  // string ip = 5;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // bytes car_type = 6;
  if (!this->_internal_car_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_car_type(), target);
  }

  // string battery = 7;
  if (!this->_internal_battery().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_battery().data(), static_cast<int>(this->_internal_battery().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.battery");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_battery(), target);
  }

  // double rated_load = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rated_load = this->_internal_rated_load();
  uint64_t raw_rated_load;
  memcpy(&raw_rated_load, &tmp_rated_load, sizeof(tmp_rated_load));
  if (raw_rated_load != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_rated_load(), target);
  }

  // double length = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // double width = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // double margin = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin = this->_internal_margin();
  uint64_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_margin(), target);
  }

  // double reference_point = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_point = this->_internal_reference_point();
  uint64_t raw_reference_point;
  memcpy(&raw_reference_point, &tmp_reference_point, sizeof(tmp_reference_point));
  if (raw_reference_point != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_reference_point(), target);
  }

  // int32 run_time = 13;
  if (this->_internal_run_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_run_time(), target);
  }

  // string valid = 14;
  if (!this->_internal_valid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_valid().data(), static_cast<int>(this->_internal_valid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.valid");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_valid(), target);
  }

  // string lmuser = 15;
  if (!this->_internal_lmuser().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lmuser().data(), static_cast<int>(this->_internal_lmuser().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.lmuser");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_lmuser(), target);
  }

  // string lmdate = 16;
  if (!this->_internal_lmdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lmdate().data(), static_cast<int>(this->_internal_lmdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CarManagemet.lmdate");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_lmdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.CarManagemet)
  return target;
}

size_t ISeeMap_CarManagemet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.CarManagemet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // string mac = 4;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // string ip = 5;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // bytes car_type = 6;
  if (!this->_internal_car_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_car_type());
  }

  // string battery = 7;
  if (!this->_internal_battery().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battery());
  }

  // string valid = 14;
  if (!this->_internal_valid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_valid());
  }

  // string lmuser = 15;
  if (!this->_internal_lmuser().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmuser());
  }

  // string lmdate = 16;
  if (!this->_internal_lmdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lmdate());
  }

  // double rated_load = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rated_load = this->_internal_rated_load();
  uint64_t raw_rated_load;
  memcpy(&raw_rated_load, &tmp_rated_load, sizeof(tmp_rated_load));
  if (raw_rated_load != 0) {
    total_size += 1 + 8;
  }

  // int32 number = 3;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number());
  }

  // int32 run_time = 13;
  if (this->_internal_run_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_run_time());
  }

  // double length = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 8;
  }

  // double width = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double margin = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin = this->_internal_margin();
  uint64_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    total_size += 1 + 8;
  }

  // double reference_point = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_point = this->_internal_reference_point();
  uint64_t raw_reference_point;
  memcpy(&raw_reference_point, &tmp_reference_point, sizeof(tmp_reference_point));
  if (raw_reference_point != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_CarManagemet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_CarManagemet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_CarManagemet::GetClassData() const { return &_class_data_; }


void ISeeMap_CarManagemet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_CarManagemet*>(&to_msg);
  auto& from = static_cast<const ISeeMap_CarManagemet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.CarManagemet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_mac().empty()) {
    _this->_internal_set_mac(from._internal_mac());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_car_type().empty()) {
    _this->_internal_set_car_type(from._internal_car_type());
  }
  if (!from._internal_battery().empty()) {
    _this->_internal_set_battery(from._internal_battery());
  }
  if (!from._internal_valid().empty()) {
    _this->_internal_set_valid(from._internal_valid());
  }
  if (!from._internal_lmuser().empty()) {
    _this->_internal_set_lmuser(from._internal_lmuser());
  }
  if (!from._internal_lmdate().empty()) {
    _this->_internal_set_lmdate(from._internal_lmdate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rated_load = from._internal_rated_load();
  uint64_t raw_rated_load;
  memcpy(&raw_rated_load, &tmp_rated_load, sizeof(tmp_rated_load));
  if (raw_rated_load != 0) {
    _this->_internal_set_rated_load(from._internal_rated_load());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_run_time() != 0) {
    _this->_internal_set_run_time(from._internal_run_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_margin = from._internal_margin();
  uint64_t raw_margin;
  memcpy(&raw_margin, &tmp_margin, sizeof(tmp_margin));
  if (raw_margin != 0) {
    _this->_internal_set_margin(from._internal_margin());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_point = from._internal_reference_point();
  uint64_t raw_reference_point;
  memcpy(&raw_reference_point, &tmp_reference_point, sizeof(tmp_reference_point));
  if (raw_reference_point != 0) {
    _this->_internal_set_reference_point(from._internal_reference_point());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_CarManagemet::CopyFrom(const ISeeMap_CarManagemet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.CarManagemet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_CarManagemet::IsInitialized() const {
  return true;
}

void ISeeMap_CarManagemet::InternalSwap(ISeeMap_CarManagemet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.car_type_, lhs_arena,
      &other->_impl_.car_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.battery_, lhs_arena,
      &other->_impl_.battery_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valid_, lhs_arena,
      &other->_impl_.valid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmuser_, lhs_arena,
      &other->_impl_.lmuser_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lmdate_, lhs_arena,
      &other->_impl_.lmdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ISeeMap_CarManagemet, _impl_.reference_point_)
      + sizeof(ISeeMap_CarManagemet::_impl_.reference_point_)
      - PROTOBUF_FIELD_OFFSET(ISeeMap_CarManagemet, _impl_.rated_load_)>(
          reinterpret_cast<char*>(&_impl_.rated_load_),
          reinterpret_cast<char*>(&other->_impl_.rated_load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_CarManagemet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[6]);
}

// ===================================================================

class ISeeMap_CoordOffset::_Internal {
 public:
};

ISeeMap_CoordOffset::ISeeMap_CoordOffset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap.CoordOffset)
}
ISeeMap_CoordOffset::ISeeMap_CoordOffset(const ISeeMap_CoordOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap_CoordOffset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.station_name_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.station_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_station_name().empty()) {
    _this->_impl_.station_name_.Set(from._internal_station_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap.CoordOffset)
}

inline void ISeeMap_CoordOffset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.station_name_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.station_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.station_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ISeeMap_CoordOffset::~ISeeMap_CoordOffset() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap.CoordOffset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap_CoordOffset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.station_name_.Destroy();
}

void ISeeMap_CoordOffset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap_CoordOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap.CoordOffset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.station_name_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap_CoordOffset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string station_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_station_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ISeeMap.CoordOffset.station_name"));
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap_CoordOffset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap.CoordOffset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string station_name = 1;
  if (!this->_internal_station_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_station_name().data(), static_cast<int>(this->_internal_station_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ISeeMap.CoordOffset.station_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_station_name(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap.CoordOffset)
  return target;
}

size_t ISeeMap_CoordOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap.CoordOffset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string station_name = 1;
  if (!this->_internal_station_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_station_name());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap_CoordOffset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap_CoordOffset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap_CoordOffset::GetClassData() const { return &_class_data_; }


void ISeeMap_CoordOffset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap_CoordOffset*>(&to_msg);
  auto& from = static_cast<const ISeeMap_CoordOffset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap.CoordOffset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_station_name().empty()) {
    _this->_internal_set_station_name(from._internal_station_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap_CoordOffset::CopyFrom(const ISeeMap_CoordOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap.CoordOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap_CoordOffset::IsInitialized() const {
  return true;
}

void ISeeMap_CoordOffset::InternalSwap(ISeeMap_CoordOffset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.station_name_, lhs_arena,
      &other->_impl_.station_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ISeeMap_CoordOffset, _impl_.y_)
      + sizeof(ISeeMap_CoordOffset::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ISeeMap_CoordOffset, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap_CoordOffset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[7]);
}

// ===================================================================

class ISeeMap::_Internal {
 public:
  static const ::camel::api::ISeeMap_Region& region(const ISeeMap* msg);
};

const ::camel::api::ISeeMap_Region&
ISeeMap::_Internal::region(const ISeeMap* msg) {
  return *msg->_impl_.region_;
}
ISeeMap::ISeeMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ISeeMap)
}
ISeeMap::ISeeMap(const ISeeMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ISeeMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arealist_){from._impl_.arealist_}
    , decltype(_impl_.pathlist_){from._impl_.pathlist_}
    , decltype(_impl_.stationlist_){from._impl_.stationlist_}
    , decltype(_impl_.configurationlist_){from._impl_.configurationlist_}
    , decltype(_impl_.taskactionlist_){from._impl_.taskactionlist_}
    , decltype(_impl_.carmnglist_){from._impl_.carmnglist_}
    , decltype(_impl_.coordoffset_){from._impl_.coordoffset_}
    , decltype(_impl_.region_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_region()) {
    _this->_impl_.region_ = new ::camel::api::ISeeMap_Region(*from._impl_.region_);
  }
  // @@protoc_insertion_point(copy_constructor:camel.api.ISeeMap)
}

inline void ISeeMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arealist_){arena}
    , decltype(_impl_.pathlist_){arena}
    , decltype(_impl_.stationlist_){arena}
    , decltype(_impl_.configurationlist_){arena}
    , decltype(_impl_.taskactionlist_){arena}
    , decltype(_impl_.carmnglist_){arena}
    , decltype(_impl_.coordoffset_){arena}
    , decltype(_impl_.region_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ISeeMap::~ISeeMap() {
  // @@protoc_insertion_point(destructor:camel.api.ISeeMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ISeeMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arealist_.~RepeatedPtrField();
  _impl_.pathlist_.~RepeatedPtrField();
  _impl_.stationlist_.~RepeatedPtrField();
  _impl_.configurationlist_.~RepeatedPtrField();
  _impl_.taskactionlist_.~RepeatedPtrField();
  _impl_.carmnglist_.~RepeatedPtrField();
  _impl_.coordoffset_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.region_;
}

void ISeeMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ISeeMap::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ISeeMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arealist_.Clear();
  _impl_.pathlist_.Clear();
  _impl_.stationlist_.Clear();
  _impl_.configurationlist_.Clear();
  _impl_.taskactionlist_.Clear();
  _impl_.carmnglist_.Clear();
  _impl_.coordoffset_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.region_ != nullptr) {
    delete _impl_.region_;
  }
  _impl_.region_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ISeeMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.ISeeMap.Region region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.Area areaList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arealist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.Path pathList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pathlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.Station stationList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stationlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.Configuration configurationList = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configurationlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.TaskAction taskActionList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_taskactionlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.CarManagemet carMngList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_carmnglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.ISeeMap.CoordOffset coordOffset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coordoffset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ISeeMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ISeeMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.ISeeMap.Region region = 1;
  if (this->_internal_has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::region(this),
        _Internal::region(this).GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.Area areaList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arealist_size()); i < n; i++) {
    const auto& repfield = this->_internal_arealist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.Path pathList = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pathlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_pathlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.Station stationList = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stationlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_stationlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.Configuration configurationList = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_configurationlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_configurationlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.TaskAction taskActionList = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_taskactionlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_taskactionlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.CarManagemet carMngList = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_carmnglist_size()); i < n; i++) {
    const auto& repfield = this->_internal_carmnglist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.ISeeMap.CoordOffset coordOffset = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coordoffset_size()); i < n; i++) {
    const auto& repfield = this->_internal_coordoffset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ISeeMap)
  return target;
}

size_t ISeeMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ISeeMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.ISeeMap.Area areaList = 2;
  total_size += 1UL * this->_internal_arealist_size();
  for (const auto& msg : this->_impl_.arealist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.Path pathList = 3;
  total_size += 1UL * this->_internal_pathlist_size();
  for (const auto& msg : this->_impl_.pathlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.Station stationList = 4;
  total_size += 1UL * this->_internal_stationlist_size();
  for (const auto& msg : this->_impl_.stationlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.Configuration configurationList = 5;
  total_size += 1UL * this->_internal_configurationlist_size();
  for (const auto& msg : this->_impl_.configurationlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.TaskAction taskActionList = 6;
  total_size += 1UL * this->_internal_taskactionlist_size();
  for (const auto& msg : this->_impl_.taskactionlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.CarManagemet carMngList = 7;
  total_size += 1UL * this->_internal_carmnglist_size();
  for (const auto& msg : this->_impl_.carmnglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.ISeeMap.CoordOffset coordOffset = 8;
  total_size += 1UL * this->_internal_coordoffset_size();
  for (const auto& msg : this->_impl_.coordoffset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .camel.api.ISeeMap.Region region = 1;
  if (this->_internal_has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.region_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ISeeMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ISeeMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ISeeMap::GetClassData() const { return &_class_data_; }


void ISeeMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ISeeMap*>(&to_msg);
  auto& from = static_cast<const ISeeMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ISeeMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arealist_.MergeFrom(from._impl_.arealist_);
  _this->_impl_.pathlist_.MergeFrom(from._impl_.pathlist_);
  _this->_impl_.stationlist_.MergeFrom(from._impl_.stationlist_);
  _this->_impl_.configurationlist_.MergeFrom(from._impl_.configurationlist_);
  _this->_impl_.taskactionlist_.MergeFrom(from._impl_.taskactionlist_);
  _this->_impl_.carmnglist_.MergeFrom(from._impl_.carmnglist_);
  _this->_impl_.coordoffset_.MergeFrom(from._impl_.coordoffset_);
  if (from._internal_has_region()) {
    _this->_internal_mutable_region()->::camel::api::ISeeMap_Region::MergeFrom(
        from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ISeeMap::CopyFrom(const ISeeMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ISeeMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ISeeMap::IsInitialized() const {
  return true;
}

void ISeeMap::InternalSwap(ISeeMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arealist_.InternalSwap(&other->_impl_.arealist_);
  _impl_.pathlist_.InternalSwap(&other->_impl_.pathlist_);
  _impl_.stationlist_.InternalSwap(&other->_impl_.stationlist_);
  _impl_.configurationlist_.InternalSwap(&other->_impl_.configurationlist_);
  _impl_.taskactionlist_.InternalSwap(&other->_impl_.taskactionlist_);
  _impl_.carmnglist_.InternalSwap(&other->_impl_.carmnglist_);
  _impl_.coordoffset_.InternalSwap(&other->_impl_.coordoffset_);
  swap(_impl_.region_, other->_impl_.region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ISeeMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2ddb_2eproto_getter, &descriptor_table_camel_2ddb_2eproto_once,
      file_level_metadata_camel_2ddb_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace camel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_Region*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_Area*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_Area >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_Path*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_Path >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_Station*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_Station >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_Station >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_Configuration*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_TaskAction*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_TaskAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_TaskAction >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_CarManagemet*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_CarManagemet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_CarManagemet >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap_CoordOffset*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap_CoordOffset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap_CoordOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ISeeMap*
Arena::CreateMaybeMessage< ::camel::api::ISeeMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ISeeMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
