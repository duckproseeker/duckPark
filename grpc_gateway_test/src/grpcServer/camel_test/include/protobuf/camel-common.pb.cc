// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camel-common.proto

#include "camel-common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace camel {
namespace api {
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR Battery::Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.percent_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryDefaultTypeInternal _Battery_default_instance_;
PROTOBUF_CONSTEXPR CarHWInfo::CarHWInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cargostate_)*/false
  , /*decltype(_impl_.frontdetect_)*/false
  , /*decltype(_impl_.backdetect_)*/false
  , /*decltype(_impl_.indetect_)*/false
  , /*decltype(_impl_.leftfork_)*/false
  , /*decltype(_impl_.rightfork_)*/false
  , /*decltype(_impl_.mapnotmatch_)*/false
  , /*decltype(_impl_.redlight_)*/false
  , /*decltype(_impl_.ctrlmode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CarHWInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarHWInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarHWInfoDefaultTypeInternal() {}
  union {
    CarHWInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarHWInfoDefaultTypeInternal _CarHWInfo_default_instance_;
PROTOBUF_CONSTEXPR Alarm::Alarm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlarmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlarmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlarmDefaultTypeInternal() {}
  union {
    Alarm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlarmDefaultTypeInternal _Alarm_default_instance_;
PROTOBUF_CONSTEXPR ChargeCmd::ChargeCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allowcharging_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChargeCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChargeCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChargeCmdDefaultTypeInternal() {}
  union {
    ChargeCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChargeCmdDefaultTypeInternal _ChargeCmd_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR ContextTask::ContextTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromstation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tostation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fromaction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.toaction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.taskinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routestart_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routeend_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContextTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContextTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContextTaskDefaultTypeInternal() {}
  union {
    ContextTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContextTaskDefaultTypeInternal _ContextTask_default_instance_;
PROTOBUF_CONSTEXPR Coord::Coord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordDefaultTypeInternal() {}
  union {
    Coord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordDefaultTypeInternal _Coord_default_instance_;
PROTOBUF_CONSTEXPR GStation::GStation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rfid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.area_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GStationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GStationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GStationDefaultTypeInternal() {}
  union {
    GStation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GStationDefaultTypeInternal _GStation_default_instance_;
PROTOBUF_CONSTEXPR GPath::GPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/nullptr
  , /*decltype(_impl_.to_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPathDefaultTypeInternal() {}
  union {
    GPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPathDefaultTypeInternal _GPath_default_instance_;
PROTOBUF_CONSTEXPR PathCollection::PathCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathCollectionDefaultTypeInternal() {}
  union {
    PathCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathCollectionDefaultTypeInternal _PathCollection_default_instance_;
PROTOBUF_CONSTEXPR AvoidanceAreaCollection_AvoidanceArea::AvoidanceAreaCollection_AvoidanceArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvoidanceAreaCollection_AvoidanceAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvoidanceAreaCollection_AvoidanceAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvoidanceAreaCollection_AvoidanceAreaDefaultTypeInternal() {}
  union {
    AvoidanceAreaCollection_AvoidanceArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvoidanceAreaCollection_AvoidanceAreaDefaultTypeInternal _AvoidanceAreaCollection_AvoidanceArea_default_instance_;
PROTOBUF_CONSTEXPR AvoidanceAreaCollection::AvoidanceAreaCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accessiblearea_)*/{}
  , /*decltype(_impl_.prohibitedarea_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvoidanceAreaCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvoidanceAreaCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvoidanceAreaCollectionDefaultTypeInternal() {}
  union {
    AvoidanceAreaCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvoidanceAreaCollectionDefaultTypeInternal _AvoidanceAreaCollection_default_instance_;
PROTOBUF_CONSTEXPR Gamepad::Gamepad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/nullptr
  , /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GamepadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GamepadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GamepadDefaultTypeInternal() {}
  union {
    Gamepad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GamepadDefaultTypeInternal _Gamepad_default_instance_;
PROTOBUF_CONSTEXPR GamepadControl::GamepadControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.force_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GamepadControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GamepadControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GamepadControlDefaultTypeInternal() {}
  union {
    GamepadControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GamepadControlDefaultTypeInternal _GamepadControl_default_instance_;
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
PROTOBUF_CONSTEXPR MatchPoints_MatchPoint::MatchPoints_MatchPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPoints_MatchPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPoints_MatchPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPoints_MatchPointDefaultTypeInternal() {}
  union {
    MatchPoints_MatchPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPoints_MatchPointDefaultTypeInternal _MatchPoints_MatchPoint_default_instance_;
PROTOBUF_CONSTEXPR MatchPoints::MatchPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPointsDefaultTypeInternal() {}
  union {
    MatchPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPointsDefaultTypeInternal _MatchPoints_default_instance_;
PROTOBUF_CONSTEXPR MatchPointCommand::MatchPointCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/nullptr
  , /*decltype(_impl_.remove_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchPointCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchPointCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchPointCommandDefaultTypeInternal() {}
  union {
    MatchPointCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchPointCommandDefaultTypeInternal _MatchPointCommand_default_instance_;
PROTOBUF_CONSTEXPR GrpcTaskStation::GrpcTaskStation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rfid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrpcTaskStationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcTaskStationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcTaskStationDefaultTypeInternal() {}
  union {
    GrpcTaskStation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcTaskStationDefaultTypeInternal _GrpcTaskStation_default_instance_;
PROTOBUF_CONSTEXPR GrpcTaskAllocation::GrpcTaskAllocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stations_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.circle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrpcTaskAllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcTaskAllocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcTaskAllocationDefaultTypeInternal() {}
  union {
    GrpcTaskAllocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcTaskAllocationDefaultTypeInternal _GrpcTaskAllocation_default_instance_;
PROTOBUF_CONSTEXPR GrpcTaskOperation::GrpcTaskOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_.opt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrpcTaskOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcTaskOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcTaskOperationDefaultTypeInternal() {}
  union {
    GrpcTaskOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcTaskOperationDefaultTypeInternal _GrpcTaskOperation_default_instance_;
PROTOBUF_CONSTEXPR GrpcTaskAllocations::GrpcTaskAllocations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrpcTaskAllocationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcTaskAllocationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcTaskAllocationsDefaultTypeInternal() {}
  union {
    GrpcTaskAllocations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcTaskAllocationsDefaultTypeInternal _GrpcTaskAllocations_default_instance_;
PROTOBUF_CONSTEXPR GrpcTaskInfomation::GrpcTaskInfomation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.hastask_)*/false
  , /*decltype(_impl_.circle_)*/false
  , /*decltype(_impl_.multicar_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GrpcTaskInfomationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrpcTaskInfomationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrpcTaskInfomationDefaultTypeInternal() {}
  union {
    GrpcTaskInfomation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrpcTaskInfomationDefaultTypeInternal _GrpcTaskInfomation_default_instance_;
PROTOBUF_CONSTEXPR Collaborative::Collaborative(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.headcarip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rearcarip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cooperation_)*/0
  , /*decltype(_impl_.ismaster_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollaborativeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborativeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborativeDefaultTypeInternal() {}
  union {
    Collaborative _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborativeDefaultTypeInternal _Collaborative_default_instance_;
PROTOBUF_CONSTEXPR CollaborativeResult::CollaborativeResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollaborativeResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollaborativeResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollaborativeResultDefaultTypeInternal() {}
  union {
    CollaborativeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollaborativeResultDefaultTypeInternal _CollaborativeResult_default_instance_;
}  // namespace api
}  // namespace camel
static ::_pb::Metadata file_level_metadata_camel_2dcommon_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_camel_2dcommon_2eproto[7];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_camel_2dcommon_2eproto = nullptr;

const uint32_t TableStruct_camel_2dcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Result, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Result, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Battery, _impl_.percent_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Battery, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.cargostate_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.frontdetect_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.backdetect_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.indetect_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.leftfork_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.rightfork_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.mapnotmatch_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.redlight_),
  PROTOBUF_FIELD_OFFSET(::camel::api::CarHWInfo, _impl_.ctrlmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Alarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Alarm, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Alarm, _impl_.params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ChargeCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ChargeCmd, _impl_.allowcharging_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ChargeCmd, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Position, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Position, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Position, _impl_.confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.fromstation_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.tostation_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.fromaction_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.toaction_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.taskinfo_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.routestart_),
  PROTOBUF_FIELD_OFFSET(::camel::api::ContextTask, _impl_.routeend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Coord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Coord, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Coord, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.rfid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GStation, _impl_.area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GPath, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GPath, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GPath, _impl_.radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::PathCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::PathCollection, _impl_.paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::AvoidanceAreaCollection_AvoidanceArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::AvoidanceAreaCollection_AvoidanceArea, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::AvoidanceAreaCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::AvoidanceAreaCollection, _impl_.accessiblearea_),
  PROTOBUF_FIELD_OFFSET(::camel::api::AvoidanceAreaCollection, _impl_.prohibitedarea_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Gamepad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Gamepad, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Gamepad, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Gamepad, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Gamepad, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GamepadControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GamepadControl, _impl_.force_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Token, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Token, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Token, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPoints_MatchPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPoints_MatchPoint, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPoints_MatchPoint, _impl_.description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPoints, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPointCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPointCommand, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::camel::api::MatchPointCommand, _impl_.remove_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskStation, _impl_.rfid_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskStation, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocation, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocation, _impl_.stations_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocation, _impl_.circle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskOperation, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskOperation, _impl_.opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskAllocations, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _impl_.hastask_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _impl_.circle_),
  PROTOBUF_FIELD_OFFSET(::camel::api::GrpcTaskInfomation, _impl_.multicar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::Collaborative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::Collaborative, _impl_.cooperation_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Collaborative, _impl_.headcarip_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Collaborative, _impl_.rearcarip_),
  PROTOBUF_FIELD_OFFSET(::camel::api::Collaborative, _impl_.ismaster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::camel::api::CollaborativeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::camel::api::CollaborativeResult, _impl_.result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::camel::api::Result)},
  { 8, -1, -1, sizeof(::camel::api::Battery)},
  { 16, -1, -1, sizeof(::camel::api::CarHWInfo)},
  { 31, -1, -1, sizeof(::camel::api::Alarm)},
  { 39, -1, -1, sizeof(::camel::api::ChargeCmd)},
  { 47, -1, -1, sizeof(::camel::api::Position)},
  { 57, -1, -1, sizeof(::camel::api::ContextTask)},
  { 71, -1, -1, sizeof(::camel::api::Coord)},
  { 79, -1, -1, sizeof(::camel::api::GStation)},
  { 91, -1, -1, sizeof(::camel::api::GPath)},
  { 100, -1, -1, sizeof(::camel::api::PathCollection)},
  { 107, -1, -1, sizeof(::camel::api::AvoidanceAreaCollection_AvoidanceArea)},
  { 114, -1, -1, sizeof(::camel::api::AvoidanceAreaCollection)},
  { 122, -1, -1, sizeof(::camel::api::Gamepad)},
  { 132, -1, -1, sizeof(::camel::api::GamepadControl)},
  { 139, -1, -1, sizeof(::camel::api::Token)},
  { 147, -1, -1, sizeof(::camel::api::MatchPoints_MatchPoint)},
  { 155, -1, -1, sizeof(::camel::api::MatchPoints)},
  { 162, -1, -1, sizeof(::camel::api::MatchPointCommand)},
  { 170, -1, -1, sizeof(::camel::api::GrpcTaskStation)},
  { 178, -1, -1, sizeof(::camel::api::GrpcTaskAllocation)},
  { 188, -1, -1, sizeof(::camel::api::GrpcTaskOperation)},
  { 196, -1, -1, sizeof(::camel::api::GrpcTaskAllocations)},
  { 203, -1, -1, sizeof(::camel::api::GrpcTaskInfomation)},
  { 214, -1, -1, sizeof(::camel::api::Collaborative)},
  { 224, -1, -1, sizeof(::camel::api::CollaborativeResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::camel::api::_Result_default_instance_._instance,
  &::camel::api::_Battery_default_instance_._instance,
  &::camel::api::_CarHWInfo_default_instance_._instance,
  &::camel::api::_Alarm_default_instance_._instance,
  &::camel::api::_ChargeCmd_default_instance_._instance,
  &::camel::api::_Position_default_instance_._instance,
  &::camel::api::_ContextTask_default_instance_._instance,
  &::camel::api::_Coord_default_instance_._instance,
  &::camel::api::_GStation_default_instance_._instance,
  &::camel::api::_GPath_default_instance_._instance,
  &::camel::api::_PathCollection_default_instance_._instance,
  &::camel::api::_AvoidanceAreaCollection_AvoidanceArea_default_instance_._instance,
  &::camel::api::_AvoidanceAreaCollection_default_instance_._instance,
  &::camel::api::_Gamepad_default_instance_._instance,
  &::camel::api::_GamepadControl_default_instance_._instance,
  &::camel::api::_Token_default_instance_._instance,
  &::camel::api::_MatchPoints_MatchPoint_default_instance_._instance,
  &::camel::api::_MatchPoints_default_instance_._instance,
  &::camel::api::_MatchPointCommand_default_instance_._instance,
  &::camel::api::_GrpcTaskStation_default_instance_._instance,
  &::camel::api::_GrpcTaskAllocation_default_instance_._instance,
  &::camel::api::_GrpcTaskOperation_default_instance_._instance,
  &::camel::api::_GrpcTaskAllocations_default_instance_._instance,
  &::camel::api::_GrpcTaskInfomation_default_instance_._instance,
  &::camel::api::_Collaborative_default_instance_._instance,
  &::camel::api::_CollaborativeResult_default_instance_._instance,
};

const char descriptor_table_protodef_camel_2dcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022camel-common.proto\022\tcamel.api\",\n\006Resul"
  "t\022\021\n\terrorCode\030\001 \001(\005\022\017\n\007message\030\002 \001(\014\"\216\001"
  "\n\007Battery\022\017\n\007percent\030\001 \001(\002\022/\n\005state\030\002 \001("
  "\0162 .camel.api.Battery.ChargingState\"A\n\rC"
  "hargingState\022\t\n\005kIDLE\020\000\022\r\n\tkCHARGING\020\001\022\n"
  "\n\006kERROR\020\002\022\n\n\006kReady\020\003\"\270\001\n\tCarHWInfo\022\022\n\n"
  "cargoState\030\001 \001(\010\022\023\n\013frontDetect\030\002 \001(\010\022\022\n"
  "\nbackDetect\030\003 \001(\010\022\020\n\010inDetect\030\004 \001(\010\022\020\n\010l"
  "eftFork\030\005 \001(\010\022\021\n\trightFork\030\006 \001(\010\022\023\n\013mapN"
  "otMatch\030\007 \001(\010\022\020\n\010redLight\030\010 \001(\010\022\020\n\010ctrlM"
  "ode\030\t \001(\010\"%\n\005Alarm\022\014\n\004code\030\001 \001(\005\022\016\n\006para"
  "ms\030\002 \003(\014\"H\n\tChargeCmd\022*\n\rallowCharging\030\001"
  " \001(\0162\023.camel.api.DoAction\022\017\n\007channel\030\002 \001"
  "(\005\"C\n\010Position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005"
  "theta\030\003 \001(\002\022\022\n\nconfidence\030\004 \001(\002\"\241\001\n\013Cont"
  "extTask\022\023\n\013FromStation\030\001 \001(\014\022\021\n\tToStatio"
  "n\030\002 \001(\014\022\014\n\004Type\030\003 \001(\014\022\022\n\nFromAction\030\004 \001("
  "\t\022\020\n\010ToAction\030\005 \001(\t\022\020\n\010TaskInfo\030\006 \001(\014\022\022\n"
  "\nrouteStart\030\007 \001(\014\022\020\n\010routeEnd\030\010 \001(\014\"\035\n\005C"
  "oord\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"X\n\010GStation\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\014\n\004rfid\030\003 \001(\t\022\014\n\004ty"
  "pe\030\004 \001(\t\022\014\n\004name\030\005 \001(\t\022\014\n\004area\030\006 \001(\t\"[\n\005"
  "GPath\022!\n\004from\030\001 \001(\0132\023.camel.api.GStation"
  "\022\037\n\002to\030\002 \001(\0132\023.camel.api.GStation\022\016\n\006rad"
  "ius\030\003 \001(\002\"1\n\016PathCollection\022\037\n\005paths\030\001 \003"
  "(\0132\020.camel.api.GPath\"\340\001\n\027AvoidanceAreaCo"
  "llection\022H\n\016accessibleArea\030\001 \003(\01320.camel"
  ".api.AvoidanceAreaCollection.AvoidanceAr"
  "ea\022H\n\016prohibitedArea\030\002 \003(\01320.camel.api.A"
  "voidanceAreaCollection.AvoidanceArea\0321\n\r"
  "AvoidanceArea\022 \n\006points\030\001 \003(\0132\020.camel.ap"
  "i.Coord\"M\n\007Gamepad\022\n\n\002vx\030\001 \001(\002\022\n\n\002vy\030\002 \001"
  "(\002\022\t\n\001w\030\003 \001(\002\022\037\n\005token\030\004 \001(\0132\020.camel.api"
  ".Token\"\037\n\016GamepadControl\022\r\n\005force\030\001 \001(\010\""
  "7\n\005Token\022\013\n\003key\030\001 \001(\t\022!\n\006result\030\002 \001(\0132\021."
  "camel.api.Result\"\205\001\n\013MatchPoints\0221\n\006poin"
  "ts\030\001 \003(\0132!.camel.api.MatchPoints.MatchPo"
  "int\032C\n\nMatchPoint\022 \n\003pos\030\001 \001(\0132\023.camel.a"
  "pi.Position\022\023\n\013description\030\002 \001(\014\"K\n\021Matc"
  "hPointCommand\022&\n\006points\030\001 \001(\0132\026.camel.ap"
  "i.MatchPoints\022\016\n\006remove\030\002 \001(\010\"\203\001\n\017GrpcTa"
  "skStation\022\014\n\004rfid\030\001 \001(\t\0225\n\006action\030\002 \001(\0162"
  "%.camel.api.GrpcTaskStation.TaskAction\"+"
  "\n\nTaskAction\022\010\n\004kGet\020\000\022\010\n\004kPut\020\001\022\t\n\005kWai"
  "t\020\002\"s\n\022GrpcTaskAllocation\022\n\n\002id\030\001 \001(\t\022\023\n"
  "\013description\030\002 \001(\t\022,\n\010stations\030\003 \003(\0132\032.c"
  "amel.api.GrpcTaskStation\022\016\n\006circle\030\004 \001(\010"
  "\"\373\001\n\021GrpcTaskOperation\022+\n\004task\030\001 \001(\0132\035.c"
  "amel.api.GrpcTaskAllocation\0223\n\003opt\030\002 \001(\016"
  "2&.camel.api.GrpcTaskOperation.Operation"
  "\"\203\001\n\tOperation\022\010\n\004kNew\020\000\022\013\n\007kDelete\020\001\022\n\n"
  "\006kQuery\020\002\022\t\n\005kCall\020\003\022\t\n\005kGoto\020\004\022\013\n\007kCanc"
  "el\020\005\022\021\n\rkGotoCharging\020\006\022\016\n\nkSingleCar\020\007\022"
  "\r\n\tkMuiltCar\020\010\"C\n\023GrpcTaskAllocations\022,\n"
  "\005tasks\030\001 \003(\0132\035.camel.api.GrpcTaskAllocat"
  "ion\"\210\001\n\022GrpcTaskInfomation\022\017\n\007hasTask\030\001 "
  "\001(\010\022\023\n\013description\030\002 \001(\t\022*\n\006target\030\003 \001(\013"
  "2\032.camel.api.GrpcTaskStation\022\016\n\006circle\030\004"
  " \001(\010\022\020\n\010multicar\030\005 \001(\010\"\305\001\n\rCollaborative"
  "\022=\n\013cooperation\030\001 \001(\0162(.camel.api.Collab"
  "orative.CooperationEnum\022\021\n\theadCarIp\030\002 \001"
  "(\t\022\021\n\trearCarIp\030\003 \001(\t\022\020\n\010isMaster\030\004 \001(\010\""
  "=\n\017CooperationEnum\022\025\n\021kStartCooperation\020"
  "\000\022\023\n\017kEndCooperation\020\001\"q\n\023CollaborativeR"
  "esult\0225\n\006result\030\001 \001(\0162%.camel.api.Collab"
  "orativeResult.Status\"#\n\006Status\022\014\n\010kSucce"
  "ss\020\000\022\013\n\007kFailed\020\001*9\n\010DoAction\022\r\n\tkNoActi"
  "on\020\000\022\016\n\nkDoAction1\020\001\022\016\n\nkDoAction2\020\002*^\n\016"
  "AgvsTaskStatus\022\t\n\005kNone\020\000\022\020\n\014kToTaskStar"
  "t\020\001\022\016\n\nkToTaskEnd\020\002\022\017\n\013kToCharging\020\003\022\016\n\n"
  "kToParking\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_camel_2dcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_camel_2dcommon_2eproto = {
    false, false, 2820, descriptor_table_protodef_camel_2dcommon_2eproto,
    "camel-common.proto",
    &descriptor_table_camel_2dcommon_2eproto_once, nullptr, 0, 26,
    schemas, file_default_instances, TableStruct_camel_2dcommon_2eproto::offsets,
    file_level_metadata_camel_2dcommon_2eproto, file_level_enum_descriptors_camel_2dcommon_2eproto,
    file_level_service_descriptors_camel_2dcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_camel_2dcommon_2eproto_getter() {
  return &descriptor_table_camel_2dcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_camel_2dcommon_2eproto(&descriptor_table_camel_2dcommon_2eproto);
namespace camel {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Battery_ChargingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[0];
}
bool Battery_ChargingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Battery_ChargingState Battery::kIDLE;
constexpr Battery_ChargingState Battery::kCHARGING;
constexpr Battery_ChargingState Battery::kERROR;
constexpr Battery_ChargingState Battery::kReady;
constexpr Battery_ChargingState Battery::ChargingState_MIN;
constexpr Battery_ChargingState Battery::ChargingState_MAX;
constexpr int Battery::ChargingState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrpcTaskStation_TaskAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[1];
}
bool GrpcTaskStation_TaskAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GrpcTaskStation_TaskAction GrpcTaskStation::kGet;
constexpr GrpcTaskStation_TaskAction GrpcTaskStation::kPut;
constexpr GrpcTaskStation_TaskAction GrpcTaskStation::kWait;
constexpr GrpcTaskStation_TaskAction GrpcTaskStation::TaskAction_MIN;
constexpr GrpcTaskStation_TaskAction GrpcTaskStation::TaskAction_MAX;
constexpr int GrpcTaskStation::TaskAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GrpcTaskOperation_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[2];
}
bool GrpcTaskOperation_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kNew;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kDelete;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kQuery;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kCall;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kGoto;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kCancel;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kGotoCharging;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kSingleCar;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::kMuiltCar;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::Operation_MIN;
constexpr GrpcTaskOperation_Operation GrpcTaskOperation::Operation_MAX;
constexpr int GrpcTaskOperation::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Collaborative_CooperationEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[3];
}
bool Collaborative_CooperationEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Collaborative_CooperationEnum Collaborative::kStartCooperation;
constexpr Collaborative_CooperationEnum Collaborative::kEndCooperation;
constexpr Collaborative_CooperationEnum Collaborative::CooperationEnum_MIN;
constexpr Collaborative_CooperationEnum Collaborative::CooperationEnum_MAX;
constexpr int Collaborative::CooperationEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollaborativeResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[4];
}
bool CollaborativeResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CollaborativeResult_Status CollaborativeResult::kSuccess;
constexpr CollaborativeResult_Status CollaborativeResult::kFailed;
constexpr CollaborativeResult_Status CollaborativeResult::Status_MIN;
constexpr CollaborativeResult_Status CollaborativeResult::Status_MAX;
constexpr int CollaborativeResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DoAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[5];
}
bool DoAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgvsTaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_camel_2dcommon_2eproto);
  return file_level_enum_descriptors_camel_2dcommon_2eproto[6];
}
bool AgvsTaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.errorcode_ = from._impl_.errorcode_;
  // @@protoc_insertion_point(copy_constructor:camel.api.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.errorcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:camel.api.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.errorcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorCode = 1;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 errorCode = 1;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.errorcode_, other->_impl_.errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[0]);
}

// ===================================================================

class Battery::_Internal {
 public:
};

Battery::Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.percent_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.percent_, &from._impl_.percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:camel.api.Battery)
}

inline void Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.percent_){0}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:camel.api.Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.percent_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float percent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .camel.api.Battery.ChargingState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::camel::api::Battery_ChargingState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float percent = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percent = this->_internal_percent();
  uint32_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_percent(), target);
  }

  // .camel.api.Battery.ChargingState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float percent = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percent = this->_internal_percent();
  uint32_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    total_size += 1 + 4;
  }

  // .camel.api.Battery.ChargingState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Battery::GetClassData() const { return &_class_data_; }


void Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Battery*>(&to_msg);
  auto& from = static_cast<const Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_percent = from._internal_percent();
  uint32_t raw_percent;
  memcpy(&raw_percent, &tmp_percent, sizeof(tmp_percent));
  if (raw_percent != 0) {
    _this->_internal_set_percent(from._internal_percent());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, _impl_.state_)
      + sizeof(Battery::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(Battery, _impl_.percent_)>(
          reinterpret_cast<char*>(&_impl_.percent_),
          reinterpret_cast<char*>(&other->_impl_.percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[1]);
}

// ===================================================================

class CarHWInfo::_Internal {
 public:
};

CarHWInfo::CarHWInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.CarHWInfo)
}
CarHWInfo::CarHWInfo(const CarHWInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarHWInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cargostate_){}
    , decltype(_impl_.frontdetect_){}
    , decltype(_impl_.backdetect_){}
    , decltype(_impl_.indetect_){}
    , decltype(_impl_.leftfork_){}
    , decltype(_impl_.rightfork_){}
    , decltype(_impl_.mapnotmatch_){}
    , decltype(_impl_.redlight_){}
    , decltype(_impl_.ctrlmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cargostate_, &from._impl_.cargostate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ctrlmode_) -
    reinterpret_cast<char*>(&_impl_.cargostate_)) + sizeof(_impl_.ctrlmode_));
  // @@protoc_insertion_point(copy_constructor:camel.api.CarHWInfo)
}

inline void CarHWInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cargostate_){false}
    , decltype(_impl_.frontdetect_){false}
    , decltype(_impl_.backdetect_){false}
    , decltype(_impl_.indetect_){false}
    , decltype(_impl_.leftfork_){false}
    , decltype(_impl_.rightfork_){false}
    , decltype(_impl_.mapnotmatch_){false}
    , decltype(_impl_.redlight_){false}
    , decltype(_impl_.ctrlmode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CarHWInfo::~CarHWInfo() {
  // @@protoc_insertion_point(destructor:camel.api.CarHWInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarHWInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarHWInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarHWInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.CarHWInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cargostate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ctrlmode_) -
      reinterpret_cast<char*>(&_impl_.cargostate_)) + sizeof(_impl_.ctrlmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarHWInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool cargoState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cargostate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool frontDetect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.frontdetect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool backDetect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.backdetect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inDetect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.indetect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool leftFork = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leftfork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rightFork = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rightfork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mapNotMatch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mapnotmatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool redLight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.redlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ctrlMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ctrlmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarHWInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.CarHWInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cargoState = 1;
  if (this->_internal_cargostate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cargostate(), target);
  }

  // bool frontDetect = 2;
  if (this->_internal_frontdetect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_frontdetect(), target);
  }

  // bool backDetect = 3;
  if (this->_internal_backdetect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_backdetect(), target);
  }

  // bool inDetect = 4;
  if (this->_internal_indetect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_indetect(), target);
  }

  // bool leftFork = 5;
  if (this->_internal_leftfork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_leftfork(), target);
  }

  // bool rightFork = 6;
  if (this->_internal_rightfork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_rightfork(), target);
  }

  // bool mapNotMatch = 7;
  if (this->_internal_mapnotmatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_mapnotmatch(), target);
  }

  // bool redLight = 8;
  if (this->_internal_redlight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_redlight(), target);
  }

  // bool ctrlMode = 9;
  if (this->_internal_ctrlmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ctrlmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.CarHWInfo)
  return target;
}

size_t CarHWInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.CarHWInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool cargoState = 1;
  if (this->_internal_cargostate() != 0) {
    total_size += 1 + 1;
  }

  // bool frontDetect = 2;
  if (this->_internal_frontdetect() != 0) {
    total_size += 1 + 1;
  }

  // bool backDetect = 3;
  if (this->_internal_backdetect() != 0) {
    total_size += 1 + 1;
  }

  // bool inDetect = 4;
  if (this->_internal_indetect() != 0) {
    total_size += 1 + 1;
  }

  // bool leftFork = 5;
  if (this->_internal_leftfork() != 0) {
    total_size += 1 + 1;
  }

  // bool rightFork = 6;
  if (this->_internal_rightfork() != 0) {
    total_size += 1 + 1;
  }

  // bool mapNotMatch = 7;
  if (this->_internal_mapnotmatch() != 0) {
    total_size += 1 + 1;
  }

  // bool redLight = 8;
  if (this->_internal_redlight() != 0) {
    total_size += 1 + 1;
  }

  // bool ctrlMode = 9;
  if (this->_internal_ctrlmode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarHWInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarHWInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarHWInfo::GetClassData() const { return &_class_data_; }


void CarHWInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarHWInfo*>(&to_msg);
  auto& from = static_cast<const CarHWInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.CarHWInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cargostate() != 0) {
    _this->_internal_set_cargostate(from._internal_cargostate());
  }
  if (from._internal_frontdetect() != 0) {
    _this->_internal_set_frontdetect(from._internal_frontdetect());
  }
  if (from._internal_backdetect() != 0) {
    _this->_internal_set_backdetect(from._internal_backdetect());
  }
  if (from._internal_indetect() != 0) {
    _this->_internal_set_indetect(from._internal_indetect());
  }
  if (from._internal_leftfork() != 0) {
    _this->_internal_set_leftfork(from._internal_leftfork());
  }
  if (from._internal_rightfork() != 0) {
    _this->_internal_set_rightfork(from._internal_rightfork());
  }
  if (from._internal_mapnotmatch() != 0) {
    _this->_internal_set_mapnotmatch(from._internal_mapnotmatch());
  }
  if (from._internal_redlight() != 0) {
    _this->_internal_set_redlight(from._internal_redlight());
  }
  if (from._internal_ctrlmode() != 0) {
    _this->_internal_set_ctrlmode(from._internal_ctrlmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarHWInfo::CopyFrom(const CarHWInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.CarHWInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarHWInfo::IsInitialized() const {
  return true;
}

void CarHWInfo::InternalSwap(CarHWInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarHWInfo, _impl_.ctrlmode_)
      + sizeof(CarHWInfo::_impl_.ctrlmode_)
      - PROTOBUF_FIELD_OFFSET(CarHWInfo, _impl_.cargostate_)>(
          reinterpret_cast<char*>(&_impl_.cargostate_),
          reinterpret_cast<char*>(&other->_impl_.cargostate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarHWInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[2]);
}

// ===================================================================

class Alarm::_Internal {
 public:
};

Alarm::Alarm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Alarm)
}
Alarm::Alarm(const Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Alarm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:camel.api.Alarm)
}

inline void Alarm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Alarm::~Alarm() {
  // @@protoc_insertion_point(destructor:camel.api.Alarm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Alarm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
}

void Alarm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Alarm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alarm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Alarm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Alarm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // repeated bytes params = 2;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Alarm)
  return target;
}

size_t Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Alarm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes params = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.params_.size());
  for (int i = 0, n = _impl_.params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.params_.Get(i));
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Alarm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Alarm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Alarm::GetClassData() const { return &_class_data_; }


void Alarm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Alarm*>(&to_msg);
  auto& from = static_cast<const Alarm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Alarm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Alarm::CopyFrom(const Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarm::IsInitialized() const {
  return true;
}

void Alarm::InternalSwap(Alarm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Alarm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[3]);
}

// ===================================================================

class ChargeCmd::_Internal {
 public:
};

ChargeCmd::ChargeCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ChargeCmd)
}
ChargeCmd::ChargeCmd(const ChargeCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChargeCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allowcharging_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.allowcharging_, &from._impl_.allowcharging_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.allowcharging_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:camel.api.ChargeCmd)
}

inline void ChargeCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allowcharging_){0}
    , decltype(_impl_.channel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChargeCmd::~ChargeCmd() {
  // @@protoc_insertion_point(destructor:camel.api.ChargeCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChargeCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChargeCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChargeCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ChargeCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.allowcharging_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.allowcharging_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChargeCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.DoAction allowCharging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_allowcharging(static_cast<::camel::api::DoAction>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChargeCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ChargeCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.DoAction allowCharging = 1;
  if (this->_internal_allowcharging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_allowcharging(), target);
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ChargeCmd)
  return target;
}

size_t ChargeCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ChargeCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.DoAction allowCharging = 1;
  if (this->_internal_allowcharging() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_allowcharging());
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChargeCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChargeCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChargeCmd::GetClassData() const { return &_class_data_; }


void ChargeCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChargeCmd*>(&to_msg);
  auto& from = static_cast<const ChargeCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ChargeCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_allowcharging() != 0) {
    _this->_internal_set_allowcharging(from._internal_allowcharging());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChargeCmd::CopyFrom(const ChargeCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ChargeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeCmd::IsInitialized() const {
  return true;
}

void ChargeCmd::InternalSwap(ChargeCmd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChargeCmd, _impl_.channel_)
      + sizeof(ChargeCmd::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(ChargeCmd, _impl_.allowcharging_)>(
          reinterpret_cast<char*>(&_impl_.allowcharging_),
          reinterpret_cast<char*>(&other->_impl_.allowcharging_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChargeCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[4]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.confidence_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:camel.api.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.confidence_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:camel.api.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.confidence_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.confidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float theta = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta = this->_internal_theta();
  uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_theta(), target);
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float theta = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta = this->_internal_theta();
  uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 4;
  }

  // float confidence = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_theta = from._internal_theta();
  uint32_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _this->_internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.confidence_)
      + sizeof(Position::_impl_.confidence_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[5]);
}

// ===================================================================

class ContextTask::_Internal {
 public:
};

ContextTask::ContextTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.ContextTask)
}
ContextTask::ContextTask(const ContextTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContextTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromstation_){}
    , decltype(_impl_.tostation_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.fromaction_){}
    , decltype(_impl_.toaction_){}
    , decltype(_impl_.taskinfo_){}
    , decltype(_impl_.routestart_){}
    , decltype(_impl_.routeend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fromstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromstation().empty()) {
    _this->_impl_.fromstation_.Set(from._internal_fromstation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tostation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tostation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tostation().empty()) {
    _this->_impl_.tostation_.Set(from._internal_tostation(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fromaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fromaction().empty()) {
    _this->_impl_.fromaction_.Set(from._internal_fromaction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.toaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_toaction().empty()) {
    _this->_impl_.toaction_.Set(from._internal_toaction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.taskinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taskinfo().empty()) {
    _this->_impl_.taskinfo_.Set(from._internal_taskinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.routestart_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routestart_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routestart().empty()) {
    _this->_impl_.routestart_.Set(from._internal_routestart(), 
      _this->GetArenaForAllocation());
  }
  _impl_.routeend_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routeend_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routeend().empty()) {
    _this->_impl_.routeend_.Set(from._internal_routeend(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:camel.api.ContextTask)
}

inline void ContextTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromstation_){}
    , decltype(_impl_.tostation_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.fromaction_){}
    , decltype(_impl_.toaction_){}
    , decltype(_impl_.taskinfo_){}
    , decltype(_impl_.routestart_){}
    , decltype(_impl_.routeend_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fromstation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromstation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tostation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tostation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fromaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fromaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.toaction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.toaction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taskinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.taskinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routestart_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routestart_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routeend_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routeend_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContextTask::~ContextTask() {
  // @@protoc_insertion_point(destructor:camel.api.ContextTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContextTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fromstation_.Destroy();
  _impl_.tostation_.Destroy();
  _impl_.type_.Destroy();
  _impl_.fromaction_.Destroy();
  _impl_.toaction_.Destroy();
  _impl_.taskinfo_.Destroy();
  _impl_.routestart_.Destroy();
  _impl_.routeend_.Destroy();
}

void ContextTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContextTask::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.ContextTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fromstation_.ClearToEmpty();
  _impl_.tostation_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.fromaction_.ClearToEmpty();
  _impl_.toaction_.ClearToEmpty();
  _impl_.taskinfo_.ClearToEmpty();
  _impl_.routestart_.ClearToEmpty();
  _impl_.routeend_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContextTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes FromStation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fromstation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ToStation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tostation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string FromAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fromaction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ContextTask.FromAction"));
        } else
          goto handle_unusual;
        continue;
      // string ToAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_toaction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.ContextTask.ToAction"));
        } else
          goto handle_unusual;
        continue;
      // bytes TaskInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_taskinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes routeStart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_routestart();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes routeEnd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_routeend();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContextTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.ContextTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FromStation = 1;
  if (!this->_internal_fromstation().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_fromstation(), target);
  }

  // bytes ToStation = 2;
  if (!this->_internal_tostation().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tostation(), target);
  }

  // bytes Type = 3;
  if (!this->_internal_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string FromAction = 4;
  if (!this->_internal_fromaction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fromaction().data(), static_cast<int>(this->_internal_fromaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ContextTask.FromAction");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fromaction(), target);
  }

  // string ToAction = 5;
  if (!this->_internal_toaction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toaction().data(), static_cast<int>(this->_internal_toaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.ContextTask.ToAction");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_toaction(), target);
  }

  // bytes TaskInfo = 6;
  if (!this->_internal_taskinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_taskinfo(), target);
  }

  // bytes routeStart = 7;
  if (!this->_internal_routestart().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_routestart(), target);
  }

  // bytes routeEnd = 8;
  if (!this->_internal_routeend().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_routeend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.ContextTask)
  return target;
}

size_t ContextTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.ContextTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FromStation = 1;
  if (!this->_internal_fromstation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fromstation());
  }

  // bytes ToStation = 2;
  if (!this->_internal_tostation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tostation());
  }

  // bytes Type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // string FromAction = 4;
  if (!this->_internal_fromaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fromaction());
  }

  // string ToAction = 5;
  if (!this->_internal_toaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toaction());
  }

  // bytes TaskInfo = 6;
  if (!this->_internal_taskinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_taskinfo());
  }

  // bytes routeStart = 7;
  if (!this->_internal_routestart().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routestart());
  }

  // bytes routeEnd = 8;
  if (!this->_internal_routeend().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_routeend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContextTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContextTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContextTask::GetClassData() const { return &_class_data_; }


void ContextTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContextTask*>(&to_msg);
  auto& from = static_cast<const ContextTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.ContextTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fromstation().empty()) {
    _this->_internal_set_fromstation(from._internal_fromstation());
  }
  if (!from._internal_tostation().empty()) {
    _this->_internal_set_tostation(from._internal_tostation());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_fromaction().empty()) {
    _this->_internal_set_fromaction(from._internal_fromaction());
  }
  if (!from._internal_toaction().empty()) {
    _this->_internal_set_toaction(from._internal_toaction());
  }
  if (!from._internal_taskinfo().empty()) {
    _this->_internal_set_taskinfo(from._internal_taskinfo());
  }
  if (!from._internal_routestart().empty()) {
    _this->_internal_set_routestart(from._internal_routestart());
  }
  if (!from._internal_routeend().empty()) {
    _this->_internal_set_routeend(from._internal_routeend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContextTask::CopyFrom(const ContextTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.ContextTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextTask::IsInitialized() const {
  return true;
}

void ContextTask::InternalSwap(ContextTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromstation_, lhs_arena,
      &other->_impl_.fromstation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tostation_, lhs_arena,
      &other->_impl_.tostation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fromaction_, lhs_arena,
      &other->_impl_.fromaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.toaction_, lhs_arena,
      &other->_impl_.toaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.taskinfo_, lhs_arena,
      &other->_impl_.taskinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routestart_, lhs_arena,
      &other->_impl_.routestart_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routeend_, lhs_arena,
      &other->_impl_.routeend_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[6]);
}

// ===================================================================

class Coord::_Internal {
 public:
};

Coord::Coord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Coord)
}
Coord::Coord(const Coord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:camel.api.Coord)
}

inline void Coord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Coord::~Coord() {
  // @@protoc_insertion_point(destructor:camel.api.Coord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coord::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Coord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Coord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Coord)
  return target;
}

size_t Coord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Coord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coord::GetClassData() const { return &_class_data_; }


void Coord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coord*>(&to_msg);
  auto& from = static_cast<const Coord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Coord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coord::CopyFrom(const Coord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Coord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coord::IsInitialized() const {
  return true;
}

void Coord::InternalSwap(Coord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coord, _impl_.y_)
      + sizeof(Coord::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Coord, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[7]);
}

// ===================================================================

class GStation::_Internal {
 public:
};

GStation::GStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GStation)
}
GStation::GStation(const GStation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GStation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rfid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rfid().empty()) {
    _this->_impl_.rfid_.Set(from._internal_rfid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.area_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_area().empty()) {
    _this->_impl_.area_.Set(from._internal_area(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:camel.api.GStation)
}

inline void GStation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rfid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.area_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.area_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GStation::~GStation() {
  // @@protoc_insertion_point(destructor:camel.api.GStation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GStation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rfid_.Destroy();
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  _impl_.area_.Destroy();
}

void GStation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GStation::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GStation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rfid_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.area_.ClearToEmpty();
  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GStation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string rfid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rfid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GStation.rfid"));
        } else
          goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GStation.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GStation.name"));
        } else
          goto handle_unusual;
        continue;
      // string area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_area();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GStation.area"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GStation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GStation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // string rfid = 3;
  if (!this->_internal_rfid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rfid().data(), static_cast<int>(this->_internal_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GStation.rfid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rfid(), target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GStation.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GStation.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string area = 6;
  if (!this->_internal_area().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_area().data(), static_cast<int>(this->_internal_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GStation.area");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_area(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GStation)
  return target;
}

size_t GStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GStation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rfid = 3;
  if (!this->_internal_rfid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rfid());
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string area = 6;
  if (!this->_internal_area().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_area());
  }

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GStation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GStation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GStation::GetClassData() const { return &_class_data_; }


void GStation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GStation*>(&to_msg);
  auto& from = static_cast<const GStation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GStation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rfid().empty()) {
    _this->_internal_set_rfid(from._internal_rfid());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_area().empty()) {
    _this->_internal_set_area(from._internal_area());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GStation::CopyFrom(const GStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GStation::IsInitialized() const {
  return true;
}

void GStation::InternalSwap(GStation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rfid_, lhs_arena,
      &other->_impl_.rfid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.area_, lhs_arena,
      &other->_impl_.area_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GStation, _impl_.y_)
      + sizeof(GStation::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GStation, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GStation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[8]);
}

// ===================================================================

class GPath::_Internal {
 public:
  static const ::camel::api::GStation& from(const GPath* msg);
  static const ::camel::api::GStation& to(const GPath* msg);
};

const ::camel::api::GStation&
GPath::_Internal::from(const GPath* msg) {
  return *msg->_impl_.from_;
}
const ::camel::api::GStation&
GPath::_Internal::to(const GPath* msg) {
  return *msg->_impl_.to_;
}
GPath::GPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GPath)
}
GPath::GPath(const GPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.radius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from()) {
    _this->_impl_.from_ = new ::camel::api::GStation(*from._impl_.from_);
  }
  if (from._internal_has_to()) {
    _this->_impl_.to_ = new ::camel::api::GStation(*from._impl_.to_);
  }
  _this->_impl_.radius_ = from._impl_.radius_;
  // @@protoc_insertion_point(copy_constructor:camel.api.GPath)
}

inline void GPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){nullptr}
    , decltype(_impl_.to_){nullptr}
    , decltype(_impl_.radius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GPath::~GPath() {
  // @@protoc_insertion_point(destructor:camel.api.GPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_;
  if (this != internal_default_instance()) delete _impl_.to_;
}

void GPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GPath::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.from_ != nullptr) {
    delete _impl_.from_;
  }
  _impl_.from_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.to_ != nullptr) {
    delete _impl_.to_;
  }
  _impl_.to_ = nullptr;
  _impl_.radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.GStation from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .camel.api.GStation to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.GStation from = 1;
  if (this->_internal_has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::from(this),
        _Internal::from(this).GetCachedSize(), target, stream);
  }

  // .camel.api.GStation to = 2;
  if (this->_internal_has_to()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::to(this),
        _Internal::to(this).GetCachedSize(), target, stream);
  }

  // float radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GPath)
  return target;
}

size_t GPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.GStation from = 1;
  if (this->_internal_has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_);
  }

  // .camel.api.GStation to = 2;
  if (this->_internal_has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.to_);
  }

  // float radius = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPath::GetClassData() const { return &_class_data_; }


void GPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GPath*>(&to_msg);
  auto& from = static_cast<const GPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_from()) {
    _this->_internal_mutable_from()->::camel::api::GStation::MergeFrom(
        from._internal_from());
  }
  if (from._internal_has_to()) {
    _this->_internal_mutable_to()->::camel::api::GStation::MergeFrom(
        from._internal_to());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPath::CopyFrom(const GPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPath::IsInitialized() const {
  return true;
}

void GPath::InternalSwap(GPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPath, _impl_.radius_)
      + sizeof(GPath::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(GPath, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[9]);
}

// ===================================================================

class PathCollection::_Internal {
 public:
};

PathCollection::PathCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.PathCollection)
}
PathCollection::PathCollection(const PathCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){from._impl_.paths_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camel.api.PathCollection)
}

inline void PathCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathCollection::~PathCollection() {
  // @@protoc_insertion_point(destructor:camel.api.PathCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paths_.~RepeatedPtrField();
}

void PathCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.PathCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .camel.api.GPath paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.PathCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camel.api.GPath paths = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_paths_size()); i < n; i++) {
    const auto& repfield = this->_internal_paths(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.PathCollection)
  return target;
}

size_t PathCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.PathCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.GPath paths = 1;
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->_impl_.paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathCollection::GetClassData() const { return &_class_data_; }


void PathCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathCollection*>(&to_msg);
  auto& from = static_cast<const PathCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.PathCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paths_.MergeFrom(from._impl_.paths_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathCollection::CopyFrom(const PathCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.PathCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathCollection::IsInitialized() const {
  return true;
}

void PathCollection::InternalSwap(PathCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paths_.InternalSwap(&other->_impl_.paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[10]);
}

// ===================================================================

class AvoidanceAreaCollection_AvoidanceArea::_Internal {
 public:
};

AvoidanceAreaCollection_AvoidanceArea::AvoidanceAreaCollection_AvoidanceArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.AvoidanceAreaCollection.AvoidanceArea)
}
AvoidanceAreaCollection_AvoidanceArea::AvoidanceAreaCollection_AvoidanceArea(const AvoidanceAreaCollection_AvoidanceArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvoidanceAreaCollection_AvoidanceArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camel.api.AvoidanceAreaCollection.AvoidanceArea)
}

inline void AvoidanceAreaCollection_AvoidanceArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AvoidanceAreaCollection_AvoidanceArea::~AvoidanceAreaCollection_AvoidanceArea() {
  // @@protoc_insertion_point(destructor:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvoidanceAreaCollection_AvoidanceArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void AvoidanceAreaCollection_AvoidanceArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvoidanceAreaCollection_AvoidanceArea::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvoidanceAreaCollection_AvoidanceArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .camel.api.Coord points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvoidanceAreaCollection_AvoidanceArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camel.api.Coord points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  return target;
}

size_t AvoidanceAreaCollection_AvoidanceArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.Coord points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvoidanceAreaCollection_AvoidanceArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvoidanceAreaCollection_AvoidanceArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvoidanceAreaCollection_AvoidanceArea::GetClassData() const { return &_class_data_; }


void AvoidanceAreaCollection_AvoidanceArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvoidanceAreaCollection_AvoidanceArea*>(&to_msg);
  auto& from = static_cast<const AvoidanceAreaCollection_AvoidanceArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvoidanceAreaCollection_AvoidanceArea::CopyFrom(const AvoidanceAreaCollection_AvoidanceArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.AvoidanceAreaCollection.AvoidanceArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidanceAreaCollection_AvoidanceArea::IsInitialized() const {
  return true;
}

void AvoidanceAreaCollection_AvoidanceArea::InternalSwap(AvoidanceAreaCollection_AvoidanceArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvoidanceAreaCollection_AvoidanceArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[11]);
}

// ===================================================================

class AvoidanceAreaCollection::_Internal {
 public:
};

AvoidanceAreaCollection::AvoidanceAreaCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.AvoidanceAreaCollection)
}
AvoidanceAreaCollection::AvoidanceAreaCollection(const AvoidanceAreaCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvoidanceAreaCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accessiblearea_){from._impl_.accessiblearea_}
    , decltype(_impl_.prohibitedarea_){from._impl_.prohibitedarea_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camel.api.AvoidanceAreaCollection)
}

inline void AvoidanceAreaCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accessiblearea_){arena}
    , decltype(_impl_.prohibitedarea_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AvoidanceAreaCollection::~AvoidanceAreaCollection() {
  // @@protoc_insertion_point(destructor:camel.api.AvoidanceAreaCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvoidanceAreaCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accessiblearea_.~RepeatedPtrField();
  _impl_.prohibitedarea_.~RepeatedPtrField();
}

void AvoidanceAreaCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvoidanceAreaCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.AvoidanceAreaCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accessiblearea_.Clear();
  _impl_.prohibitedarea_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvoidanceAreaCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea accessibleArea = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accessiblearea(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea prohibitedArea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prohibitedarea(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvoidanceAreaCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.AvoidanceAreaCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea accessibleArea = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accessiblearea_size()); i < n; i++) {
    const auto& repfield = this->_internal_accessiblearea(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea prohibitedArea = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prohibitedarea_size()); i < n; i++) {
    const auto& repfield = this->_internal_prohibitedarea(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.AvoidanceAreaCollection)
  return target;
}

size_t AvoidanceAreaCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.AvoidanceAreaCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea accessibleArea = 1;
  total_size += 1UL * this->_internal_accessiblearea_size();
  for (const auto& msg : this->_impl_.accessiblearea_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .camel.api.AvoidanceAreaCollection.AvoidanceArea prohibitedArea = 2;
  total_size += 1UL * this->_internal_prohibitedarea_size();
  for (const auto& msg : this->_impl_.prohibitedarea_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvoidanceAreaCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvoidanceAreaCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvoidanceAreaCollection::GetClassData() const { return &_class_data_; }


void AvoidanceAreaCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvoidanceAreaCollection*>(&to_msg);
  auto& from = static_cast<const AvoidanceAreaCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.AvoidanceAreaCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accessiblearea_.MergeFrom(from._impl_.accessiblearea_);
  _this->_impl_.prohibitedarea_.MergeFrom(from._impl_.prohibitedarea_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvoidanceAreaCollection::CopyFrom(const AvoidanceAreaCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.AvoidanceAreaCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidanceAreaCollection::IsInitialized() const {
  return true;
}

void AvoidanceAreaCollection::InternalSwap(AvoidanceAreaCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accessiblearea_.InternalSwap(&other->_impl_.accessiblearea_);
  _impl_.prohibitedarea_.InternalSwap(&other->_impl_.prohibitedarea_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvoidanceAreaCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[12]);
}

// ===================================================================

class Gamepad::_Internal {
 public:
  static const ::camel::api::Token& token(const Gamepad* msg);
};

const ::camel::api::Token&
Gamepad::_Internal::token(const Gamepad* msg) {
  return *msg->_impl_.token_;
}
Gamepad::Gamepad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Gamepad)
}
Gamepad::Gamepad(const Gamepad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gamepad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){nullptr}
    , decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_token()) {
    _this->_impl_.token_ = new ::camel::api::Token(*from._impl_.token_);
  }
  ::memcpy(&_impl_.vx_, &from._impl_.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:camel.api.Gamepad)
}

inline void Gamepad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){nullptr}
    , decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Gamepad::~Gamepad() {
  // @@protoc_insertion_point(destructor:camel.api.Gamepad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gamepad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.token_;
}

void Gamepad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gamepad::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Gamepad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.token_ != nullptr) {
    delete _impl_.token_;
  }
  _impl_.token_ = nullptr;
  ::memset(&_impl_.vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gamepad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .camel.api.Token token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gamepad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Gamepad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float vx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_vx(), target);
  }

  // float vy = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_vy(), target);
  }

  // float w = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  // .camel.api.Token token = 4;
  if (this->_internal_has_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Gamepad)
  return target;
}

size_t Gamepad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Gamepad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.Token token = 4;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.token_);
  }

  // float vx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = this->_internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 4;
  }

  // float vy = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = this->_internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 4;
  }

  // float w = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gamepad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gamepad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gamepad::GetClassData() const { return &_class_data_; }


void Gamepad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gamepad*>(&to_msg);
  auto& from = static_cast<const Gamepad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Gamepad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _this->_internal_mutable_token()->::camel::api::Token::MergeFrom(
        from._internal_token());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vx = from._internal_vx();
  uint32_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_vy = from._internal_vy();
  uint32_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gamepad::CopyFrom(const Gamepad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Gamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gamepad::IsInitialized() const {
  return true;
}

void Gamepad::InternalSwap(Gamepad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gamepad, _impl_.w_)
      + sizeof(Gamepad::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Gamepad, _impl_.token_)>(
          reinterpret_cast<char*>(&_impl_.token_),
          reinterpret_cast<char*>(&other->_impl_.token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gamepad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[13]);
}

// ===================================================================

class GamepadControl::_Internal {
 public:
};

GamepadControl::GamepadControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GamepadControl)
}
GamepadControl::GamepadControl(const GamepadControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GamepadControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.force_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.force_ = from._impl_.force_;
  // @@protoc_insertion_point(copy_constructor:camel.api.GamepadControl)
}

inline void GamepadControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.force_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GamepadControl::~GamepadControl() {
  // @@protoc_insertion_point(destructor:camel.api.GamepadControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GamepadControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GamepadControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GamepadControl::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GamepadControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamepadControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GamepadControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GamepadControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_force(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GamepadControl)
  return target;
}

size_t GamepadControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GamepadControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool force = 1;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GamepadControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GamepadControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GamepadControl::GetClassData() const { return &_class_data_; }


void GamepadControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GamepadControl*>(&to_msg);
  auto& from = static_cast<const GamepadControl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GamepadControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_force() != 0) {
    _this->_internal_set_force(from._internal_force());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GamepadControl::CopyFrom(const GamepadControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GamepadControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamepadControl::IsInitialized() const {
  return true;
}

void GamepadControl::InternalSwap(GamepadControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.force_, other->_impl_.force_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GamepadControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[14]);
}

// ===================================================================

class Token::_Internal {
 public:
  static const ::camel::api::Result& result(const Token* msg);
};

const ::camel::api::Result&
Token::_Internal::result(const Token* msg) {
  return *msg->_impl_.result_;
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Token* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::camel::api::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:camel.api.Token)
}

inline void Token::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:camel.api.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void Token::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.Token.key"));
        } else
          goto handle_unusual;
        continue;
      // .camel.api.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.Token.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .camel.api.Result result = 2;
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .camel.api.Result result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Token::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Token::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Token::GetClassData() const { return &_class_data_; }


void Token::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Token*>(&to_msg);
  auto& from = static_cast<const Token&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Token)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_has_result()) {
    _this->_internal_mutable_result()->::camel::api::Result::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Token::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[15]);
}

// ===================================================================

class MatchPoints_MatchPoint::_Internal {
 public:
  static const ::camel::api::Position& pos(const MatchPoints_MatchPoint* msg);
};

const ::camel::api::Position&
MatchPoints_MatchPoint::_Internal::pos(const MatchPoints_MatchPoint* msg) {
  return *msg->_impl_.pos_;
}
MatchPoints_MatchPoint::MatchPoints_MatchPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.MatchPoints.MatchPoint)
}
MatchPoints_MatchPoint::MatchPoints_MatchPoint(const MatchPoints_MatchPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPoints_MatchPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::camel::api::Position(*from._impl_.pos_);
  }
  // @@protoc_insertion_point(copy_constructor:camel.api.MatchPoints.MatchPoint)
}

inline void MatchPoints_MatchPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MatchPoints_MatchPoint::~MatchPoints_MatchPoint() {
  // @@protoc_insertion_point(destructor:camel.api.MatchPoints.MatchPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPoints_MatchPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void MatchPoints_MatchPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPoints_MatchPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.MatchPoints.MatchPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPoints_MatchPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.Position pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPoints_MatchPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.MatchPoints.MatchPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.Position pos = 1;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // bytes description = 2;
  if (!this->_internal_description().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.MatchPoints.MatchPoint)
  return target;
}

size_t MatchPoints_MatchPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.MatchPoints.MatchPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description());
  }

  // .camel.api.Position pos = 1;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPoints_MatchPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPoints_MatchPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPoints_MatchPoint::GetClassData() const { return &_class_data_; }


void MatchPoints_MatchPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPoints_MatchPoint*>(&to_msg);
  auto& from = static_cast<const MatchPoints_MatchPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.MatchPoints.MatchPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::camel::api::Position::MergeFrom(
        from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPoints_MatchPoint::CopyFrom(const MatchPoints_MatchPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.MatchPoints.MatchPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPoints_MatchPoint::IsInitialized() const {
  return true;
}

void MatchPoints_MatchPoint::InternalSwap(MatchPoints_MatchPoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.pos_, other->_impl_.pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPoints_MatchPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[16]);
}

// ===================================================================

class MatchPoints::_Internal {
 public:
};

MatchPoints::MatchPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.MatchPoints)
}
MatchPoints::MatchPoints(const MatchPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camel.api.MatchPoints)
}

inline void MatchPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchPoints::~MatchPoints() {
  // @@protoc_insertion_point(destructor:camel.api.MatchPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void MatchPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.MatchPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .camel.api.MatchPoints.MatchPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.MatchPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camel.api.MatchPoints.MatchPoint points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.MatchPoints)
  return target;
}

size_t MatchPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.MatchPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.MatchPoints.MatchPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPoints::GetClassData() const { return &_class_data_; }


void MatchPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPoints*>(&to_msg);
  auto& from = static_cast<const MatchPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.MatchPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPoints::CopyFrom(const MatchPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.MatchPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPoints::IsInitialized() const {
  return true;
}

void MatchPoints::InternalSwap(MatchPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[17]);
}

// ===================================================================

class MatchPointCommand::_Internal {
 public:
  static const ::camel::api::MatchPoints& points(const MatchPointCommand* msg);
};

const ::camel::api::MatchPoints&
MatchPointCommand::_Internal::points(const MatchPointCommand* msg) {
  return *msg->_impl_.points_;
}
MatchPointCommand::MatchPointCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.MatchPointCommand)
}
MatchPointCommand::MatchPointCommand(const MatchPointCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchPointCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){nullptr}
    , decltype(_impl_.remove_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    _this->_impl_.points_ = new ::camel::api::MatchPoints(*from._impl_.points_);
  }
  _this->_impl_.remove_ = from._impl_.remove_;
  // @@protoc_insertion_point(copy_constructor:camel.api.MatchPointCommand)
}

inline void MatchPointCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){nullptr}
    , decltype(_impl_.remove_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchPointCommand::~MatchPointCommand() {
  // @@protoc_insertion_point(destructor:camel.api.MatchPointCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchPointCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.points_;
}

void MatchPointCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchPointCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.MatchPointCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.points_ != nullptr) {
    delete _impl_.points_;
  }
  _impl_.points_ = nullptr;
  _impl_.remove_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchPointCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.MatchPoints points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool remove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.remove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchPointCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.MatchPointCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.MatchPoints points = 1;
  if (this->_internal_has_points()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::points(this),
        _Internal::points(this).GetCachedSize(), target, stream);
  }

  // bool remove = 2;
  if (this->_internal_remove() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_remove(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.MatchPointCommand)
  return target;
}

size_t MatchPointCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.MatchPointCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.MatchPoints points = 1;
  if (this->_internal_has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.points_);
  }

  // bool remove = 2;
  if (this->_internal_remove() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchPointCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchPointCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchPointCommand::GetClassData() const { return &_class_data_; }


void MatchPointCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchPointCommand*>(&to_msg);
  auto& from = static_cast<const MatchPointCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.MatchPointCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_points()) {
    _this->_internal_mutable_points()->::camel::api::MatchPoints::MergeFrom(
        from._internal_points());
  }
  if (from._internal_remove() != 0) {
    _this->_internal_set_remove(from._internal_remove());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchPointCommand::CopyFrom(const MatchPointCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.MatchPointCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPointCommand::IsInitialized() const {
  return true;
}

void MatchPointCommand::InternalSwap(MatchPointCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchPointCommand, _impl_.remove_)
      + sizeof(MatchPointCommand::_impl_.remove_)
      - PROTOBUF_FIELD_OFFSET(MatchPointCommand, _impl_.points_)>(
          reinterpret_cast<char*>(&_impl_.points_),
          reinterpret_cast<char*>(&other->_impl_.points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPointCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[18]);
}

// ===================================================================

class GrpcTaskStation::_Internal {
 public:
};

GrpcTaskStation::GrpcTaskStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GrpcTaskStation)
}
GrpcTaskStation::GrpcTaskStation(const GrpcTaskStation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcTaskStation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rfid_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rfid().empty()) {
    _this->_impl_.rfid_.Set(from._internal_rfid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:camel.api.GrpcTaskStation)
}

inline void GrpcTaskStation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rfid_){}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rfid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rfid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrpcTaskStation::~GrpcTaskStation() {
  // @@protoc_insertion_point(destructor:camel.api.GrpcTaskStation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcTaskStation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rfid_.Destroy();
}

void GrpcTaskStation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcTaskStation::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GrpcTaskStation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rfid_.ClearToEmpty();
  _impl_.action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcTaskStation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rfid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rfid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GrpcTaskStation.rfid"));
        } else
          goto handle_unusual;
        continue;
      // .camel.api.GrpcTaskStation.TaskAction action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::camel::api::GrpcTaskStation_TaskAction>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcTaskStation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GrpcTaskStation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rfid = 1;
  if (!this->_internal_rfid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rfid().data(), static_cast<int>(this->_internal_rfid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GrpcTaskStation.rfid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rfid(), target);
  }

  // .camel.api.GrpcTaskStation.TaskAction action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GrpcTaskStation)
  return target;
}

size_t GrpcTaskStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GrpcTaskStation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rfid = 1;
  if (!this->_internal_rfid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rfid());
  }

  // .camel.api.GrpcTaskStation.TaskAction action = 2;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcTaskStation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcTaskStation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcTaskStation::GetClassData() const { return &_class_data_; }


void GrpcTaskStation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcTaskStation*>(&to_msg);
  auto& from = static_cast<const GrpcTaskStation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GrpcTaskStation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rfid().empty()) {
    _this->_internal_set_rfid(from._internal_rfid());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcTaskStation::CopyFrom(const GrpcTaskStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GrpcTaskStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcTaskStation::IsInitialized() const {
  return true;
}

void GrpcTaskStation::InternalSwap(GrpcTaskStation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rfid_, lhs_arena,
      &other->_impl_.rfid_, rhs_arena
  );
  swap(_impl_.action_, other->_impl_.action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcTaskStation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[19]);
}

// ===================================================================

class GrpcTaskAllocation::_Internal {
 public:
};

GrpcTaskAllocation::GrpcTaskAllocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GrpcTaskAllocation)
}
GrpcTaskAllocation::GrpcTaskAllocation(const GrpcTaskAllocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcTaskAllocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stations_){from._impl_.stations_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.circle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.circle_ = from._impl_.circle_;
  // @@protoc_insertion_point(copy_constructor:camel.api.GrpcTaskAllocation)
}

inline void GrpcTaskAllocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stations_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.circle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrpcTaskAllocation::~GrpcTaskAllocation() {
  // @@protoc_insertion_point(destructor:camel.api.GrpcTaskAllocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcTaskAllocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stations_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.description_.Destroy();
}

void GrpcTaskAllocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcTaskAllocation::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GrpcTaskAllocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stations_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.circle_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcTaskAllocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GrpcTaskAllocation.id"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GrpcTaskAllocation.description"));
        } else
          goto handle_unusual;
        continue;
      // repeated .camel.api.GrpcTaskStation stations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcTaskAllocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GrpcTaskAllocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GrpcTaskAllocation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GrpcTaskAllocation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .camel.api.GrpcTaskStation stations = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stations_size()); i < n; i++) {
    const auto& repfield = this->_internal_stations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool circle = 4;
  if (this->_internal_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_circle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GrpcTaskAllocation)
  return target;
}

size_t GrpcTaskAllocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GrpcTaskAllocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.GrpcTaskStation stations = 3;
  total_size += 1UL * this->_internal_stations_size();
  for (const auto& msg : this->_impl_.stations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool circle = 4;
  if (this->_internal_circle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcTaskAllocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcTaskAllocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcTaskAllocation::GetClassData() const { return &_class_data_; }


void GrpcTaskAllocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcTaskAllocation*>(&to_msg);
  auto& from = static_cast<const GrpcTaskAllocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GrpcTaskAllocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stations_.MergeFrom(from._impl_.stations_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_circle() != 0) {
    _this->_internal_set_circle(from._internal_circle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcTaskAllocation::CopyFrom(const GrpcTaskAllocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GrpcTaskAllocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcTaskAllocation::IsInitialized() const {
  return true;
}

void GrpcTaskAllocation::InternalSwap(GrpcTaskAllocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stations_.InternalSwap(&other->_impl_.stations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.circle_, other->_impl_.circle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcTaskAllocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[20]);
}

// ===================================================================

class GrpcTaskOperation::_Internal {
 public:
  static const ::camel::api::GrpcTaskAllocation& task(const GrpcTaskOperation* msg);
};

const ::camel::api::GrpcTaskAllocation&
GrpcTaskOperation::_Internal::task(const GrpcTaskOperation* msg) {
  return *msg->_impl_.task_;
}
GrpcTaskOperation::GrpcTaskOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GrpcTaskOperation)
}
GrpcTaskOperation::GrpcTaskOperation(const GrpcTaskOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcTaskOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){nullptr}
    , decltype(_impl_.opt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::camel::api::GrpcTaskAllocation(*from._impl_.task_);
  }
  _this->_impl_.opt_ = from._impl_.opt_;
  // @@protoc_insertion_point(copy_constructor:camel.api.GrpcTaskOperation)
}

inline void GrpcTaskOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_){nullptr}
    , decltype(_impl_.opt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrpcTaskOperation::~GrpcTaskOperation() {
  // @@protoc_insertion_point(destructor:camel.api.GrpcTaskOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcTaskOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.task_;
}

void GrpcTaskOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcTaskOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GrpcTaskOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  _impl_.opt_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcTaskOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.GrpcTaskAllocation task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .camel.api.GrpcTaskOperation.Operation opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_opt(static_cast<::camel::api::GrpcTaskOperation_Operation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcTaskOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GrpcTaskOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.GrpcTaskAllocation task = 1;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // .camel.api.GrpcTaskOperation.Operation opt = 2;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GrpcTaskOperation)
  return target;
}

size_t GrpcTaskOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GrpcTaskOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.GrpcTaskAllocation task = 1;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  // .camel.api.GrpcTaskOperation.Operation opt = 2;
  if (this->_internal_opt() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcTaskOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcTaskOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcTaskOperation::GetClassData() const { return &_class_data_; }


void GrpcTaskOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcTaskOperation*>(&to_msg);
  auto& from = static_cast<const GrpcTaskOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GrpcTaskOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::camel::api::GrpcTaskAllocation::MergeFrom(
        from._internal_task());
  }
  if (from._internal_opt() != 0) {
    _this->_internal_set_opt(from._internal_opt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcTaskOperation::CopyFrom(const GrpcTaskOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GrpcTaskOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcTaskOperation::IsInitialized() const {
  return true;
}

void GrpcTaskOperation::InternalSwap(GrpcTaskOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrpcTaskOperation, _impl_.opt_)
      + sizeof(GrpcTaskOperation::_impl_.opt_)
      - PROTOBUF_FIELD_OFFSET(GrpcTaskOperation, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcTaskOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[21]);
}

// ===================================================================

class GrpcTaskAllocations::_Internal {
 public:
};

GrpcTaskAllocations::GrpcTaskAllocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GrpcTaskAllocations)
}
GrpcTaskAllocations::GrpcTaskAllocations(const GrpcTaskAllocations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcTaskAllocations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:camel.api.GrpcTaskAllocations)
}

inline void GrpcTaskAllocations::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GrpcTaskAllocations::~GrpcTaskAllocations() {
  // @@protoc_insertion_point(destructor:camel.api.GrpcTaskAllocations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcTaskAllocations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
}

void GrpcTaskAllocations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcTaskAllocations::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GrpcTaskAllocations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcTaskAllocations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .camel.api.GrpcTaskAllocation tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcTaskAllocations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GrpcTaskAllocations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .camel.api.GrpcTaskAllocation tasks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GrpcTaskAllocations)
  return target;
}

size_t GrpcTaskAllocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GrpcTaskAllocations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .camel.api.GrpcTaskAllocation tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcTaskAllocations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcTaskAllocations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcTaskAllocations::GetClassData() const { return &_class_data_; }


void GrpcTaskAllocations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcTaskAllocations*>(&to_msg);
  auto& from = static_cast<const GrpcTaskAllocations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GrpcTaskAllocations)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcTaskAllocations::CopyFrom(const GrpcTaskAllocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GrpcTaskAllocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcTaskAllocations::IsInitialized() const {
  return true;
}

void GrpcTaskAllocations::InternalSwap(GrpcTaskAllocations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcTaskAllocations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[22]);
}

// ===================================================================

class GrpcTaskInfomation::_Internal {
 public:
  static const ::camel::api::GrpcTaskStation& target(const GrpcTaskInfomation* msg);
};

const ::camel::api::GrpcTaskStation&
GrpcTaskInfomation::_Internal::target(const GrpcTaskInfomation* msg) {
  return *msg->_impl_.target_;
}
GrpcTaskInfomation::GrpcTaskInfomation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.GrpcTaskInfomation)
}
GrpcTaskInfomation::GrpcTaskInfomation(const GrpcTaskInfomation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GrpcTaskInfomation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.hastask_){}
    , decltype(_impl_.circle_){}
    , decltype(_impl_.multicar_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::camel::api::GrpcTaskStation(*from._impl_.target_);
  }
  ::memcpy(&_impl_.hastask_, &from._impl_.hastask_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.multicar_) -
    reinterpret_cast<char*>(&_impl_.hastask_)) + sizeof(_impl_.multicar_));
  // @@protoc_insertion_point(copy_constructor:camel.api.GrpcTaskInfomation)
}

inline void GrpcTaskInfomation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.description_){}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.hastask_){false}
    , decltype(_impl_.circle_){false}
    , decltype(_impl_.multicar_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GrpcTaskInfomation::~GrpcTaskInfomation() {
  // @@protoc_insertion_point(destructor:camel.api.GrpcTaskInfomation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GrpcTaskInfomation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void GrpcTaskInfomation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GrpcTaskInfomation::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.GrpcTaskInfomation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  ::memset(&_impl_.hastask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.multicar_) -
      reinterpret_cast<char*>(&_impl_.hastask_)) + sizeof(_impl_.multicar_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GrpcTaskInfomation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool hasTask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hastask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.GrpcTaskInfomation.description"));
        } else
          goto handle_unusual;
        continue;
      // .camel.api.GrpcTaskStation target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool circle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.circle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool multicar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.multicar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GrpcTaskInfomation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.GrpcTaskInfomation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hasTask = 1;
  if (this->_internal_hastask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_hastask(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.GrpcTaskInfomation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .camel.api.GrpcTaskStation target = 3;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // bool circle = 4;
  if (this->_internal_circle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_circle(), target);
  }

  // bool multicar = 5;
  if (this->_internal_multicar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_multicar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.GrpcTaskInfomation)
  return target;
}

size_t GrpcTaskInfomation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.GrpcTaskInfomation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .camel.api.GrpcTaskStation target = 3;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // bool hasTask = 1;
  if (this->_internal_hastask() != 0) {
    total_size += 1 + 1;
  }

  // bool circle = 4;
  if (this->_internal_circle() != 0) {
    total_size += 1 + 1;
  }

  // bool multicar = 5;
  if (this->_internal_multicar() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GrpcTaskInfomation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GrpcTaskInfomation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GrpcTaskInfomation::GetClassData() const { return &_class_data_; }


void GrpcTaskInfomation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GrpcTaskInfomation*>(&to_msg);
  auto& from = static_cast<const GrpcTaskInfomation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.GrpcTaskInfomation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::camel::api::GrpcTaskStation::MergeFrom(
        from._internal_target());
  }
  if (from._internal_hastask() != 0) {
    _this->_internal_set_hastask(from._internal_hastask());
  }
  if (from._internal_circle() != 0) {
    _this->_internal_set_circle(from._internal_circle());
  }
  if (from._internal_multicar() != 0) {
    _this->_internal_set_multicar(from._internal_multicar());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GrpcTaskInfomation::CopyFrom(const GrpcTaskInfomation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.GrpcTaskInfomation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcTaskInfomation::IsInitialized() const {
  return true;
}

void GrpcTaskInfomation::InternalSwap(GrpcTaskInfomation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GrpcTaskInfomation, _impl_.multicar_)
      + sizeof(GrpcTaskInfomation::_impl_.multicar_)
      - PROTOBUF_FIELD_OFFSET(GrpcTaskInfomation, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcTaskInfomation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[23]);
}

// ===================================================================

class Collaborative::_Internal {
 public:
};

Collaborative::Collaborative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.Collaborative)
}
Collaborative::Collaborative(const Collaborative& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Collaborative* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.headcarip_){}
    , decltype(_impl_.rearcarip_){}
    , decltype(_impl_.cooperation_){}
    , decltype(_impl_.ismaster_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.headcarip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headcarip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_headcarip().empty()) {
    _this->_impl_.headcarip_.Set(from._internal_headcarip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rearcarip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rearcarip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rearcarip().empty()) {
    _this->_impl_.rearcarip_.Set(from._internal_rearcarip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cooperation_, &from._impl_.cooperation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ismaster_) -
    reinterpret_cast<char*>(&_impl_.cooperation_)) + sizeof(_impl_.ismaster_));
  // @@protoc_insertion_point(copy_constructor:camel.api.Collaborative)
}

inline void Collaborative::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.headcarip_){}
    , decltype(_impl_.rearcarip_){}
    , decltype(_impl_.cooperation_){0}
    , decltype(_impl_.ismaster_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.headcarip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headcarip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rearcarip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rearcarip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Collaborative::~Collaborative() {
  // @@protoc_insertion_point(destructor:camel.api.Collaborative)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collaborative::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.headcarip_.Destroy();
  _impl_.rearcarip_.Destroy();
}

void Collaborative::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Collaborative::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.Collaborative)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headcarip_.ClearToEmpty();
  _impl_.rearcarip_.ClearToEmpty();
  ::memset(&_impl_.cooperation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ismaster_) -
      reinterpret_cast<char*>(&_impl_.cooperation_)) + sizeof(_impl_.ismaster_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collaborative::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.Collaborative.CooperationEnum cooperation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cooperation(static_cast<::camel::api::Collaborative_CooperationEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // string headCarIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_headcarip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.Collaborative.headCarIp"));
        } else
          goto handle_unusual;
        continue;
      // string rearCarIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rearcarip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "camel.api.Collaborative.rearCarIp"));
        } else
          goto handle_unusual;
        continue;
      // bool isMaster = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ismaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collaborative::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.Collaborative)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.Collaborative.CooperationEnum cooperation = 1;
  if (this->_internal_cooperation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cooperation(), target);
  }

  // string headCarIp = 2;
  if (!this->_internal_headcarip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headcarip().data(), static_cast<int>(this->_internal_headcarip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.Collaborative.headCarIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_headcarip(), target);
  }

  // string rearCarIp = 3;
  if (!this->_internal_rearcarip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rearcarip().data(), static_cast<int>(this->_internal_rearcarip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "camel.api.Collaborative.rearCarIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rearcarip(), target);
  }

  // bool isMaster = 4;
  if (this->_internal_ismaster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ismaster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.Collaborative)
  return target;
}

size_t Collaborative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.Collaborative)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string headCarIp = 2;
  if (!this->_internal_headcarip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headcarip());
  }

  // string rearCarIp = 3;
  if (!this->_internal_rearcarip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rearcarip());
  }

  // .camel.api.Collaborative.CooperationEnum cooperation = 1;
  if (this->_internal_cooperation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cooperation());
  }

  // bool isMaster = 4;
  if (this->_internal_ismaster() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collaborative::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Collaborative::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collaborative::GetClassData() const { return &_class_data_; }


void Collaborative::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Collaborative*>(&to_msg);
  auto& from = static_cast<const Collaborative&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.Collaborative)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_headcarip().empty()) {
    _this->_internal_set_headcarip(from._internal_headcarip());
  }
  if (!from._internal_rearcarip().empty()) {
    _this->_internal_set_rearcarip(from._internal_rearcarip());
  }
  if (from._internal_cooperation() != 0) {
    _this->_internal_set_cooperation(from._internal_cooperation());
  }
  if (from._internal_ismaster() != 0) {
    _this->_internal_set_ismaster(from._internal_ismaster());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collaborative::CopyFrom(const Collaborative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.Collaborative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collaborative::IsInitialized() const {
  return true;
}

void Collaborative::InternalSwap(Collaborative* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.headcarip_, lhs_arena,
      &other->_impl_.headcarip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rearcarip_, lhs_arena,
      &other->_impl_.rearcarip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Collaborative, _impl_.ismaster_)
      + sizeof(Collaborative::_impl_.ismaster_)
      - PROTOBUF_FIELD_OFFSET(Collaborative, _impl_.cooperation_)>(
          reinterpret_cast<char*>(&_impl_.cooperation_),
          reinterpret_cast<char*>(&other->_impl_.cooperation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Collaborative::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[24]);
}

// ===================================================================

class CollaborativeResult::_Internal {
 public:
};

CollaborativeResult::CollaborativeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:camel.api.CollaborativeResult)
}
CollaborativeResult::CollaborativeResult(const CollaborativeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollaborativeResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:camel.api.CollaborativeResult)
}

inline void CollaborativeResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollaborativeResult::~CollaborativeResult() {
  // @@protoc_insertion_point(destructor:camel.api.CollaborativeResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollaborativeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollaborativeResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollaborativeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:camel.api.CollaborativeResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollaborativeResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .camel.api.CollaborativeResult.Status result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::camel::api::CollaborativeResult_Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollaborativeResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:camel.api.CollaborativeResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .camel.api.CollaborativeResult.Status result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:camel.api.CollaborativeResult)
  return target;
}

size_t CollaborativeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camel.api.CollaborativeResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .camel.api.CollaborativeResult.Status result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollaborativeResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollaborativeResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollaborativeResult::GetClassData() const { return &_class_data_; }


void CollaborativeResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollaborativeResult*>(&to_msg);
  auto& from = static_cast<const CollaborativeResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:camel.api.CollaborativeResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollaborativeResult::CopyFrom(const CollaborativeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camel.api.CollaborativeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollaborativeResult::IsInitialized() const {
  return true;
}

void CollaborativeResult::InternalSwap(CollaborativeResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollaborativeResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_camel_2dcommon_2eproto_getter, &descriptor_table_camel_2dcommon_2eproto_once,
      file_level_metadata_camel_2dcommon_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace camel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::camel::api::Result*
Arena::CreateMaybeMessage< ::camel::api::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Battery*
Arena::CreateMaybeMessage< ::camel::api::Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::CarHWInfo*
Arena::CreateMaybeMessage< ::camel::api::CarHWInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::CarHWInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Alarm*
Arena::CreateMaybeMessage< ::camel::api::Alarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ChargeCmd*
Arena::CreateMaybeMessage< ::camel::api::ChargeCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ChargeCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Position*
Arena::CreateMaybeMessage< ::camel::api::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::ContextTask*
Arena::CreateMaybeMessage< ::camel::api::ContextTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::ContextTask >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Coord*
Arena::CreateMaybeMessage< ::camel::api::Coord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Coord >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GStation*
Arena::CreateMaybeMessage< ::camel::api::GStation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GStation >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GPath*
Arena::CreateMaybeMessage< ::camel::api::GPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GPath >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::PathCollection*
Arena::CreateMaybeMessage< ::camel::api::PathCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::PathCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::AvoidanceAreaCollection_AvoidanceArea*
Arena::CreateMaybeMessage< ::camel::api::AvoidanceAreaCollection_AvoidanceArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::AvoidanceAreaCollection_AvoidanceArea >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::AvoidanceAreaCollection*
Arena::CreateMaybeMessage< ::camel::api::AvoidanceAreaCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::AvoidanceAreaCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Gamepad*
Arena::CreateMaybeMessage< ::camel::api::Gamepad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Gamepad >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GamepadControl*
Arena::CreateMaybeMessage< ::camel::api::GamepadControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GamepadControl >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Token*
Arena::CreateMaybeMessage< ::camel::api::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Token >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::MatchPoints_MatchPoint*
Arena::CreateMaybeMessage< ::camel::api::MatchPoints_MatchPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::MatchPoints_MatchPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::MatchPoints*
Arena::CreateMaybeMessage< ::camel::api::MatchPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::MatchPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::MatchPointCommand*
Arena::CreateMaybeMessage< ::camel::api::MatchPointCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::MatchPointCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GrpcTaskStation*
Arena::CreateMaybeMessage< ::camel::api::GrpcTaskStation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GrpcTaskStation >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GrpcTaskAllocation*
Arena::CreateMaybeMessage< ::camel::api::GrpcTaskAllocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GrpcTaskAllocation >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GrpcTaskOperation*
Arena::CreateMaybeMessage< ::camel::api::GrpcTaskOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GrpcTaskOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GrpcTaskAllocations*
Arena::CreateMaybeMessage< ::camel::api::GrpcTaskAllocations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GrpcTaskAllocations >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::GrpcTaskInfomation*
Arena::CreateMaybeMessage< ::camel::api::GrpcTaskInfomation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::GrpcTaskInfomation >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::Collaborative*
Arena::CreateMaybeMessage< ::camel::api::Collaborative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::Collaborative >(arena);
}
template<> PROTOBUF_NOINLINE ::camel::api::CollaborativeResult*
Arena::CreateMaybeMessage< ::camel::api::CollaborativeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::camel::api::CollaborativeResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
