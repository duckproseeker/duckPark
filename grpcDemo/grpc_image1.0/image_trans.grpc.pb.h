// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_trans.proto
#ifndef GRPC_image_5ftrans_2eproto__INCLUDED
#define GRPC_image_5ftrans_2eproto__INCLUDED

#include "image_trans.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace img_transfer {

class imgDemo final {
 public:
  static constexpr char const* service_full_name() {
    return "img_transfer.imgDemo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status imgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::img_transfer::myStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>> AsyncimgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>>(AsyncimgUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>> PrepareAsyncimgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>>(PrepareAsyncimgUploadRaw(context, request, cq));
    }
    virtual ::grpc::Status imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::img_transfer::image* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>> AsyncimgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>>(AsyncimgDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>> PrepareAsyncimgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>>(PrepareAsyncimgDownloadRaw(context, request, cq));
    }
    virtual ::grpc::Status imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::img_transfer::nameList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>> AsyncimgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>>(AsyncimgShowallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>> PrepareAsyncimgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>>(PrepareAsyncimgShowallRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, std::function<void(::grpc::Status)>) = 0;
      virtual void imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>* AsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::myStatus>* PrepareAsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>* AsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::image>* PrepareAsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>* AsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::img_transfer::nameList>* PrepareAsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status imgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::img_transfer::myStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>> AsyncimgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>>(AsyncimgUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>> PrepareAsyncimgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>>(PrepareAsyncimgUploadRaw(context, request, cq));
    }
    ::grpc::Status imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::img_transfer::image* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::image>> AsyncimgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::image>>(AsyncimgDownloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::image>> PrepareAsyncimgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::image>>(PrepareAsyncimgDownloadRaw(context, request, cq));
    }
    ::grpc::Status imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::img_transfer::nameList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>> AsyncimgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>>(AsyncimgShowallRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>> PrepareAsyncimgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>>(PrepareAsyncimgShowallRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, std::function<void(::grpc::Status)>) override;
      void imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, std::function<void(::grpc::Status)>) override;
      void imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, ::grpc::ClientUnaryReactor* reactor) override;
      void imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, std::function<void(::grpc::Status)>) override;
      void imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>* AsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>* PrepareAsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::img_transfer::image>* AsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::img_transfer::image>* PrepareAsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>* AsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>* PrepareAsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_imgUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_imgDownload_;
    const ::grpc::internal::RpcMethod rpcmethod_imgShowall_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status imgUpload(::grpc::ServerContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response);
    virtual ::grpc::Status imgDownload(::grpc::ServerContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response);
    virtual ::grpc::Status imgShowall(::grpc::ServerContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_imgUpload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgUpload(::grpc::ServerContext* context, ::img_transfer::image* request, ::grpc::ServerAsyncResponseWriter< ::img_transfer::myStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_imgDownload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgDownload(::grpc::ServerContext* context, ::img_transfer::Basename* request, ::grpc::ServerAsyncResponseWriter< ::img_transfer::image>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_imgShowall() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgShowall(::grpc::ServerContext* context, ::img_transfer::myStatus* request, ::grpc::ServerAsyncResponseWriter< ::img_transfer::nameList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_imgUpload<WithAsyncMethod_imgDownload<WithAsyncMethod_imgShowall<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_imgUpload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::img_transfer::image, ::img_transfer::myStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response) { return this->imgUpload(context, request, response); }));}
    void SetMessageAllocatorFor_imgUpload(
        ::grpc::MessageAllocator< ::img_transfer::image, ::img_transfer::myStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::img_transfer::image, ::img_transfer::myStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_imgDownload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::img_transfer::Basename, ::img_transfer::image>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response) { return this->imgDownload(context, request, response); }));}
    void SetMessageAllocatorFor_imgDownload(
        ::grpc::MessageAllocator< ::img_transfer::Basename, ::img_transfer::image>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::img_transfer::Basename, ::img_transfer::image>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_imgShowall() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::img_transfer::myStatus, ::img_transfer::nameList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response) { return this->imgShowall(context, request, response); }));}
    void SetMessageAllocatorFor_imgShowall(
        ::grpc::MessageAllocator< ::img_transfer::myStatus, ::img_transfer::nameList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::img_transfer::myStatus, ::img_transfer::nameList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgShowall(
      ::grpc::CallbackServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_imgUpload<WithCallbackMethod_imgDownload<WithCallbackMethod_imgShowall<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_imgUpload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_imgDownload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_imgShowall() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_imgUpload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_imgDownload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgDownload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_imgShowall() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestimgShowall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_imgUpload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->imgUpload(context, request, response); }));
    }
    ~WithRawCallbackMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_imgDownload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->imgDownload(context, request, response); }));
    }
    ~WithRawCallbackMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgDownload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_imgShowall() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->imgShowall(context, request, response); }));
    }
    ~WithRawCallbackMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* imgShowall(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_imgUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_imgUpload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::img_transfer::image, ::img_transfer::myStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::img_transfer::image, ::img_transfer::myStatus>* streamer) {
                       return this->StreamedimgUpload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_imgUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status imgUpload(::grpc::ServerContext* /*context*/, const ::img_transfer::image* /*request*/, ::img_transfer::myStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimgUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::img_transfer::image,::img_transfer::myStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_imgDownload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_imgDownload() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::img_transfer::Basename, ::img_transfer::image>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::img_transfer::Basename, ::img_transfer::image>* streamer) {
                       return this->StreamedimgDownload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_imgDownload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status imgDownload(::grpc::ServerContext* /*context*/, const ::img_transfer::Basename* /*request*/, ::img_transfer::image* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimgDownload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::img_transfer::Basename,::img_transfer::image>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_imgShowall : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_imgShowall() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::img_transfer::myStatus, ::img_transfer::nameList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::img_transfer::myStatus, ::img_transfer::nameList>* streamer) {
                       return this->StreamedimgShowall(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_imgShowall() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status imgShowall(::grpc::ServerContext* /*context*/, const ::img_transfer::myStatus* /*request*/, ::img_transfer::nameList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedimgShowall(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::img_transfer::myStatus,::img_transfer::nameList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_imgUpload<WithStreamedUnaryMethod_imgDownload<WithStreamedUnaryMethod_imgShowall<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_imgUpload<WithStreamedUnaryMethod_imgDownload<WithStreamedUnaryMethod_imgShowall<Service > > > StreamedService;
};

}  // namespace img_transfer


#endif  // GRPC_image_5ftrans_2eproto__INCLUDED
