// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_trans.proto

#include "image_trans.pb.h"
#include "image_trans.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace img_transfer {

static const char* imgDemo_method_names[] = {
  "/img_transfer.imgDemo/imgUpload",
  "/img_transfer.imgDemo/imgDownload",
  "/img_transfer.imgDemo/imgShowall",
};

std::unique_ptr< imgDemo::Stub> imgDemo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< imgDemo::Stub> stub(new imgDemo::Stub(channel, options));
  return stub;
}

imgDemo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_imgUpload_(imgDemo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_imgDownload_(imgDemo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_imgShowall_(imgDemo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status imgDemo::Stub::imgUpload(::grpc::ClientContext* context, const ::img_transfer::image& request, ::img_transfer::myStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::img_transfer::image, ::img_transfer::myStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_imgUpload_, context, request, response);
}

void imgDemo::Stub::async::imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::img_transfer::image, ::img_transfer::myStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgUpload_, context, request, response, std::move(f));
}

void imgDemo::Stub::async::imgUpload(::grpc::ClientContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgUpload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>* imgDemo::Stub::PrepareAsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::img_transfer::myStatus, ::img_transfer::image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_imgUpload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::myStatus>* imgDemo::Stub::AsyncimgUploadRaw(::grpc::ClientContext* context, const ::img_transfer::image& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimgUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status imgDemo::Stub::imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::img_transfer::image* response) {
  return ::grpc::internal::BlockingUnaryCall< ::img_transfer::Basename, ::img_transfer::image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_imgDownload_, context, request, response);
}

void imgDemo::Stub::async::imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::img_transfer::Basename, ::img_transfer::image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgDownload_, context, request, response, std::move(f));
}

void imgDemo::Stub::async::imgDownload(::grpc::ClientContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::image>* imgDemo::Stub::PrepareAsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::img_transfer::image, ::img_transfer::Basename, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_imgDownload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::image>* imgDemo::Stub::AsyncimgDownloadRaw(::grpc::ClientContext* context, const ::img_transfer::Basename& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimgDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status imgDemo::Stub::imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::img_transfer::nameList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::img_transfer::myStatus, ::img_transfer::nameList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_imgShowall_, context, request, response);
}

void imgDemo::Stub::async::imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::img_transfer::myStatus, ::img_transfer::nameList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgShowall_, context, request, response, std::move(f));
}

void imgDemo::Stub::async::imgShowall(::grpc::ClientContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_imgShowall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>* imgDemo::Stub::PrepareAsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::img_transfer::nameList, ::img_transfer::myStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_imgShowall_, context, request);
}

::grpc::ClientAsyncResponseReader< ::img_transfer::nameList>* imgDemo::Stub::AsyncimgShowallRaw(::grpc::ClientContext* context, const ::img_transfer::myStatus& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncimgShowallRaw(context, request, cq);
  result->StartCall();
  return result;
}

imgDemo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      imgDemo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< imgDemo::Service, ::img_transfer::image, ::img_transfer::myStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](imgDemo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::img_transfer::image* req,
             ::img_transfer::myStatus* resp) {
               return service->imgUpload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      imgDemo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< imgDemo::Service, ::img_transfer::Basename, ::img_transfer::image, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](imgDemo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::img_transfer::Basename* req,
             ::img_transfer::image* resp) {
               return service->imgDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      imgDemo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< imgDemo::Service, ::img_transfer::myStatus, ::img_transfer::nameList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](imgDemo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::img_transfer::myStatus* req,
             ::img_transfer::nameList* resp) {
               return service->imgShowall(ctx, req, resp);
             }, this)));
}

imgDemo::Service::~Service() {
}

::grpc::Status imgDemo::Service::imgUpload(::grpc::ServerContext* context, const ::img_transfer::image* request, ::img_transfer::myStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status imgDemo::Service::imgDownload(::grpc::ServerContext* context, const ::img_transfer::Basename* request, ::img_transfer::image* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status imgDemo::Service::imgShowall(::grpc::ServerContext* context, const ::img_transfer::myStatus* request, ::img_transfer::nameList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace img_transfer

