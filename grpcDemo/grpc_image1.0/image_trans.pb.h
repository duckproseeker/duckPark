// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_trans.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5ftrans_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_5ftrans_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_5ftrans_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5ftrans_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_5ftrans_2eproto;
namespace img_transfer {
class Basename;
struct BasenameDefaultTypeInternal;
extern BasenameDefaultTypeInternal _Basename_default_instance_;
class image;
struct imageDefaultTypeInternal;
extern imageDefaultTypeInternal _image_default_instance_;
class image_imgData;
struct image_imgDataDefaultTypeInternal;
extern image_imgDataDefaultTypeInternal _image_imgData_default_instance_;
class myStatus;
struct myStatusDefaultTypeInternal;
extern myStatusDefaultTypeInternal _myStatus_default_instance_;
class nameList;
struct nameListDefaultTypeInternal;
extern nameListDefaultTypeInternal _nameList_default_instance_;
}  // namespace img_transfer
PROTOBUF_NAMESPACE_OPEN
template<> ::img_transfer::Basename* Arena::CreateMaybeMessage<::img_transfer::Basename>(Arena*);
template<> ::img_transfer::image* Arena::CreateMaybeMessage<::img_transfer::image>(Arena*);
template<> ::img_transfer::image_imgData* Arena::CreateMaybeMessage<::img_transfer::image_imgData>(Arena*);
template<> ::img_transfer::myStatus* Arena::CreateMaybeMessage<::img_transfer::myStatus>(Arena*);
template<> ::img_transfer::nameList* Arena::CreateMaybeMessage<::img_transfer::nameList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace img_transfer {

// ===================================================================

class Basename final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:img_transfer.Basename) */ {
 public:
  inline Basename() : Basename(nullptr) {}
  ~Basename() override;
  explicit constexpr Basename(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Basename(const Basename& from);
  Basename(Basename&& from) noexcept
    : Basename() {
    *this = ::std::move(from);
  }

  inline Basename& operator=(const Basename& from) {
    CopyFrom(from);
    return *this;
  }
  inline Basename& operator=(Basename&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Basename& default_instance() {
    return *internal_default_instance();
  }
  static inline const Basename* internal_default_instance() {
    return reinterpret_cast<const Basename*>(
               &_Basename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Basename& a, Basename& b) {
    a.Swap(&b);
  }
  inline void Swap(Basename* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Basename* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Basename* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Basename>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Basename& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Basename& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Basename* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "img_transfer.Basename";
  }
  protected:
  explicit Basename(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseNameFieldNumber = 1,
  };
  // string base_name = 1;
  void clear_base_name();
  const std::string& base_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base_name();
  PROTOBUF_NODISCARD std::string* release_base_name();
  void set_allocated_base_name(std::string* base_name);
  private:
  const std::string& _internal_base_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_name(const std::string& value);
  std::string* _internal_mutable_base_name();
  public:

  // @@protoc_insertion_point(class_scope:img_transfer.Basename)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5ftrans_2eproto;
};
// -------------------------------------------------------------------

class image_imgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:img_transfer.image.imgData) */ {
 public:
  inline image_imgData() : image_imgData(nullptr) {}
  ~image_imgData() override;
  explicit constexpr image_imgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  image_imgData(const image_imgData& from);
  image_imgData(image_imgData&& from) noexcept
    : image_imgData() {
    *this = ::std::move(from);
  }

  inline image_imgData& operator=(const image_imgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline image_imgData& operator=(image_imgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const image_imgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const image_imgData* internal_default_instance() {
    return reinterpret_cast<const image_imgData*>(
               &_image_imgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(image_imgData& a, image_imgData& b) {
    a.Swap(&b);
  }
  inline void Swap(image_imgData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(image_imgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  image_imgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<image_imgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const image_imgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const image_imgData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(image_imgData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "img_transfer.image.imgData";
  }
  protected:
  explicit image_imgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLengthFieldNumber = 2,
    kWidthFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:img_transfer.image.imgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int32_t length_;
  int32_t width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5ftrans_2eproto;
};
// -------------------------------------------------------------------

class image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:img_transfer.image) */ {
 public:
  inline image() : image(nullptr) {}
  ~image() override;
  explicit constexpr image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  image(const image& from);
  image(image&& from) noexcept
    : image() {
    *this = ::std::move(from);
  }

  inline image& operator=(const image& from) {
    CopyFrom(from);
    return *this;
  }
  inline image& operator=(image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const image& default_instance() {
    return *internal_default_instance();
  }
  static inline const image* internal_default_instance() {
    return reinterpret_cast<const image*>(
               &_image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(image& a, image& b) {
    a.Swap(&b);
  }
  inline void Swap(image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "img_transfer.image";
  }
  protected:
  explicit image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef image_imgData imgData;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .img_transfer.image.imgData info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::img_transfer::image_imgData& info() const;
  PROTOBUF_NODISCARD ::img_transfer::image_imgData* release_info();
  ::img_transfer::image_imgData* mutable_info();
  void set_allocated_info(::img_transfer::image_imgData* info);
  private:
  const ::img_transfer::image_imgData& _internal_info() const;
  ::img_transfer::image_imgData* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::img_transfer::image_imgData* info);
  ::img_transfer::image_imgData* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:img_transfer.image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::img_transfer::image_imgData* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5ftrans_2eproto;
};
// -------------------------------------------------------------------

class myStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:img_transfer.myStatus) */ {
 public:
  inline myStatus() : myStatus(nullptr) {}
  ~myStatus() override;
  explicit constexpr myStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  myStatus(const myStatus& from);
  myStatus(myStatus&& from) noexcept
    : myStatus() {
    *this = ::std::move(from);
  }

  inline myStatus& operator=(const myStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline myStatus& operator=(myStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const myStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const myStatus* internal_default_instance() {
    return reinterpret_cast<const myStatus*>(
               &_myStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(myStatus& a, myStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(myStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(myStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  myStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<myStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const myStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const myStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(myStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "img_transfer.myStatus";
  }
  protected:
  explicit myStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:img_transfer.myStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5ftrans_2eproto;
};
// -------------------------------------------------------------------

class nameList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:img_transfer.nameList) */ {
 public:
  inline nameList() : nameList(nullptr) {}
  ~nameList() override;
  explicit constexpr nameList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  nameList(const nameList& from);
  nameList(nameList&& from) noexcept
    : nameList() {
    *this = ::std::move(from);
  }

  inline nameList& operator=(const nameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline nameList& operator=(nameList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nameList& default_instance() {
    return *internal_default_instance();
  }
  static inline const nameList* internal_default_instance() {
    return reinterpret_cast<const nameList*>(
               &_nameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(nameList& a, nameList& b) {
    a.Swap(&b);
  }
  inline void Swap(nameList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<nameList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const nameList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const nameList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nameList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "img_transfer.nameList";
  }
  protected:
  explicit nameList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:img_transfer.nameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_5ftrans_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Basename

// string base_name = 1;
inline void Basename::clear_base_name() {
  base_name_.ClearToEmpty();
}
inline const std::string& Basename::base_name() const {
  // @@protoc_insertion_point(field_get:img_transfer.Basename.base_name)
  return _internal_base_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Basename::set_base_name(ArgT0&& arg0, ArgT... args) {
 
 base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:img_transfer.Basename.base_name)
}
inline std::string* Basename::mutable_base_name() {
  std::string* _s = _internal_mutable_base_name();
  // @@protoc_insertion_point(field_mutable:img_transfer.Basename.base_name)
  return _s;
}
inline const std::string& Basename::_internal_base_name() const {
  return base_name_.Get();
}
inline void Basename::_internal_set_base_name(const std::string& value) {
  
  base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Basename::_internal_mutable_base_name() {
  
  return base_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Basename::release_base_name() {
  // @@protoc_insertion_point(field_release:img_transfer.Basename.base_name)
  return base_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Basename::set_allocated_base_name(std::string* base_name) {
  if (base_name != nullptr) {
    
  } else {
    
  }
  base_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (base_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    base_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:img_transfer.Basename.base_name)
}

// -------------------------------------------------------------------

// image_imgData

// bytes data = 1;
inline void image_imgData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& image_imgData::data() const {
  // @@protoc_insertion_point(field_get:img_transfer.image.imgData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void image_imgData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:img_transfer.image.imgData.data)
}
inline std::string* image_imgData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:img_transfer.image.imgData.data)
  return _s;
}
inline const std::string& image_imgData::_internal_data() const {
  return data_.Get();
}
inline void image_imgData::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* image_imgData::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* image_imgData::release_data() {
  // @@protoc_insertion_point(field_release:img_transfer.image.imgData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void image_imgData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:img_transfer.image.imgData.data)
}

// int32 length = 2;
inline void image_imgData::clear_length() {
  length_ = 0;
}
inline int32_t image_imgData::_internal_length() const {
  return length_;
}
inline int32_t image_imgData::length() const {
  // @@protoc_insertion_point(field_get:img_transfer.image.imgData.length)
  return _internal_length();
}
inline void image_imgData::_internal_set_length(int32_t value) {
  
  length_ = value;
}
inline void image_imgData::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:img_transfer.image.imgData.length)
}

// int32 width = 3;
inline void image_imgData::clear_width() {
  width_ = 0;
}
inline int32_t image_imgData::_internal_width() const {
  return width_;
}
inline int32_t image_imgData::width() const {
  // @@protoc_insertion_point(field_get:img_transfer.image.imgData.width)
  return _internal_width();
}
inline void image_imgData::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void image_imgData::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:img_transfer.image.imgData.width)
}

// -------------------------------------------------------------------

// image

// string name = 1;
inline void image::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& image::name() const {
  // @@protoc_insertion_point(field_get:img_transfer.image.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void image::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:img_transfer.image.name)
}
inline std::string* image::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:img_transfer.image.name)
  return _s;
}
inline const std::string& image::_internal_name() const {
  return name_.Get();
}
inline void image::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* image::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* image::release_name() {
  // @@protoc_insertion_point(field_release:img_transfer.image.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:img_transfer.image.name)
}

// .img_transfer.image.imgData info = 2;
inline bool image::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool image::has_info() const {
  return _internal_has_info();
}
inline void image::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::img_transfer::image_imgData& image::_internal_info() const {
  const ::img_transfer::image_imgData* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::img_transfer::image_imgData&>(
      ::img_transfer::_image_imgData_default_instance_);
}
inline const ::img_transfer::image_imgData& image::info() const {
  // @@protoc_insertion_point(field_get:img_transfer.image.info)
  return _internal_info();
}
inline void image::unsafe_arena_set_allocated_info(
    ::img_transfer::image_imgData* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:img_transfer.image.info)
}
inline ::img_transfer::image_imgData* image::release_info() {
  
  ::img_transfer::image_imgData* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::img_transfer::image_imgData* image::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:img_transfer.image.info)
  
  ::img_transfer::image_imgData* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::img_transfer::image_imgData* image::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::img_transfer::image_imgData>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::img_transfer::image_imgData* image::mutable_info() {
  ::img_transfer::image_imgData* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:img_transfer.image.info)
  return _msg;
}
inline void image::set_allocated_info(::img_transfer::image_imgData* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::img_transfer::image_imgData>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:img_transfer.image.info)
}

// -------------------------------------------------------------------

// myStatus

// int32 code = 1;
inline void myStatus::clear_code() {
  code_ = 0;
}
inline int32_t myStatus::_internal_code() const {
  return code_;
}
inline int32_t myStatus::code() const {
  // @@protoc_insertion_point(field_get:img_transfer.myStatus.code)
  return _internal_code();
}
inline void myStatus::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void myStatus::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:img_transfer.myStatus.code)
}

// -------------------------------------------------------------------

// nameList

// repeated string name = 1;
inline int nameList::_internal_name_size() const {
  return name_.size();
}
inline int nameList::name_size() const {
  return _internal_name_size();
}
inline void nameList::clear_name() {
  name_.Clear();
}
inline std::string* nameList::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:img_transfer.nameList.name)
  return _s;
}
inline const std::string& nameList::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& nameList::name(int index) const {
  // @@protoc_insertion_point(field_get:img_transfer.nameList.name)
  return _internal_name(index);
}
inline std::string* nameList::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:img_transfer.nameList.name)
  return name_.Mutable(index);
}
inline void nameList::set_name(int index, const std::string& value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:img_transfer.nameList.name)
}
inline void nameList::set_name(int index, std::string&& value) {
  name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:img_transfer.nameList.name)
}
inline void nameList::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:img_transfer.nameList.name)
}
inline void nameList::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:img_transfer.nameList.name)
}
inline std::string* nameList::_internal_add_name() {
  return name_.Add();
}
inline void nameList::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:img_transfer.nameList.name)
}
inline void nameList::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:img_transfer.nameList.name)
}
inline void nameList::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:img_transfer.nameList.name)
}
inline void nameList::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:img_transfer.nameList.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
nameList::name() const {
  // @@protoc_insertion_point(field_list:img_transfer.nameList.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
nameList::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:img_transfer.nameList.name)
  return &name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace img_transfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_5ftrans_2eproto
