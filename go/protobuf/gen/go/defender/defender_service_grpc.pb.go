// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protobuf/defender_service.proto

package defender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DefenderServiceClient is the client API for DefenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefenderServiceClient interface {
	// 获取Defender版本信息
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error)
	// 获取系统信息
	GetSystemStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemStatus, error)
	// 获取所有节点的配置信息
	GetRosNodeCfg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RosNodesCfg, error)
	// 返回设置单个节点的配置信息
	SetRosNodeCfg(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error)
	// 删除单个节点
	// master节点不允许删除
	DeleteNodeCfg(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error)
	// 停止单个节点
	StopRosnode(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error)
	// 获取rosout输出的所有信息，保存一百条
	GetRosoutMsg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RosoutMsg, error)
	// 日志导出
	LogExport(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// 文件导出
	FileExport(ctx context.Context, in *FileExportReq, opts ...grpc.CallOption) (*FileExportRsp, error)
	// 查询网络信息
	QueryNetworkInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkConfigCollection, error)
	// 设置网络
	SetNetworkInformation(ctx context.Context, in *NetworkConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 软件升级（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	SoftwareUpgrade(ctx context.Context, in *InstallPack, opts ...grpc.CallOption) (*Result, error)
	// 版本回退（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	SoftwareDowngrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error)
	// 软件备份
	SoftwareBackup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error)
	// 软件还原
	SoftwareRollback(ctx context.Context, in *InstallPack, opts ...grpc.CallOption) (*Result, error)
	// 重启小车
	CarRestart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 模拟终端，执行下发的shell命令及其他模块命令
	CommandTerminal(ctx context.Context, opts ...grpc.CallOption) (DefenderService_CommandTerminalClient, error)
}

type defenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefenderServiceClient(cc grpc.ClientConnInterface) DefenderServiceClient {
	return &defenderServiceClient{cc}
}

func (c *defenderServiceClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) GetSystemStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemStatus, error) {
	out := new(SystemStatus)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/GetSystemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) GetRosNodeCfg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RosNodesCfg, error) {
	out := new(RosNodesCfg)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/GetRosNodeCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SetRosNodeCfg(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SetRosNodeCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) DeleteNodeCfg(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/DeleteNodeCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) StopRosnode(ctx context.Context, in *RosNode, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/StopRosnode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) GetRosoutMsg(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RosoutMsg, error) {
	out := new(RosoutMsg)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/GetRosoutMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) LogExport(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/LogExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) FileExport(ctx context.Context, in *FileExportReq, opts ...grpc.CallOption) (*FileExportRsp, error) {
	out := new(FileExportRsp)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/FileExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) QueryNetworkInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NetworkConfigCollection, error) {
	out := new(NetworkConfigCollection)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/QueryNetworkInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SetNetworkInformation(ctx context.Context, in *NetworkConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SetNetworkInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SoftwareUpgrade(ctx context.Context, in *InstallPack, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SoftwareUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SoftwareDowngrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SoftwareDowngrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SoftwareBackup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SoftwareBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) SoftwareRollback(ctx context.Context, in *InstallPack, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/SoftwareRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) CarRestart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/defender.DefenderService/CarRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defenderServiceClient) CommandTerminal(ctx context.Context, opts ...grpc.CallOption) (DefenderService_CommandTerminalClient, error) {
	stream, err := c.cc.NewStream(ctx, &DefenderService_ServiceDesc.Streams[0], "/defender.DefenderService/CommandTerminal", opts...)
	if err != nil {
		return nil, err
	}
	x := &defenderServiceCommandTerminalClient{stream}
	return x, nil
}

type DefenderService_CommandTerminalClient interface {
	Send(*InputCommand) error
	Recv() (*OutputMessage, error)
	grpc.ClientStream
}

type defenderServiceCommandTerminalClient struct {
	grpc.ClientStream
}

func (x *defenderServiceCommandTerminalClient) Send(m *InputCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *defenderServiceCommandTerminalClient) Recv() (*OutputMessage, error) {
	m := new(OutputMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DefenderServiceServer is the server API for DefenderService service.
// All implementations must embed UnimplementedDefenderServiceServer
// for forward compatibility
type DefenderServiceServer interface {
	// 获取Defender版本信息
	GetVersion(context.Context, *emptypb.Empty) (*Version, error)
	// 获取系统信息
	GetSystemStatus(context.Context, *emptypb.Empty) (*SystemStatus, error)
	// 获取所有节点的配置信息
	GetRosNodeCfg(context.Context, *emptypb.Empty) (*RosNodesCfg, error)
	// 返回设置单个节点的配置信息
	SetRosNodeCfg(context.Context, *RosNode) (*Result, error)
	// 删除单个节点
	// master节点不允许删除
	DeleteNodeCfg(context.Context, *RosNode) (*Result, error)
	// 停止单个节点
	StopRosnode(context.Context, *RosNode) (*Result, error)
	// 获取rosout输出的所有信息，保存一百条
	GetRosoutMsg(context.Context, *emptypb.Empty) (*RosoutMsg, error)
	// 日志导出
	LogExport(context.Context, *LogRequest) (*LogResponse, error)
	// 文件导出
	FileExport(context.Context, *FileExportReq) (*FileExportRsp, error)
	// 查询网络信息
	QueryNetworkInformation(context.Context, *emptypb.Empty) (*NetworkConfigCollection, error)
	// 设置网络
	SetNetworkInformation(context.Context, *NetworkConfig) (*emptypb.Empty, error)
	// 软件升级（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	SoftwareUpgrade(context.Context, *InstallPack) (*Result, error)
	// 版本回退（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	SoftwareDowngrade(context.Context, *emptypb.Empty) (*Result, error)
	// 软件备份
	SoftwareBackup(context.Context, *emptypb.Empty) (*Result, error)
	// 软件还原
	SoftwareRollback(context.Context, *InstallPack) (*Result, error)
	// 重启小车
	CarRestart(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 模拟终端，执行下发的shell命令及其他模块命令
	CommandTerminal(DefenderService_CommandTerminalServer) error
	mustEmbedUnimplementedDefenderServiceServer()
}

// UnimplementedDefenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDefenderServiceServer struct {
}

func (UnimplementedDefenderServiceServer) GetVersion(context.Context, *emptypb.Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedDefenderServiceServer) GetSystemStatus(context.Context, *emptypb.Empty) (*SystemStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStatus not implemented")
}
func (UnimplementedDefenderServiceServer) GetRosNodeCfg(context.Context, *emptypb.Empty) (*RosNodesCfg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRosNodeCfg not implemented")
}
func (UnimplementedDefenderServiceServer) SetRosNodeCfg(context.Context, *RosNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRosNodeCfg not implemented")
}
func (UnimplementedDefenderServiceServer) DeleteNodeCfg(context.Context, *RosNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNodeCfg not implemented")
}
func (UnimplementedDefenderServiceServer) StopRosnode(context.Context, *RosNode) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRosnode not implemented")
}
func (UnimplementedDefenderServiceServer) GetRosoutMsg(context.Context, *emptypb.Empty) (*RosoutMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRosoutMsg not implemented")
}
func (UnimplementedDefenderServiceServer) LogExport(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogExport not implemented")
}
func (UnimplementedDefenderServiceServer) FileExport(context.Context, *FileExportReq) (*FileExportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileExport not implemented")
}
func (UnimplementedDefenderServiceServer) QueryNetworkInformation(context.Context, *emptypb.Empty) (*NetworkConfigCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNetworkInformation not implemented")
}
func (UnimplementedDefenderServiceServer) SetNetworkInformation(context.Context, *NetworkConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetworkInformation not implemented")
}
func (UnimplementedDefenderServiceServer) SoftwareUpgrade(context.Context, *InstallPack) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareUpgrade not implemented")
}
func (UnimplementedDefenderServiceServer) SoftwareDowngrade(context.Context, *emptypb.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareDowngrade not implemented")
}
func (UnimplementedDefenderServiceServer) SoftwareBackup(context.Context, *emptypb.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareBackup not implemented")
}
func (UnimplementedDefenderServiceServer) SoftwareRollback(context.Context, *InstallPack) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwareRollback not implemented")
}
func (UnimplementedDefenderServiceServer) CarRestart(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CarRestart not implemented")
}
func (UnimplementedDefenderServiceServer) CommandTerminal(DefenderService_CommandTerminalServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandTerminal not implemented")
}
func (UnimplementedDefenderServiceServer) mustEmbedUnimplementedDefenderServiceServer() {}

// UnsafeDefenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefenderServiceServer will
// result in compilation errors.
type UnsafeDefenderServiceServer interface {
	mustEmbedUnimplementedDefenderServiceServer()
}

func RegisterDefenderServiceServer(s grpc.ServiceRegistrar, srv DefenderServiceServer) {
	s.RegisterService(&DefenderService_ServiceDesc, srv)
}

func _DefenderService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/GetSystemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).GetSystemStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_GetRosNodeCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).GetRosNodeCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/GetRosNodeCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).GetRosNodeCfg(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SetRosNodeCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RosNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SetRosNodeCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SetRosNodeCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SetRosNodeCfg(ctx, req.(*RosNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_DeleteNodeCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RosNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).DeleteNodeCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/DeleteNodeCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).DeleteNodeCfg(ctx, req.(*RosNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_StopRosnode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RosNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).StopRosnode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/StopRosnode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).StopRosnode(ctx, req.(*RosNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_GetRosoutMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).GetRosoutMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/GetRosoutMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).GetRosoutMsg(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_LogExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).LogExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/LogExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).LogExport(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_FileExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).FileExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/FileExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).FileExport(ctx, req.(*FileExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_QueryNetworkInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).QueryNetworkInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/QueryNetworkInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).QueryNetworkInformation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SetNetworkInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SetNetworkInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SetNetworkInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SetNetworkInformation(ctx, req.(*NetworkConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SoftwareUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SoftwareUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SoftwareUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SoftwareUpgrade(ctx, req.(*InstallPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SoftwareDowngrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SoftwareDowngrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SoftwareDowngrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SoftwareDowngrade(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SoftwareBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SoftwareBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SoftwareBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SoftwareBackup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_SoftwareRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).SoftwareRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/SoftwareRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).SoftwareRollback(ctx, req.(*InstallPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_CarRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefenderServiceServer).CarRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/defender.DefenderService/CarRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefenderServiceServer).CarRestart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefenderService_CommandTerminal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DefenderServiceServer).CommandTerminal(&defenderServiceCommandTerminalServer{stream})
}

type DefenderService_CommandTerminalServer interface {
	Send(*OutputMessage) error
	Recv() (*InputCommand, error)
	grpc.ServerStream
}

type defenderServiceCommandTerminalServer struct {
	grpc.ServerStream
}

func (x *defenderServiceCommandTerminalServer) Send(m *OutputMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *defenderServiceCommandTerminalServer) Recv() (*InputCommand, error) {
	m := new(InputCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DefenderService_ServiceDesc is the grpc.ServiceDesc for DefenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "defender.DefenderService",
	HandlerType: (*DefenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _DefenderService_GetVersion_Handler,
		},
		{
			MethodName: "GetSystemStatus",
			Handler:    _DefenderService_GetSystemStatus_Handler,
		},
		{
			MethodName: "GetRosNodeCfg",
			Handler:    _DefenderService_GetRosNodeCfg_Handler,
		},
		{
			MethodName: "SetRosNodeCfg",
			Handler:    _DefenderService_SetRosNodeCfg_Handler,
		},
		{
			MethodName: "DeleteNodeCfg",
			Handler:    _DefenderService_DeleteNodeCfg_Handler,
		},
		{
			MethodName: "StopRosnode",
			Handler:    _DefenderService_StopRosnode_Handler,
		},
		{
			MethodName: "GetRosoutMsg",
			Handler:    _DefenderService_GetRosoutMsg_Handler,
		},
		{
			MethodName: "LogExport",
			Handler:    _DefenderService_LogExport_Handler,
		},
		{
			MethodName: "FileExport",
			Handler:    _DefenderService_FileExport_Handler,
		},
		{
			MethodName: "QueryNetworkInformation",
			Handler:    _DefenderService_QueryNetworkInformation_Handler,
		},
		{
			MethodName: "SetNetworkInformation",
			Handler:    _DefenderService_SetNetworkInformation_Handler,
		},
		{
			MethodName: "SoftwareUpgrade",
			Handler:    _DefenderService_SoftwareUpgrade_Handler,
		},
		{
			MethodName: "SoftwareDowngrade",
			Handler:    _DefenderService_SoftwareDowngrade_Handler,
		},
		{
			MethodName: "SoftwareBackup",
			Handler:    _DefenderService_SoftwareBackup_Handler,
		},
		{
			MethodName: "SoftwareRollback",
			Handler:    _DefenderService_SoftwareRollback_Handler,
		},
		{
			MethodName: "CarRestart",
			Handler:    _DefenderService_CarRestart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandTerminal",
			Handler:       _DefenderService_CommandTerminal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/defender_service.proto",
}
