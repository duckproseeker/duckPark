syntax = "proto3";

//package camel.api;
option go_package="./camel";

import "protobuf/camel-agvs.proto";
import "protobuf/camel-common.proto";
import "protobuf/camel-db.proto";
import "google/protobuf/empty.proto";

//AGV 内部信息
message AgvInfo{

	Motion		montion 	= 1;	//运动控制参数
	Position	postion 	= 2;	//导航定位参数
	UIStation	station  	= 3;	//当前站点
	repeated Alarm  alarm 		= 4;	//告警信息 
	Battery 	battery 	= 5;	//电池信息
	int32		runMode		= 6;	//运行模式，0手动，1调试，2自动
	float		height		= 7;	//叉子高度
	PathCollection  route		= 9;	//当前路径
	int32 		runStatus	= 10;	//运行状态，0停止，1预备态，2运行态，3暂停态
	Version		version		= 11;	//camel版本信息
	DebugInfo	debug		= 12;	//调试信息
	CamelSysInfo agvsInfo 	= 13;	//agvs信息
	GrpcTaskInfomation grpcTask	= 14; 	//单机任务信息


	message UIStation{
		string stationOnMap = 1;	//在全局地图上的站点
		string stationOnPath = 2;	//在运行路径上的站点
		string targetStation = 3;	//小车通行点
	}
	
	//运动控制相关参数
	message Motion{
		float	vx	= 1;
		float	vy 	= 2;
		float 	w 	= 3;
		float 	od1 = 4;
		float 	od2 = 5;
	}
	
	message Alarm{

		Source type    = 1;  //报警源
		Level  level   = 2;  //级别
		bytes  message = 3;  //消息描述
		bytes  time    = 4;  //时间
		int32  code    = 5;  //消息id
		
		enum Source{
			PLC_MCU = 0;
			Camel   = 1;   //Camel
			Controller = 2;
			Nav 	= 3;
			AGVS    = 4;   //AGVS
			Defender= 5;
			Unknow  = 6;
		}
		
		enum Level{
			General  = 0; //一般
			Serious  = 1; //严重
			Fatal	 = 2; //致命
		}
	}
	message DebugInfo {
		float Vx = 1;		// 期望速度
		float Vy = 2;
		float W = 3;
		float GoalX = 4;	// 目标点坐标
		float GoalY = 5;
		uint64 timestamp = 6;	// 时间戳
		
		float TaskAverageVelocity = 7;			// 当前任务运行效率
		float TotalTaskAverageVelocity = 8;		// 总的任务运行效率
		float TotalOdometry = 9;				// 总里程数
		float TotalRuntime = 10;				// 总运行时间
		
	}
}

enum Language {
	en_us = 0;
	zh_cn = 1;
}

//UI向Camel请求的配置信息
message UIConfig{
	string	 navEndpoint 	= 1;
	Language language	= 2;
}

//版本信息
message Version{
	string CamelVersion = 1;
	bytes  DBVersion  = 2;
	string DefenderVersion = 3;
	string PackageVersion = 4;
}

message Operation{
	bool isContinue = 1; //继续运行
	bool clearPath = 2;  //清除路径
	bool clearAction = 3; //清除动作
	bool disableCargo = 4; //屏蔽取货光电
}

//Camel的配置信息(json格式的字符串)
message CamelCfg{
	string JsonString = 1;
}

//Camel中收到的agvs的信息
message CamelSysInfo {
	CamelMessage.AllowFromAgvs	agvsInfo = 1;
	CamelMessage.MissonFromAgvs	taskInfo = 2;
}

message LogRequest {
	string 		car	= 1;	//小车名
	repeated string modules = 2;	//需要获取日志的模块 (camel, localizer, rosplc...)
	repeated string time 	= 3;	//获取哪一天的日志 (2020-06-01, 2020-06-02, 2020-06-03)
}

message LogResponse {
	string path = 1;		//文件路径(ftp://192.168.1.73:21/AGV#01_2020-06-01.zip)
}

message RosNode {
	string 	configuration = 1;
	bool	modify_enable = 2;
	bool    set_master = 3;
	string  module = 4;
	string  filename = 5;
	bool 	is_running = 6;
}

message RosNodesCfg {
	repeated RosNode nodes = 1;
}

message RosoutMsg {
	message RosoutInfo
	{
		int32 	level = 1;
		string 	name = 2;
		string 	msg = 3;
		string 	topic = 4;
	}

	repeated RosoutInfo messages = 1;
}

message AlarmMsg {
	int32 	code = 1;
	bool 	cleared = 2;
}

message NetworkConfig {
	string name	= 1;
	string address	= 2;
	string mac	= 3;
	string netmask 	= 4;
	string gateway	= 5;
	string dns	= 6;
}

message WirlessConfig {
	string ssid = 1;
	string passwd = 2;
	NetworkConfig config = 3;
}

message WirlessInfo {
	string ssid = 1;
	int32 signalLevel = 2; // 0~4格信号
}

message WLANList {
	repeated WirlessInfo wirlessList = 1;
}

message NetworkConfigCollection {
	repeated NetworkConfig config_collection = 1;
}

message InstallPack {
	string filename = 1;
}

message SystemStatus {
	string version = 1;
	float cpu_usage = 2;
	int32 mem_total = 3;
	int32 mem_used = 4;
	int32 disk_total = 5;
	int32 disk_used = 6;
}

message UpdateStation {
	int32 marker_type = 1;
}

message UpdatePose {
	Result   error_info = 1;
    Position pose = 2;
}

//将agv内部数据提供给外部grpc调用者
service AgvService{

	//UploadMapData为上传区域数据
	//客户端传入区域数据流
	//服务端传出是否成功
	rpc UploadMapData(ISeeMap) returns (Result);

	//获取当前得版本信息
	//客户端传入空值
	rpc GetVersion (ISeeMap) returns (Version);

	//客户端传入空值
	//服务端传出AGV状态
	rpc GetAgvState(google.protobuf.Empty) returns (AgvInfo);

	//UI向Camel请求配置信息
	rpc RequestUIConfig(google.protobuf.Empty) returns (UIConfig);

	//获取系统信息
	rpc GetSystemStatus(google.protobuf.Empty) returns (SystemStatus);
	
	//客户端获取AGVS中得信息.
	//服务端返回CamelMessage 其中只有 
	rpc GetAgvStateInAgvs(google.protobuf.Empty) returns (CamelSysInfo);
	
	//客户端传入上位机得CamelMessage 其中只用 RequestToAgvs.
	//返回是否有异常信息
	rpc SendToAgvs(CamelMessage) returns (Result);
	
	//客户端传入AGV得一些操作.
	//返回是否有异常
	rpc ControlAgv(Operation) returns (Result);

	//设置camel的配置项
	//服务端传出是否成功
	rpc SetCamelCfg(CamelCfg) returns (Result);
	
	//客户端传空值
	//服务端传出camel的配置信息
	rpc GetCamelCfg(google.protobuf.Empty) returns (CamelCfg);

	//获取Camel中所有的路径
	rpc GetCamelPathCollection(google.protobuf.Empty) returns (PathCollection);

	// 客户端模拟任务发布
	rpc RoutePlan(CamelMessage.MissonFromAgvs) returns (google.protobuf.Empty);

	// 获取所有节点的配置信息
	rpc GetRosNodeCfg(google.protobuf.Empty) returns (RosNodesCfg);

	// 返回设置单个节点的配置信息
	rpc SetRosNodeCfg(RosNode) returns (Result);

	// 删除单个节点
	// master节点不允许删除
	rpc DeleteNodeCfg(RosNode) returns (Result);

	// 停止单个节点
	rpc StopRosnode(RosNode) returns (Result);

	// 获取rosout输出的所有信息，保存一百条
	rpc GetRosoutMsg(google.protobuf.Empty) returns (RosoutMsg);

	// 设置避障区域
	rpc SetAvoidanceArea(AvoidanceAreaCollection) returns (google.protobuf.Empty);


	// 上报报警给Camel
	// cleared: true(清除)/false(新增)
	rpc AlarmUpload(AlarmMsg) returns (google.protobuf.Empty);

	// 查询网络信息
	rpc QueryNetworkInformation(google.protobuf.Empty) returns (NetworkConfigCollection);

	// 设置网络
	rpc SetNetworkInformation(NetworkConfig) returns (google.protobuf.Empty);
	
	// 搜索WIFI列表
	rpc SearchWLANList(google.protobuf.Empty) returns (WLANList);
	
	// 连接WIFI
	rpc ConnectWLAN(WirlessConfig) returns (Result);

	// 日志导出
	rpc LogExport(LogRequest) returns (LogResponse);
	
	// 软件升级（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	rpc SoftwareUpgrade(InstallPack) returns (Result);
	
	// 软件备份
	rpc SoftwareBackup(google.protobuf.Empty) returns (Result);
	
	// 软件还原
	rpc SoftwareRollback(InstallPack) returns (Result);
	
	// 版本回退（Result: Code -> 0 成功, Message-> 非零时的错误消息）
	// 若成功则会在5s后重启电脑！！！
	rpc SoftwareDowngrade(google.protobuf.Empty) returns (Result);


	// 模拟手柄控制小车
	rpc StickControl(Gamepad) returns (Result);
	// 申请手柄控制
	rpc ApplyStickControl(GamepadControl) returns (Token) ;
	// 设置匹配点
	rpc ModifyMatchPoint(MatchPointCommand) returns (Result);
	// 获取匹配点
	rpc GetMatchPoint(google.protobuf.Empty) returns (MatchPoints);
	// 重启小车
	rpc CarRestart(google.protobuf.Empty) returns (google.protobuf.Empty);

    // 更新站点坐标
	rpc UpdateStationPose(UpdateStation) returns (UpdatePose);

	// 任务点配置
	rpc TaskAllocationOperation(GrpcTaskOperation) returns (GrpcTaskAllocations);
	// 重置任务列表
	rpc AssignAllocationTasks(GrpcTaskAllocations) returns (Result);
}

